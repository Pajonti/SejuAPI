/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.api;

import fr.pajonti.sejuapi.invoker.ApiCallback;
import fr.pajonti.sejuapi.invoker.ApiClient;
import fr.pajonti.sejuapi.invoker.ApiException;
import fr.pajonti.sejuapi.invoker.ApiResponse;
import fr.pajonti.sejuapi.invoker.Configuration;
import fr.pajonti.sejuapi.invoker.Pair;
import fr.pajonti.sejuapi.invoker.ProgressRequestBody;
import fr.pajonti.sejuapi.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.pajonti.sejuapi.model.TournamentStubV5LobbyEventV5DTOWrapper;
import fr.pajonti.sejuapi.model.TournamentStubV5ProviderRegistrationParametersV5;
import fr.pajonti.sejuapi.model.TournamentStubV5TournamentCodeParametersV5;
import fr.pajonti.sejuapi.model.TournamentStubV5TournamentCodeV5DTO;
import fr.pajonti.sejuapi.model.TournamentStubV5TournamentRegistrationParametersV5;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TournamentStubV5Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TournamentStubV5Api() {
        this(Configuration.getDefaultApiClient());
    }

    public TournamentStubV5Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tournamentStubV5CreateTournamentCode
     * @param tournamentId The tournament ID (required)
     * @param tournamentStubV5TournamentCodeParametersV5 Metadata for the generated code (required)
     * @param count The number of codes to create (max 1000) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_createTournamentCode">Create a tournament code for the given tournament - Stub method Documentation</a>
     */
    public okhttp3.Call tournamentStubV5CreateTournamentCodeCall(Long tournamentId, TournamentStubV5TournamentCodeParametersV5 tournamentStubV5TournamentCodeParametersV5, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tournamentStubV5TournamentCodeParametersV5;

        // create path and map variables
        String localVarPath = "/lol/tournament-stub/v5/codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (tournamentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tournamentId", tournamentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tournamentStubV5CreateTournamentCodeValidateBeforeCall(Long tournamentId, TournamentStubV5TournamentCodeParametersV5 tournamentStubV5TournamentCodeParametersV5, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tournamentId' is set
        if (tournamentId == null) {
            throw new ApiException("Missing the required parameter 'tournamentId' when calling tournamentStubV5CreateTournamentCode(Async)");
        }

        // verify the required parameter 'tournamentStubV5TournamentCodeParametersV5' is set
        if (tournamentStubV5TournamentCodeParametersV5 == null) {
            throw new ApiException("Missing the required parameter 'tournamentStubV5TournamentCodeParametersV5' when calling tournamentStubV5CreateTournamentCode(Async)");
        }

        return tournamentStubV5CreateTournamentCodeCall(tournamentId, tournamentStubV5TournamentCodeParametersV5, count, _callback);

    }

    /**
     * Create a tournament code for the given tournament - Stub method
     * Create a tournament code for the given tournament - Stub method
     * @param tournamentId The tournament ID (required)
     * @param tournamentStubV5TournamentCodeParametersV5 Metadata for the generated code (required)
     * @param count The number of codes to create (max 1000) (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_createTournamentCode">Create a tournament code for the given tournament - Stub method Documentation</a>
     */
    public List<String> tournamentStubV5CreateTournamentCode(Long tournamentId, TournamentStubV5TournamentCodeParametersV5 tournamentStubV5TournamentCodeParametersV5, Integer count) throws ApiException {
        ApiResponse<List<String>> localVarResp = tournamentStubV5CreateTournamentCodeWithHttpInfo(tournamentId, tournamentStubV5TournamentCodeParametersV5, count);
        return localVarResp.getData();
    }

    /**
     * Create a tournament code for the given tournament - Stub method
     * Create a tournament code for the given tournament - Stub method
     * @param tournamentId The tournament ID (required)
     * @param tournamentStubV5TournamentCodeParametersV5 Metadata for the generated code (required)
     * @param count The number of codes to create (max 1000) (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_createTournamentCode">Create a tournament code for the given tournament - Stub method Documentation</a>
     */
    public ApiResponse<List<String>> tournamentStubV5CreateTournamentCodeWithHttpInfo(Long tournamentId, TournamentStubV5TournamentCodeParametersV5 tournamentStubV5TournamentCodeParametersV5, Integer count) throws ApiException {
        okhttp3.Call localVarCall = tournamentStubV5CreateTournamentCodeValidateBeforeCall(tournamentId, tournamentStubV5TournamentCodeParametersV5, count, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a tournament code for the given tournament - Stub method (asynchronously)
     * Create a tournament code for the given tournament - Stub method
     * @param tournamentId The tournament ID (required)
     * @param tournamentStubV5TournamentCodeParametersV5 Metadata for the generated code (required)
     * @param count The number of codes to create (max 1000) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_createTournamentCode">Create a tournament code for the given tournament - Stub method Documentation</a>
     */
    public okhttp3.Call tournamentStubV5CreateTournamentCodeAsync(Long tournamentId, TournamentStubV5TournamentCodeParametersV5 tournamentStubV5TournamentCodeParametersV5, Integer count, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = tournamentStubV5CreateTournamentCodeValidateBeforeCall(tournamentId, tournamentStubV5TournamentCodeParametersV5, count, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tournamentStubV5GetLobbyEventsByCode
     * @param tournamentCode The short code to look up lobby events for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/GET_getLobbyEventsByCode">Gets a list of lobby events by tournament code - Stub method Documentation</a>
     */
    public okhttp3.Call tournamentStubV5GetLobbyEventsByCodeCall(String tournamentCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lol/tournament-stub/v5/lobby-events/by-code/{tournamentCode}"
            .replace("{" + "tournamentCode" + "}", localVarApiClient.escapeString(tournamentCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tournamentStubV5GetLobbyEventsByCodeValidateBeforeCall(String tournamentCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tournamentCode' is set
        if (tournamentCode == null) {
            throw new ApiException("Missing the required parameter 'tournamentCode' when calling tournamentStubV5GetLobbyEventsByCode(Async)");
        }

        return tournamentStubV5GetLobbyEventsByCodeCall(tournamentCode, _callback);

    }

    /**
     * Gets a list of lobby events by tournament code - Stub method
     * Gets a list of lobby events by tournament code - Stub method
     * @param tournamentCode The short code to look up lobby events for (required)
     * @return TournamentStubV5LobbyEventV5DTOWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/GET_getLobbyEventsByCode">Gets a list of lobby events by tournament code - Stub method Documentation</a>
     */
    public TournamentStubV5LobbyEventV5DTOWrapper tournamentStubV5GetLobbyEventsByCode(String tournamentCode) throws ApiException {
        ApiResponse<TournamentStubV5LobbyEventV5DTOWrapper> localVarResp = tournamentStubV5GetLobbyEventsByCodeWithHttpInfo(tournamentCode);
        return localVarResp.getData();
    }

    /**
     * Gets a list of lobby events by tournament code - Stub method
     * Gets a list of lobby events by tournament code - Stub method
     * @param tournamentCode The short code to look up lobby events for (required)
     * @return ApiResponse&lt;TournamentStubV5LobbyEventV5DTOWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/GET_getLobbyEventsByCode">Gets a list of lobby events by tournament code - Stub method Documentation</a>
     */
    public ApiResponse<TournamentStubV5LobbyEventV5DTOWrapper> tournamentStubV5GetLobbyEventsByCodeWithHttpInfo(String tournamentCode) throws ApiException {
        okhttp3.Call localVarCall = tournamentStubV5GetLobbyEventsByCodeValidateBeforeCall(tournamentCode, null);
        Type localVarReturnType = new TypeToken<TournamentStubV5LobbyEventV5DTOWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of lobby events by tournament code - Stub method (asynchronously)
     * Gets a list of lobby events by tournament code - Stub method
     * @param tournamentCode The short code to look up lobby events for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/GET_getLobbyEventsByCode">Gets a list of lobby events by tournament code - Stub method Documentation</a>
     */
    public okhttp3.Call tournamentStubV5GetLobbyEventsByCodeAsync(String tournamentCode, final ApiCallback<TournamentStubV5LobbyEventV5DTOWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = tournamentStubV5GetLobbyEventsByCodeValidateBeforeCall(tournamentCode, _callback);
        Type localVarReturnType = new TypeToken<TournamentStubV5LobbyEventV5DTOWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tournamentStubV5GetTournamentCode
     * @param tournamentCode The tournament code string. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/GET_getTournamentCode">Returns the tournament code DTO associated with a tournament code string - Stub Method Documentation</a>
     */
    public okhttp3.Call tournamentStubV5GetTournamentCodeCall(String tournamentCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lol/tournament-stub/v5/codes/{tournamentCode}"
            .replace("{" + "tournamentCode" + "}", localVarApiClient.escapeString(tournamentCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tournamentStubV5GetTournamentCodeValidateBeforeCall(String tournamentCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tournamentCode' is set
        if (tournamentCode == null) {
            throw new ApiException("Missing the required parameter 'tournamentCode' when calling tournamentStubV5GetTournamentCode(Async)");
        }

        return tournamentStubV5GetTournamentCodeCall(tournamentCode, _callback);

    }

    /**
     * Returns the tournament code DTO associated with a tournament code string - Stub Method
     * Returns the tournament code DTO associated with a tournament code string - Stub Method
     * @param tournamentCode The tournament code string. (required)
     * @return TournamentStubV5TournamentCodeV5DTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/GET_getTournamentCode">Returns the tournament code DTO associated with a tournament code string - Stub Method Documentation</a>
     */
    public TournamentStubV5TournamentCodeV5DTO tournamentStubV5GetTournamentCode(String tournamentCode) throws ApiException {
        ApiResponse<TournamentStubV5TournamentCodeV5DTO> localVarResp = tournamentStubV5GetTournamentCodeWithHttpInfo(tournamentCode);
        return localVarResp.getData();
    }

    /**
     * Returns the tournament code DTO associated with a tournament code string - Stub Method
     * Returns the tournament code DTO associated with a tournament code string - Stub Method
     * @param tournamentCode The tournament code string. (required)
     * @return ApiResponse&lt;TournamentStubV5TournamentCodeV5DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/GET_getTournamentCode">Returns the tournament code DTO associated with a tournament code string - Stub Method Documentation</a>
     */
    public ApiResponse<TournamentStubV5TournamentCodeV5DTO> tournamentStubV5GetTournamentCodeWithHttpInfo(String tournamentCode) throws ApiException {
        okhttp3.Call localVarCall = tournamentStubV5GetTournamentCodeValidateBeforeCall(tournamentCode, null);
        Type localVarReturnType = new TypeToken<TournamentStubV5TournamentCodeV5DTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the tournament code DTO associated with a tournament code string - Stub Method (asynchronously)
     * Returns the tournament code DTO associated with a tournament code string - Stub Method
     * @param tournamentCode The tournament code string. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/GET_getTournamentCode">Returns the tournament code DTO associated with a tournament code string - Stub Method Documentation</a>
     */
    public okhttp3.Call tournamentStubV5GetTournamentCodeAsync(String tournamentCode, final ApiCallback<TournamentStubV5TournamentCodeV5DTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = tournamentStubV5GetTournamentCodeValidateBeforeCall(tournamentCode, _callback);
        Type localVarReturnType = new TypeToken<TournamentStubV5TournamentCodeV5DTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tournamentStubV5RegisterProviderData
     * @param tournamentStubV5ProviderRegistrationParametersV5 The provider definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_registerProviderData">Creates a tournament provider and returns its ID - Stub method Documentation</a>
     */
    public okhttp3.Call tournamentStubV5RegisterProviderDataCall(TournamentStubV5ProviderRegistrationParametersV5 tournamentStubV5ProviderRegistrationParametersV5, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tournamentStubV5ProviderRegistrationParametersV5;

        // create path and map variables
        String localVarPath = "/lol/tournament-stub/v5/providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tournamentStubV5RegisterProviderDataValidateBeforeCall(TournamentStubV5ProviderRegistrationParametersV5 tournamentStubV5ProviderRegistrationParametersV5, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tournamentStubV5ProviderRegistrationParametersV5' is set
        if (tournamentStubV5ProviderRegistrationParametersV5 == null) {
            throw new ApiException("Missing the required parameter 'tournamentStubV5ProviderRegistrationParametersV5' when calling tournamentStubV5RegisterProviderData(Async)");
        }

        return tournamentStubV5RegisterProviderDataCall(tournamentStubV5ProviderRegistrationParametersV5, _callback);

    }

    /**
     * Creates a tournament provider and returns its ID - Stub method
     * Creates a tournament provider and returns its ID - Stub method ## Implementation Notes Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
     * @param tournamentStubV5ProviderRegistrationParametersV5 The provider definition. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_registerProviderData">Creates a tournament provider and returns its ID - Stub method Documentation</a>
     */
    public Integer tournamentStubV5RegisterProviderData(TournamentStubV5ProviderRegistrationParametersV5 tournamentStubV5ProviderRegistrationParametersV5) throws ApiException {
        ApiResponse<Integer> localVarResp = tournamentStubV5RegisterProviderDataWithHttpInfo(tournamentStubV5ProviderRegistrationParametersV5);
        return localVarResp.getData();
    }

    /**
     * Creates a tournament provider and returns its ID - Stub method
     * Creates a tournament provider and returns its ID - Stub method ## Implementation Notes Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
     * @param tournamentStubV5ProviderRegistrationParametersV5 The provider definition. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_registerProviderData">Creates a tournament provider and returns its ID - Stub method Documentation</a>
     */
    public ApiResponse<Integer> tournamentStubV5RegisterProviderDataWithHttpInfo(TournamentStubV5ProviderRegistrationParametersV5 tournamentStubV5ProviderRegistrationParametersV5) throws ApiException {
        okhttp3.Call localVarCall = tournamentStubV5RegisterProviderDataValidateBeforeCall(tournamentStubV5ProviderRegistrationParametersV5, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a tournament provider and returns its ID - Stub method (asynchronously)
     * Creates a tournament provider and returns its ID - Stub method ## Implementation Notes Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
     * @param tournamentStubV5ProviderRegistrationParametersV5 The provider definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_registerProviderData">Creates a tournament provider and returns its ID - Stub method Documentation</a>
     */
    public okhttp3.Call tournamentStubV5RegisterProviderDataAsync(TournamentStubV5ProviderRegistrationParametersV5 tournamentStubV5ProviderRegistrationParametersV5, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = tournamentStubV5RegisterProviderDataValidateBeforeCall(tournamentStubV5ProviderRegistrationParametersV5, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tournamentStubV5RegisterTournament
     * @param tournamentStubV5TournamentRegistrationParametersV5 The tournament definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_registerTournament">Creates a tournament and returns its ID - Stub method Documentation</a>
     */
    public okhttp3.Call tournamentStubV5RegisterTournamentCall(TournamentStubV5TournamentRegistrationParametersV5 tournamentStubV5TournamentRegistrationParametersV5, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tournamentStubV5TournamentRegistrationParametersV5;

        // create path and map variables
        String localVarPath = "/lol/tournament-stub/v5/tournaments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Riot-Token", "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tournamentStubV5RegisterTournamentValidateBeforeCall(TournamentStubV5TournamentRegistrationParametersV5 tournamentStubV5TournamentRegistrationParametersV5, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tournamentStubV5TournamentRegistrationParametersV5' is set
        if (tournamentStubV5TournamentRegistrationParametersV5 == null) {
            throw new ApiException("Missing the required parameter 'tournamentStubV5TournamentRegistrationParametersV5' when calling tournamentStubV5RegisterTournament(Async)");
        }

        return tournamentStubV5RegisterTournamentCall(tournamentStubV5TournamentRegistrationParametersV5, _callback);

    }

    /**
     * Creates a tournament and returns its ID - Stub method
     * Creates a tournament and returns its ID - Stub method
     * @param tournamentStubV5TournamentRegistrationParametersV5 The tournament definition. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_registerTournament">Creates a tournament and returns its ID - Stub method Documentation</a>
     */
    public Integer tournamentStubV5RegisterTournament(TournamentStubV5TournamentRegistrationParametersV5 tournamentStubV5TournamentRegistrationParametersV5) throws ApiException {
        ApiResponse<Integer> localVarResp = tournamentStubV5RegisterTournamentWithHttpInfo(tournamentStubV5TournamentRegistrationParametersV5);
        return localVarResp.getData();
    }

    /**
     * Creates a tournament and returns its ID - Stub method
     * Creates a tournament and returns its ID - Stub method
     * @param tournamentStubV5TournamentRegistrationParametersV5 The tournament definition. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_registerTournament">Creates a tournament and returns its ID - Stub method Documentation</a>
     */
    public ApiResponse<Integer> tournamentStubV5RegisterTournamentWithHttpInfo(TournamentStubV5TournamentRegistrationParametersV5 tournamentStubV5TournamentRegistrationParametersV5) throws ApiException {
        okhttp3.Call localVarCall = tournamentStubV5RegisterTournamentValidateBeforeCall(tournamentStubV5TournamentRegistrationParametersV5, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a tournament and returns its ID - Stub method (asynchronously)
     * Creates a tournament and returns its ID - Stub method
     * @param tournamentStubV5TournamentRegistrationParametersV5 The tournament definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data not found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad gateway </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     * Official API Reference
     * @see <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v5/POST_registerTournament">Creates a tournament and returns its ID - Stub method Documentation</a>
     */
    public okhttp3.Call tournamentStubV5RegisterTournamentAsync(TournamentStubV5TournamentRegistrationParametersV5 tournamentStubV5TournamentRegistrationParametersV5, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = tournamentStubV5RegisterTournamentValidateBeforeCall(tournamentStubV5TournamentRegistrationParametersV5, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
