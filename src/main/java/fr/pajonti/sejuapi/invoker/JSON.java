/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.invoker;

import com.fasterxml.jackson.databind.util.StdDateFormat;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;
import java.util.TimeZone;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    private static final StdDateFormat sdf = new StdDateFormat()
        .withTimeZone(TimeZone.getTimeZone(ZoneId.systemDefault()))
        .withColonInTimeZone(true);
    private static final DateTimeFormatter dtf = DateTimeFormatter.ISO_OFFSET_DATE_TIME;

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    static {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
        gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.AccountV1AccountDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.AccountV1ActiveShardDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ChampionMasteryV4ChampionMasteryDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ChampionV3ChampionInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ClashV1PlayerDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ClashV1TeamDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ClashV1TournamentDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ClashV1TournamentPhaseDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.Error.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ErrorStatus.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LeagueExpV4LeagueEntryDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LeagueExpV4MiniSeriesDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LeagueV4LeagueEntryDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LeagueV4LeagueItemDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LeagueV4LeagueListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LeagueV4MiniSeriesDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolChallengesV1ApexPlayerInfoDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolChallengesV1ChallengeConfigInfoDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolChallengesV1ChallengeInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolChallengesV1ChallengePoints.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolChallengesV1PlayerClientPreferences.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolChallengesV1PlayerInfoDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolStatusV3Incident.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolStatusV3Message.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolStatusV3Service.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolStatusV3ShardStatus.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolStatusV3Translation.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolStatusV4ContentDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolStatusV4PlatformDataDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolStatusV4StatusDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LolStatusV4UpdateDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LorDeckV1DeckDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LorDeckV1NewDeckDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LorInventoryV1CardDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LorMatchV1InfoDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LorMatchV1MatchDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LorMatchV1MetadataDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LorMatchV1PlayerDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LorRankedV1LeaderboardDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LorRankedV1PlayerDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LorStatusV1ContentDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LorStatusV1PlatformDataDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LorStatusV1StatusDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.LorStatusV1UpdateDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5BanDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5InfoDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5MatchDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5MatchTimelineDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5MatchTimelineInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5MatchTimelineInfoFrame.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5MatchTimelineInfoFrameEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5MatchTimelineInfoFrameEventVictimDamageDealt.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5MatchTimelineInfoFrameParticipantFrame.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5MatchTimelineInfoFrameParticipantFrameChampionStats.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5MatchTimelineInfoFrameParticipantFrameDamageStats.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5MatchTimelineInfoFrameParticipantFrames.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5MatchTimelineInfoParticipant.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5MatchTimelinePosition.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5MetadataDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5ObjectiveDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5ObjectivesDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5ParticipantChallenges.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5ParticipantDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5ParticipantMissions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5PerkStatsDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5PerkStyleDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5PerkStyleSelectionDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5PerksDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.MatchV5TeamDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV4BannedChampion.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV4CurrentGameInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV4CurrentGameParticipant.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV4FeaturedGameInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV4FeaturedGames.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV4GameCustomizationObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV4Observer.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV4Participant.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV4Perks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV5BannedChampion.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV5CurrentGameInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV5CurrentGameParticipant.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV5FeaturedGameInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV5FeaturedGames.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV5GameCustomizationObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV5Observer.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV5Participant.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SpectatorV5Perks.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.SummonerV4SummonerDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftLeagueV1LeagueEntryDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftLeagueV1LeagueItemDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftLeagueV1LeagueListDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftLeagueV1MiniSeriesDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftLeagueV1TopRatedLadderEntryDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftMatchV1CompanionDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftMatchV1InfoDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftMatchV1MatchDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftMatchV1MetadataDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftMatchV1ParticipantDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftMatchV1ParticipantMissionsDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftMatchV1TraitDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftMatchV1UnitDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftStatusV1ContentDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftStatusV1PlatformDataDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftStatusV1StatusDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftStatusV1UpdateDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TftSummonerV1SummonerDTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentStubV5LobbyEventV5DTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentStubV5LobbyEventV5DTOWrapper.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentStubV5ProviderRegistrationParametersV5.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentStubV5TournamentCodeParametersV5.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentStubV5TournamentCodeV5DTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentStubV5TournamentRegistrationParametersV5.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentV5LobbyEventV5DTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentV5LobbyEventV5DTOWrapper.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentV5ProviderRegistrationParametersV5.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentV5TournamentCodeParametersV5.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentV5TournamentCodeUpdateParametersV5.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentV5TournamentCodeV5DTO.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentV5TournamentGamesV5.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentV5TournamentRegistrationParametersV5.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.TournamentV5TournamentTeamV5.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValContentV1ActDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValContentV1ContentDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValContentV1ContentItemDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValContentV1LocalizedNamesDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1AbilityCastsDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1AbilityDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1CoachDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1DamageDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1EconomyDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1FinishingDamageDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1KillDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1LocationDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1MatchDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1MatchInfoDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1MatchlistDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1MatchlistEntryDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1PlayerDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1PlayerLocationsDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1PlayerRoundStatsDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1PlayerStatsDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1RecentMatchesDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1RoundResultDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValMatchV1TeamDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValRankedV1LeaderboardDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValRankedV1PlayerDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValRankedV1TierDetailDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValStatusV1ContentDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValStatusV1PlatformDataDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValStatusV1StatusDto.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.pajonti.sejuapi.model.ValStatusV1UpdateDto.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(sdf.parse(date).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, DateTimeFormatter will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toInstant().atOffset(ZoneOffset.UTC).format(dtf);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return sdf.parse(date);
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
