/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * TftMatchV1CompanionDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class TftMatchV1CompanionDto {
  public static final String SERIALIZED_NAME_ITEM_I_D = "item_ID";
  @SerializedName(SERIALIZED_NAME_ITEM_I_D)
  private Integer itemID;

  public static final String SERIALIZED_NAME_SKIN_I_D = "skin_ID";
  @SerializedName(SERIALIZED_NAME_SKIN_I_D)
  private Integer skinID;

  public static final String SERIALIZED_NAME_CONTENT_I_D = "content_ID";
  @SerializedName(SERIALIZED_NAME_CONTENT_I_D)
  private String contentID;

  public static final String SERIALIZED_NAME_SPECIES = "species";
  @SerializedName(SERIALIZED_NAME_SPECIES)
  private String species;

  public TftMatchV1CompanionDto() {
  }

  public TftMatchV1CompanionDto itemID(Integer itemID) {
    this.itemID = itemID;
    return this;
  }

   /**
   * Get itemID
   * @return itemID
  **/
  @javax.annotation.Nullable
  public Integer getItemID() {
    return itemID;
  }

  public void setItemID(Integer itemID) {
    this.itemID = itemID;
  }


  public TftMatchV1CompanionDto skinID(Integer skinID) {
    this.skinID = skinID;
    return this;
  }

   /**
   * Get skinID
   * @return skinID
  **/
  @javax.annotation.Nonnull
  public Integer getSkinID() {
    return skinID;
  }

  public void setSkinID(Integer skinID) {
    this.skinID = skinID;
  }


  public TftMatchV1CompanionDto contentID(String contentID) {
    this.contentID = contentID;
    return this;
  }

   /**
   * Get contentID
   * @return contentID
  **/
  @javax.annotation.Nonnull
  public String getContentID() {
    return contentID;
  }

  public void setContentID(String contentID) {
    this.contentID = contentID;
  }


  public TftMatchV1CompanionDto species(String species) {
    this.species = species;
    return this;
  }

   /**
   * Get species
   * @return species
  **/
  @javax.annotation.Nonnull
  public String getSpecies() {
    return species;
  }

  public void setSpecies(String species) {
    this.species = species;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TftMatchV1CompanionDto tftMatchV1CompanionDto = (TftMatchV1CompanionDto) o;
    return Objects.equals(this.itemID, tftMatchV1CompanionDto.itemID) &&
        Objects.equals(this.skinID, tftMatchV1CompanionDto.skinID) &&
        Objects.equals(this.contentID, tftMatchV1CompanionDto.contentID) &&
        Objects.equals(this.species, tftMatchV1CompanionDto.species);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemID, skinID, contentID, species);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TftMatchV1CompanionDto {\n");
    sb.append("    itemID: ").append(toIndentedString(itemID)).append("\n");
    sb.append("    skinID: ").append(toIndentedString(skinID)).append("\n");
    sb.append("    contentID: ").append(toIndentedString(contentID)).append("\n");
    sb.append("    species: ").append(toIndentedString(species)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("item_ID");
    openapiFields.add("skin_ID");
    openapiFields.add("content_ID");
    openapiFields.add("species");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("skin_ID");
    openapiRequiredFields.add("content_ID");
    openapiRequiredFields.add("species");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TftMatchV1CompanionDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TftMatchV1CompanionDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TftMatchV1CompanionDto is not found in the empty JSON string", TftMatchV1CompanionDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TftMatchV1CompanionDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TftMatchV1CompanionDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TftMatchV1CompanionDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("content_ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_ID").toString()));
      }
      if (!jsonObj.get("species").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `species` to be a primitive type in the JSON string but got `%s`", jsonObj.get("species").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TftMatchV1CompanionDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TftMatchV1CompanionDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TftMatchV1CompanionDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TftMatchV1CompanionDto.class));

       return (TypeAdapter<T>) new TypeAdapter<TftMatchV1CompanionDto>() {
           @Override
           public void write(JsonWriter out, TftMatchV1CompanionDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TftMatchV1CompanionDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TftMatchV1CompanionDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TftMatchV1CompanionDto
  * @throws IOException if the JSON string is invalid with respect to TftMatchV1CompanionDto
  */
  public static TftMatchV1CompanionDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TftMatchV1CompanionDto.class);
  }

 /**
  * Convert an instance of TftMatchV1CompanionDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

