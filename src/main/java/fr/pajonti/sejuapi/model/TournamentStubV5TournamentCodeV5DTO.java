/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * TournamentStubV5TournamentCodeV5DTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class TournamentStubV5TournamentCodeV5DTO {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_SPECTATORS = "spectators";
  @SerializedName(SERIALIZED_NAME_SPECTATORS)
  private String spectators;

  public static final String SERIALIZED_NAME_LOBBY_NAME = "lobbyName";
  @SerializedName(SERIALIZED_NAME_LOBBY_NAME)
  private String lobbyName;

  public static final String SERIALIZED_NAME_META_DATA = "metaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private String metaData;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_TEAM_SIZE = "teamSize";
  @SerializedName(SERIALIZED_NAME_TEAM_SIZE)
  private Integer teamSize;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "providerId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private Integer providerId;

  public static final String SERIALIZED_NAME_PICK_TYPE = "pickType";
  @SerializedName(SERIALIZED_NAME_PICK_TYPE)
  private String pickType;

  public static final String SERIALIZED_NAME_TOURNAMENT_ID = "tournamentId";
  @SerializedName(SERIALIZED_NAME_TOURNAMENT_ID)
  private Integer tournamentId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  /**
   * The tournament code&#39;s region.              (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR)
   */
  @JsonAdapter(RegionEnum.Adapter.class)
  public enum RegionEnum {
    BR("BR"),
    
    EUNE("EUNE"),
    
    EUW("EUW"),
    
    JP("JP"),
    
    LAN("LAN"),
    
    LAS("LAS"),
    
    NA("NA"),
    
    OCE("OCE"),
    
    PBE("PBE"),
    
    RU("RU"),
    
    TR("TR"),
    
    KR("KR");

    private String value;

    RegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegionEnum fromValue(String value) {
      for (RegionEnum b : RegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RegionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private RegionEnum region;

  public static final String SERIALIZED_NAME_MAP = "map";
  @SerializedName(SERIALIZED_NAME_MAP)
  private String map;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<String> participants = new ArrayList<>();

  public TournamentStubV5TournamentCodeV5DTO() {
  }

  public TournamentStubV5TournamentCodeV5DTO code(String code) {
    this.code = code;
    return this;
  }

   /**
   * The tournament code.
   * @return code
  **/
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public TournamentStubV5TournamentCodeV5DTO spectators(String spectators) {
    this.spectators = spectators;
    return this;
  }

   /**
   * The spectator mode for the tournament code game.
   * @return spectators
  **/
  @javax.annotation.Nonnull
  public String getSpectators() {
    return spectators;
  }

  public void setSpectators(String spectators) {
    this.spectators = spectators;
  }


  public TournamentStubV5TournamentCodeV5DTO lobbyName(String lobbyName) {
    this.lobbyName = lobbyName;
    return this;
  }

   /**
   * The lobby name for the tournament code game.
   * @return lobbyName
  **/
  @javax.annotation.Nonnull
  public String getLobbyName() {
    return lobbyName;
  }

  public void setLobbyName(String lobbyName) {
    this.lobbyName = lobbyName;
  }


  public TournamentStubV5TournamentCodeV5DTO metaData(String metaData) {
    this.metaData = metaData;
    return this;
  }

   /**
   * The metadata for tournament code.
   * @return metaData
  **/
  @javax.annotation.Nonnull
  public String getMetaData() {
    return metaData;
  }

  public void setMetaData(String metaData) {
    this.metaData = metaData;
  }


  public TournamentStubV5TournamentCodeV5DTO password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The password for the tournament code game.
   * @return password
  **/
  @javax.annotation.Nonnull
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public TournamentStubV5TournamentCodeV5DTO teamSize(Integer teamSize) {
    this.teamSize = teamSize;
    return this;
  }

   /**
   * The team size for the tournament code game.
   * @return teamSize
  **/
  @javax.annotation.Nonnull
  public Integer getTeamSize() {
    return teamSize;
  }

  public void setTeamSize(Integer teamSize) {
    this.teamSize = teamSize;
  }


  public TournamentStubV5TournamentCodeV5DTO providerId(Integer providerId) {
    this.providerId = providerId;
    return this;
  }

   /**
   * The provider&#39;s ID.
   * @return providerId
  **/
  @javax.annotation.Nonnull
  public Integer getProviderId() {
    return providerId;
  }

  public void setProviderId(Integer providerId) {
    this.providerId = providerId;
  }


  public TournamentStubV5TournamentCodeV5DTO pickType(String pickType) {
    this.pickType = pickType;
    return this;
  }

   /**
   * The pick mode for tournament code game.
   * @return pickType
  **/
  @javax.annotation.Nonnull
  public String getPickType() {
    return pickType;
  }

  public void setPickType(String pickType) {
    this.pickType = pickType;
  }


  public TournamentStubV5TournamentCodeV5DTO tournamentId(Integer tournamentId) {
    this.tournamentId = tournamentId;
    return this;
  }

   /**
   * The tournament&#39;s ID.
   * @return tournamentId
  **/
  @javax.annotation.Nonnull
  public Integer getTournamentId() {
    return tournamentId;
  }

  public void setTournamentId(Integer tournamentId) {
    this.tournamentId = tournamentId;
  }


  public TournamentStubV5TournamentCodeV5DTO id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The tournament code&#39;s ID.
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public TournamentStubV5TournamentCodeV5DTO region(RegionEnum region) {
    this.region = region;
    return this;
  }

   /**
   * The tournament code&#39;s region.              (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR,  KR)
   * @return region
  **/
  @javax.annotation.Nonnull
  public RegionEnum getRegion() {
    return region;
  }

  public void setRegion(RegionEnum region) {
    this.region = region;
  }


  public TournamentStubV5TournamentCodeV5DTO map(String map) {
    this.map = map;
    return this;
  }

   /**
   * The game map for the tournament code game
   * @return map
  **/
  @javax.annotation.Nonnull
  public String getMap() {
    return map;
  }

  public void setMap(String map) {
    this.map = map;
  }


  public TournamentStubV5TournamentCodeV5DTO participants(List<String> participants) {
    this.participants = participants;
    return this;
  }

  public TournamentStubV5TournamentCodeV5DTO addParticipantsItem(String participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

   /**
   * The puuids of the participants (Encrypted)
   * @return participants
  **/
  @javax.annotation.Nonnull
  public List<String> getParticipants() {
    return participants;
  }

  public void setParticipants(List<String> participants) {
    this.participants = participants;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TournamentStubV5TournamentCodeV5DTO tournamentStubV5TournamentCodeV5DTO = (TournamentStubV5TournamentCodeV5DTO) o;
    return Objects.equals(this.code, tournamentStubV5TournamentCodeV5DTO.code) &&
        Objects.equals(this.spectators, tournamentStubV5TournamentCodeV5DTO.spectators) &&
        Objects.equals(this.lobbyName, tournamentStubV5TournamentCodeV5DTO.lobbyName) &&
        Objects.equals(this.metaData, tournamentStubV5TournamentCodeV5DTO.metaData) &&
        Objects.equals(this.password, tournamentStubV5TournamentCodeV5DTO.password) &&
        Objects.equals(this.teamSize, tournamentStubV5TournamentCodeV5DTO.teamSize) &&
        Objects.equals(this.providerId, tournamentStubV5TournamentCodeV5DTO.providerId) &&
        Objects.equals(this.pickType, tournamentStubV5TournamentCodeV5DTO.pickType) &&
        Objects.equals(this.tournamentId, tournamentStubV5TournamentCodeV5DTO.tournamentId) &&
        Objects.equals(this.id, tournamentStubV5TournamentCodeV5DTO.id) &&
        Objects.equals(this.region, tournamentStubV5TournamentCodeV5DTO.region) &&
        Objects.equals(this.map, tournamentStubV5TournamentCodeV5DTO.map) &&
        Objects.equals(this.participants, tournamentStubV5TournamentCodeV5DTO.participants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, spectators, lobbyName, metaData, password, teamSize, providerId, pickType, tournamentId, id, region, map, participants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TournamentStubV5TournamentCodeV5DTO {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    spectators: ").append(toIndentedString(spectators)).append("\n");
    sb.append("    lobbyName: ").append(toIndentedString(lobbyName)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    teamSize: ").append(toIndentedString(teamSize)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    pickType: ").append(toIndentedString(pickType)).append("\n");
    sb.append("    tournamentId: ").append(toIndentedString(tournamentId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    map: ").append(toIndentedString(map)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("spectators");
    openapiFields.add("lobbyName");
    openapiFields.add("metaData");
    openapiFields.add("password");
    openapiFields.add("teamSize");
    openapiFields.add("providerId");
    openapiFields.add("pickType");
    openapiFields.add("tournamentId");
    openapiFields.add("id");
    openapiFields.add("region");
    openapiFields.add("map");
    openapiFields.add("participants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("spectators");
    openapiRequiredFields.add("lobbyName");
    openapiRequiredFields.add("metaData");
    openapiRequiredFields.add("password");
    openapiRequiredFields.add("teamSize");
    openapiRequiredFields.add("providerId");
    openapiRequiredFields.add("pickType");
    openapiRequiredFields.add("tournamentId");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("region");
    openapiRequiredFields.add("map");
    openapiRequiredFields.add("participants");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TournamentStubV5TournamentCodeV5DTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TournamentStubV5TournamentCodeV5DTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TournamentStubV5TournamentCodeV5DTO is not found in the empty JSON string", TournamentStubV5TournamentCodeV5DTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TournamentStubV5TournamentCodeV5DTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TournamentStubV5TournamentCodeV5DTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TournamentStubV5TournamentCodeV5DTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("spectators").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spectators` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spectators").toString()));
      }
      if (!jsonObj.get("lobbyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lobbyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lobbyName").toString()));
      }
      if (!jsonObj.get("metaData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metaData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metaData").toString()));
      }
      if (!jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("pickType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickType").toString()));
      }
      if (!jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      // validate the required field `region`
      RegionEnum.validateJsonElement(jsonObj.get("region"));
      if (!jsonObj.get("map").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `map` to be a primitive type in the JSON string but got `%s`", jsonObj.get("map").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("participants") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("participants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TournamentStubV5TournamentCodeV5DTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TournamentStubV5TournamentCodeV5DTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TournamentStubV5TournamentCodeV5DTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TournamentStubV5TournamentCodeV5DTO.class));

       return (TypeAdapter<T>) new TypeAdapter<TournamentStubV5TournamentCodeV5DTO>() {
           @Override
           public void write(JsonWriter out, TournamentStubV5TournamentCodeV5DTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TournamentStubV5TournamentCodeV5DTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TournamentStubV5TournamentCodeV5DTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TournamentStubV5TournamentCodeV5DTO
  * @throws IOException if the JSON string is invalid with respect to TournamentStubV5TournamentCodeV5DTO
  */
  public static TournamentStubV5TournamentCodeV5DTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TournamentStubV5TournamentCodeV5DTO.class);
  }

 /**
  * Convert an instance of TournamentStubV5TournamentCodeV5DTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

