/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.pajonti.sejuapi.model.LeagueV4MiniSeriesDTO;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * LeagueV4LeagueEntryDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class LeagueV4LeagueEntryDTO {
  public static final String SERIALIZED_NAME_LEAGUE_ID = "leagueId";
  @SerializedName(SERIALIZED_NAME_LEAGUE_ID)
  private String leagueId;

  public static final String SERIALIZED_NAME_SUMMONER_ID = "summonerId";
  @SerializedName(SERIALIZED_NAME_SUMMONER_ID)
  private String summonerId;

  public static final String SERIALIZED_NAME_SUMMONER_NAME = "summonerName";
  @SerializedName(SERIALIZED_NAME_SUMMONER_NAME)
  private String summonerName;

  public static final String SERIALIZED_NAME_QUEUE_TYPE = "queueType";
  @SerializedName(SERIALIZED_NAME_QUEUE_TYPE)
  private String queueType;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private String tier;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private String rank;

  public static final String SERIALIZED_NAME_LEAGUE_POINTS = "leaguePoints";
  @SerializedName(SERIALIZED_NAME_LEAGUE_POINTS)
  private Integer leaguePoints;

  public static final String SERIALIZED_NAME_WINS = "wins";
  @SerializedName(SERIALIZED_NAME_WINS)
  private Integer wins;

  public static final String SERIALIZED_NAME_LOSSES = "losses";
  @SerializedName(SERIALIZED_NAME_LOSSES)
  private Integer losses;

  public static final String SERIALIZED_NAME_HOT_STREAK = "hotStreak";
  @SerializedName(SERIALIZED_NAME_HOT_STREAK)
  private Boolean hotStreak;

  public static final String SERIALIZED_NAME_VETERAN = "veteran";
  @SerializedName(SERIALIZED_NAME_VETERAN)
  private Boolean veteran;

  public static final String SERIALIZED_NAME_FRESH_BLOOD = "freshBlood";
  @SerializedName(SERIALIZED_NAME_FRESH_BLOOD)
  private Boolean freshBlood;

  public static final String SERIALIZED_NAME_INACTIVE = "inactive";
  @SerializedName(SERIALIZED_NAME_INACTIVE)
  private Boolean inactive;

  public static final String SERIALIZED_NAME_MINI_SERIES = "miniSeries";
  @SerializedName(SERIALIZED_NAME_MINI_SERIES)
  private LeagueV4MiniSeriesDTO miniSeries;

  public LeagueV4LeagueEntryDTO() {
  }

  public LeagueV4LeagueEntryDTO leagueId(String leagueId) {
    this.leagueId = leagueId;
    return this;
  }

   /**
   * Get leagueId
   * @return leagueId
  **/
  @javax.annotation.Nullable
  public String getLeagueId() {
    return leagueId;
  }

  public void setLeagueId(String leagueId) {
    this.leagueId = leagueId;
  }


  public LeagueV4LeagueEntryDTO summonerId(String summonerId) {
    this.summonerId = summonerId;
    return this;
  }

   /**
   * Player&#39;s encrypted summonerId.
   * @return summonerId
  **/
  @javax.annotation.Nonnull
  public String getSummonerId() {
    return summonerId;
  }

  public void setSummonerId(String summonerId) {
    this.summonerId = summonerId;
  }


  public LeagueV4LeagueEntryDTO summonerName(String summonerName) {
    this.summonerName = summonerName;
    return this;
  }

   /**
   * Get summonerName
   * @return summonerName
  **/
  @javax.annotation.Nonnull
  public String getSummonerName() {
    return summonerName;
  }

  public void setSummonerName(String summonerName) {
    this.summonerName = summonerName;
  }


  public LeagueV4LeagueEntryDTO queueType(String queueType) {
    this.queueType = queueType;
    return this;
  }

   /**
   * Get queueType
   * @return queueType
  **/
  @javax.annotation.Nonnull
  public String getQueueType() {
    return queueType;
  }

  public void setQueueType(String queueType) {
    this.queueType = queueType;
  }


  public LeagueV4LeagueEntryDTO tier(String tier) {
    this.tier = tier;
    return this;
  }

   /**
   * Get tier
   * @return tier
  **/
  @javax.annotation.Nullable
  public String getTier() {
    return tier;
  }

  public void setTier(String tier) {
    this.tier = tier;
  }


  public LeagueV4LeagueEntryDTO rank(String rank) {
    this.rank = rank;
    return this;
  }

   /**
   * The player&#39;s division within a tier.
   * @return rank
  **/
  @javax.annotation.Nullable
  public String getRank() {
    return rank;
  }

  public void setRank(String rank) {
    this.rank = rank;
  }


  public LeagueV4LeagueEntryDTO leaguePoints(Integer leaguePoints) {
    this.leaguePoints = leaguePoints;
    return this;
  }

   /**
   * Get leaguePoints
   * @return leaguePoints
  **/
  @javax.annotation.Nonnull
  public Integer getLeaguePoints() {
    return leaguePoints;
  }

  public void setLeaguePoints(Integer leaguePoints) {
    this.leaguePoints = leaguePoints;
  }


  public LeagueV4LeagueEntryDTO wins(Integer wins) {
    this.wins = wins;
    return this;
  }

   /**
   * Winning team on Summoners Rift.
   * @return wins
  **/
  @javax.annotation.Nonnull
  public Integer getWins() {
    return wins;
  }

  public void setWins(Integer wins) {
    this.wins = wins;
  }


  public LeagueV4LeagueEntryDTO losses(Integer losses) {
    this.losses = losses;
    return this;
  }

   /**
   * Losing team on Summoners Rift.
   * @return losses
  **/
  @javax.annotation.Nonnull
  public Integer getLosses() {
    return losses;
  }

  public void setLosses(Integer losses) {
    this.losses = losses;
  }


  public LeagueV4LeagueEntryDTO hotStreak(Boolean hotStreak) {
    this.hotStreak = hotStreak;
    return this;
  }

   /**
   * Get hotStreak
   * @return hotStreak
  **/
  @javax.annotation.Nonnull
  public Boolean getHotStreak() {
    return hotStreak;
  }

  public void setHotStreak(Boolean hotStreak) {
    this.hotStreak = hotStreak;
  }


  public LeagueV4LeagueEntryDTO veteran(Boolean veteran) {
    this.veteran = veteran;
    return this;
  }

   /**
   * Get veteran
   * @return veteran
  **/
  @javax.annotation.Nonnull
  public Boolean getVeteran() {
    return veteran;
  }

  public void setVeteran(Boolean veteran) {
    this.veteran = veteran;
  }


  public LeagueV4LeagueEntryDTO freshBlood(Boolean freshBlood) {
    this.freshBlood = freshBlood;
    return this;
  }

   /**
   * Get freshBlood
   * @return freshBlood
  **/
  @javax.annotation.Nonnull
  public Boolean getFreshBlood() {
    return freshBlood;
  }

  public void setFreshBlood(Boolean freshBlood) {
    this.freshBlood = freshBlood;
  }


  public LeagueV4LeagueEntryDTO inactive(Boolean inactive) {
    this.inactive = inactive;
    return this;
  }

   /**
   * Get inactive
   * @return inactive
  **/
  @javax.annotation.Nonnull
  public Boolean getInactive() {
    return inactive;
  }

  public void setInactive(Boolean inactive) {
    this.inactive = inactive;
  }


  public LeagueV4LeagueEntryDTO miniSeries(LeagueV4MiniSeriesDTO miniSeries) {
    this.miniSeries = miniSeries;
    return this;
  }

   /**
   * Get miniSeries
   * @return miniSeries
  **/
  @javax.annotation.Nullable
  public LeagueV4MiniSeriesDTO getMiniSeries() {
    return miniSeries;
  }

  public void setMiniSeries(LeagueV4MiniSeriesDTO miniSeries) {
    this.miniSeries = miniSeries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeagueV4LeagueEntryDTO leagueV4LeagueEntryDTO = (LeagueV4LeagueEntryDTO) o;
    return Objects.equals(this.leagueId, leagueV4LeagueEntryDTO.leagueId) &&
        Objects.equals(this.summonerId, leagueV4LeagueEntryDTO.summonerId) &&
        Objects.equals(this.summonerName, leagueV4LeagueEntryDTO.summonerName) &&
        Objects.equals(this.queueType, leagueV4LeagueEntryDTO.queueType) &&
        Objects.equals(this.tier, leagueV4LeagueEntryDTO.tier) &&
        Objects.equals(this.rank, leagueV4LeagueEntryDTO.rank) &&
        Objects.equals(this.leaguePoints, leagueV4LeagueEntryDTO.leaguePoints) &&
        Objects.equals(this.wins, leagueV4LeagueEntryDTO.wins) &&
        Objects.equals(this.losses, leagueV4LeagueEntryDTO.losses) &&
        Objects.equals(this.hotStreak, leagueV4LeagueEntryDTO.hotStreak) &&
        Objects.equals(this.veteran, leagueV4LeagueEntryDTO.veteran) &&
        Objects.equals(this.freshBlood, leagueV4LeagueEntryDTO.freshBlood) &&
        Objects.equals(this.inactive, leagueV4LeagueEntryDTO.inactive) &&
        Objects.equals(this.miniSeries, leagueV4LeagueEntryDTO.miniSeries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(leagueId, summonerId, summonerName, queueType, tier, rank, leaguePoints, wins, losses, hotStreak, veteran, freshBlood, inactive, miniSeries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeagueV4LeagueEntryDTO {\n");
    sb.append("    leagueId: ").append(toIndentedString(leagueId)).append("\n");
    sb.append("    summonerId: ").append(toIndentedString(summonerId)).append("\n");
    sb.append("    summonerName: ").append(toIndentedString(summonerName)).append("\n");
    sb.append("    queueType: ").append(toIndentedString(queueType)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    leaguePoints: ").append(toIndentedString(leaguePoints)).append("\n");
    sb.append("    wins: ").append(toIndentedString(wins)).append("\n");
    sb.append("    losses: ").append(toIndentedString(losses)).append("\n");
    sb.append("    hotStreak: ").append(toIndentedString(hotStreak)).append("\n");
    sb.append("    veteran: ").append(toIndentedString(veteran)).append("\n");
    sb.append("    freshBlood: ").append(toIndentedString(freshBlood)).append("\n");
    sb.append("    inactive: ").append(toIndentedString(inactive)).append("\n");
    sb.append("    miniSeries: ").append(toIndentedString(miniSeries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("leagueId");
    openapiFields.add("summonerId");
    openapiFields.add("summonerName");
    openapiFields.add("queueType");
    openapiFields.add("tier");
    openapiFields.add("rank");
    openapiFields.add("leaguePoints");
    openapiFields.add("wins");
    openapiFields.add("losses");
    openapiFields.add("hotStreak");
    openapiFields.add("veteran");
    openapiFields.add("freshBlood");
    openapiFields.add("inactive");
    openapiFields.add("miniSeries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("summonerId");
    openapiRequiredFields.add("summonerName");
    openapiRequiredFields.add("queueType");
    openapiRequiredFields.add("leaguePoints");
    openapiRequiredFields.add("wins");
    openapiRequiredFields.add("losses");
    openapiRequiredFields.add("hotStreak");
    openapiRequiredFields.add("veteran");
    openapiRequiredFields.add("freshBlood");
    openapiRequiredFields.add("inactive");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LeagueV4LeagueEntryDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LeagueV4LeagueEntryDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeagueV4LeagueEntryDTO is not found in the empty JSON string", LeagueV4LeagueEntryDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LeagueV4LeagueEntryDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LeagueV4LeagueEntryDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LeagueV4LeagueEntryDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("leagueId") != null && !jsonObj.get("leagueId").isJsonNull()) && !jsonObj.get("leagueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leagueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leagueId").toString()));
      }
      if (!jsonObj.get("summonerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summonerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summonerId").toString()));
      }
      if (!jsonObj.get("summonerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summonerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summonerName").toString()));
      }
      if (!jsonObj.get("queueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queueType").toString()));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      if ((jsonObj.get("rank") != null && !jsonObj.get("rank").isJsonNull()) && !jsonObj.get("rank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rank").toString()));
      }
      // validate the optional field `miniSeries`
      if (jsonObj.get("miniSeries") != null && !jsonObj.get("miniSeries").isJsonNull()) {
        LeagueV4MiniSeriesDTO.validateJsonElement(jsonObj.get("miniSeries"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeagueV4LeagueEntryDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeagueV4LeagueEntryDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeagueV4LeagueEntryDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeagueV4LeagueEntryDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<LeagueV4LeagueEntryDTO>() {
           @Override
           public void write(JsonWriter out, LeagueV4LeagueEntryDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LeagueV4LeagueEntryDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LeagueV4LeagueEntryDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LeagueV4LeagueEntryDTO
  * @throws IOException if the JSON string is invalid with respect to LeagueV4LeagueEntryDTO
  */
  public static LeagueV4LeagueEntryDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeagueV4LeagueEntryDTO.class);
  }

 /**
  * Convert an instance of LeagueV4LeagueEntryDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

