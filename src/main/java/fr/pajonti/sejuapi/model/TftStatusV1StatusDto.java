/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.pajonti.sejuapi.model.TftStatusV1ContentDto;
import fr.pajonti.sejuapi.model.TftStatusV1UpdateDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * TftStatusV1StatusDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class TftStatusV1StatusDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  /**
   * (Legal values:  scheduled,  in_progress,  complete)
   */
  @JsonAdapter(MaintenanceStatusEnum.Adapter.class)
  public enum MaintenanceStatusEnum {
    SCHEDULED("scheduled"),
    
    IN_PROGRESS("in_progress"),
    
    COMPLETE("complete");

    private String value;

    MaintenanceStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaintenanceStatusEnum fromValue(String value) {
      for (MaintenanceStatusEnum b : MaintenanceStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaintenanceStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaintenanceStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaintenanceStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaintenanceStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaintenanceStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAINTENANCE_STATUS = "maintenance_status";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_STATUS)
  private MaintenanceStatusEnum maintenanceStatus;

  /**
   * (Legal values:  info,  warning,  critical)
   */
  @JsonAdapter(IncidentSeverityEnum.Adapter.class)
  public enum IncidentSeverityEnum {
    INFO("info"),
    
    WARNING("warning"),
    
    CRITICAL("critical");

    private String value;

    IncidentSeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncidentSeverityEnum fromValue(String value) {
      for (IncidentSeverityEnum b : IncidentSeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncidentSeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncidentSeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncidentSeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncidentSeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IncidentSeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INCIDENT_SEVERITY = "incident_severity";
  @SerializedName(SERIALIZED_NAME_INCIDENT_SEVERITY)
  private IncidentSeverityEnum incidentSeverity;

  public static final String SERIALIZED_NAME_TITLES = "titles";
  @SerializedName(SERIALIZED_NAME_TITLES)
  private List<TftStatusV1ContentDto> titles = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATES = "updates";
  @SerializedName(SERIALIZED_NAME_UPDATES)
  private List<TftStatusV1UpdateDto> updates = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_ARCHIVE_AT = "archive_at";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_AT)
  private String archiveAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  /**
   * Gets or Sets platforms
   */
  @JsonAdapter(PlatformsEnum.Adapter.class)
  public enum PlatformsEnum {
    WINDOWS("windows"),
    
    MACOS("macos"),
    
    ANDROID("android"),
    
    IOS("ios"),
    
    PS4("ps4"),
    
    XBONE("xbone"),
    
    SWITCH("switch");

    private String value;

    PlatformsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformsEnum fromValue(String value) {
      for (PlatformsEnum b : PlatformsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlatformsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlatformsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLATFORMS = "platforms";
  @SerializedName(SERIALIZED_NAME_PLATFORMS)
  private List<PlatformsEnum> platforms = new ArrayList<>();

  public TftStatusV1StatusDto() {
  }

  public TftStatusV1StatusDto id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public TftStatusV1StatusDto maintenanceStatus(MaintenanceStatusEnum maintenanceStatus) {
    this.maintenanceStatus = maintenanceStatus;
    return this;
  }

   /**
   * (Legal values:  scheduled,  in_progress,  complete)
   * @return maintenanceStatus
  **/
  @javax.annotation.Nonnull
  public MaintenanceStatusEnum getMaintenanceStatus() {
    return maintenanceStatus;
  }

  public void setMaintenanceStatus(MaintenanceStatusEnum maintenanceStatus) {
    this.maintenanceStatus = maintenanceStatus;
  }


  public TftStatusV1StatusDto incidentSeverity(IncidentSeverityEnum incidentSeverity) {
    this.incidentSeverity = incidentSeverity;
    return this;
  }

   /**
   * (Legal values:  info,  warning,  critical)
   * @return incidentSeverity
  **/
  @javax.annotation.Nonnull
  public IncidentSeverityEnum getIncidentSeverity() {
    return incidentSeverity;
  }

  public void setIncidentSeverity(IncidentSeverityEnum incidentSeverity) {
    this.incidentSeverity = incidentSeverity;
  }


  public TftStatusV1StatusDto titles(List<TftStatusV1ContentDto> titles) {
    this.titles = titles;
    return this;
  }

  public TftStatusV1StatusDto addTitlesItem(TftStatusV1ContentDto titlesItem) {
    if (this.titles == null) {
      this.titles = new ArrayList<>();
    }
    this.titles.add(titlesItem);
    return this;
  }

   /**
   * Get titles
   * @return titles
  **/
  @javax.annotation.Nonnull
  public List<TftStatusV1ContentDto> getTitles() {
    return titles;
  }

  public void setTitles(List<TftStatusV1ContentDto> titles) {
    this.titles = titles;
  }


  public TftStatusV1StatusDto updates(List<TftStatusV1UpdateDto> updates) {
    this.updates = updates;
    return this;
  }

  public TftStatusV1StatusDto addUpdatesItem(TftStatusV1UpdateDto updatesItem) {
    if (this.updates == null) {
      this.updates = new ArrayList<>();
    }
    this.updates.add(updatesItem);
    return this;
  }

   /**
   * Get updates
   * @return updates
  **/
  @javax.annotation.Nonnull
  public List<TftStatusV1UpdateDto> getUpdates() {
    return updates;
  }

  public void setUpdates(List<TftStatusV1UpdateDto> updates) {
    this.updates = updates;
  }


  public TftStatusV1StatusDto createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public TftStatusV1StatusDto archiveAt(String archiveAt) {
    this.archiveAt = archiveAt;
    return this;
  }

   /**
   * Get archiveAt
   * @return archiveAt
  **/
  @javax.annotation.Nonnull
  public String getArchiveAt() {
    return archiveAt;
  }

  public void setArchiveAt(String archiveAt) {
    this.archiveAt = archiveAt;
  }


  public TftStatusV1StatusDto updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public TftStatusV1StatusDto platforms(List<PlatformsEnum> platforms) {
    this.platforms = platforms;
    return this;
  }

  public TftStatusV1StatusDto addPlatformsItem(PlatformsEnum platformsItem) {
    if (this.platforms == null) {
      this.platforms = new ArrayList<>();
    }
    this.platforms.add(platformsItem);
    return this;
  }

   /**
   * (Legal values: windows, macos, android, ios, ps4, xbone, switch)
   * @return platforms
  **/
  @javax.annotation.Nonnull
  public List<PlatformsEnum> getPlatforms() {
    return platforms;
  }

  public void setPlatforms(List<PlatformsEnum> platforms) {
    this.platforms = platforms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TftStatusV1StatusDto tftStatusV1StatusDto = (TftStatusV1StatusDto) o;
    return Objects.equals(this.id, tftStatusV1StatusDto.id) &&
        Objects.equals(this.maintenanceStatus, tftStatusV1StatusDto.maintenanceStatus) &&
        Objects.equals(this.incidentSeverity, tftStatusV1StatusDto.incidentSeverity) &&
        Objects.equals(this.titles, tftStatusV1StatusDto.titles) &&
        Objects.equals(this.updates, tftStatusV1StatusDto.updates) &&
        Objects.equals(this.createdAt, tftStatusV1StatusDto.createdAt) &&
        Objects.equals(this.archiveAt, tftStatusV1StatusDto.archiveAt) &&
        Objects.equals(this.updatedAt, tftStatusV1StatusDto.updatedAt) &&
        Objects.equals(this.platforms, tftStatusV1StatusDto.platforms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, maintenanceStatus, incidentSeverity, titles, updates, createdAt, archiveAt, updatedAt, platforms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TftStatusV1StatusDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maintenanceStatus: ").append(toIndentedString(maintenanceStatus)).append("\n");
    sb.append("    incidentSeverity: ").append(toIndentedString(incidentSeverity)).append("\n");
    sb.append("    titles: ").append(toIndentedString(titles)).append("\n");
    sb.append("    updates: ").append(toIndentedString(updates)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    archiveAt: ").append(toIndentedString(archiveAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    platforms: ").append(toIndentedString(platforms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("maintenance_status");
    openapiFields.add("incident_severity");
    openapiFields.add("titles");
    openapiFields.add("updates");
    openapiFields.add("created_at");
    openapiFields.add("archive_at");
    openapiFields.add("updated_at");
    openapiFields.add("platforms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("maintenance_status");
    openapiRequiredFields.add("incident_severity");
    openapiRequiredFields.add("titles");
    openapiRequiredFields.add("updates");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("archive_at");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("platforms");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TftStatusV1StatusDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TftStatusV1StatusDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TftStatusV1StatusDto is not found in the empty JSON string", TftStatusV1StatusDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TftStatusV1StatusDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TftStatusV1StatusDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TftStatusV1StatusDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("maintenance_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maintenance_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maintenance_status").toString()));
      }
      // validate the required field `maintenance_status`
      MaintenanceStatusEnum.validateJsonElement(jsonObj.get("maintenance_status"));
      if (!jsonObj.get("incident_severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incident_severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incident_severity").toString()));
      }
      // validate the required field `incident_severity`
      IncidentSeverityEnum.validateJsonElement(jsonObj.get("incident_severity"));
      // ensure the json data is an array
      if (!jsonObj.get("titles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `titles` to be an array in the JSON string but got `%s`", jsonObj.get("titles").toString()));
      }

      JsonArray jsonArraytitles = jsonObj.getAsJsonArray("titles");
      // validate the required field `titles` (array)
      for (int i = 0; i < jsonArraytitles.size(); i++) {
        TftStatusV1ContentDto.validateJsonElement(jsonArraytitles.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("updates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `updates` to be an array in the JSON string but got `%s`", jsonObj.get("updates").toString()));
      }

      JsonArray jsonArrayupdates = jsonObj.getAsJsonArray("updates");
      // validate the required field `updates` (array)
      for (int i = 0; i < jsonArrayupdates.size(); i++) {
        TftStatusV1UpdateDto.validateJsonElement(jsonArrayupdates.get(i));
      };
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (!jsonObj.get("archive_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archive_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archive_at").toString()));
      }
      if (!jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("platforms") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("platforms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `platforms` to be an array in the JSON string but got `%s`", jsonObj.get("platforms").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TftStatusV1StatusDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TftStatusV1StatusDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TftStatusV1StatusDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TftStatusV1StatusDto.class));

       return (TypeAdapter<T>) new TypeAdapter<TftStatusV1StatusDto>() {
           @Override
           public void write(JsonWriter out, TftStatusV1StatusDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TftStatusV1StatusDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TftStatusV1StatusDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TftStatusV1StatusDto
  * @throws IOException if the JSON string is invalid with respect to TftStatusV1StatusDto
  */
  public static TftStatusV1StatusDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TftStatusV1StatusDto.class);
  }

 /**
  * Convert an instance of TftStatusV1StatusDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

