/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.pajonti.sejuapi.model.ValMatchV1LocationDto;
import fr.pajonti.sejuapi.model.ValMatchV1PlayerLocationsDto;
import fr.pajonti.sejuapi.model.ValMatchV1PlayerRoundStatsDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * ValMatchV1RoundResultDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class ValMatchV1RoundResultDto {
  public static final String SERIALIZED_NAME_ROUND_NUM = "roundNum";
  @SerializedName(SERIALIZED_NAME_ROUND_NUM)
  private Integer roundNum;

  public static final String SERIALIZED_NAME_ROUND_RESULT = "roundResult";
  @SerializedName(SERIALIZED_NAME_ROUND_RESULT)
  private String roundResult;

  public static final String SERIALIZED_NAME_ROUND_CEREMONY = "roundCeremony";
  @SerializedName(SERIALIZED_NAME_ROUND_CEREMONY)
  private String roundCeremony;

  public static final String SERIALIZED_NAME_WINNING_TEAM = "winningTeam";
  @SerializedName(SERIALIZED_NAME_WINNING_TEAM)
  private String winningTeam;

  public static final String SERIALIZED_NAME_BOMB_PLANTER = "bombPlanter";
  @SerializedName(SERIALIZED_NAME_BOMB_PLANTER)
  private String bombPlanter;

  public static final String SERIALIZED_NAME_BOMB_DEFUSER = "bombDefuser";
  @SerializedName(SERIALIZED_NAME_BOMB_DEFUSER)
  private String bombDefuser;

  public static final String SERIALIZED_NAME_PLANT_ROUND_TIME = "plantRoundTime";
  @SerializedName(SERIALIZED_NAME_PLANT_ROUND_TIME)
  private Integer plantRoundTime;

  public static final String SERIALIZED_NAME_PLANT_PLAYER_LOCATIONS = "plantPlayerLocations";
  @SerializedName(SERIALIZED_NAME_PLANT_PLAYER_LOCATIONS)
  private List<ValMatchV1PlayerLocationsDto> plantPlayerLocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLANT_LOCATION = "plantLocation";
  @SerializedName(SERIALIZED_NAME_PLANT_LOCATION)
  private ValMatchV1LocationDto plantLocation;

  public static final String SERIALIZED_NAME_PLANT_SITE = "plantSite";
  @SerializedName(SERIALIZED_NAME_PLANT_SITE)
  private String plantSite;

  public static final String SERIALIZED_NAME_DEFUSE_ROUND_TIME = "defuseRoundTime";
  @SerializedName(SERIALIZED_NAME_DEFUSE_ROUND_TIME)
  private Integer defuseRoundTime;

  public static final String SERIALIZED_NAME_DEFUSE_PLAYER_LOCATIONS = "defusePlayerLocations";
  @SerializedName(SERIALIZED_NAME_DEFUSE_PLAYER_LOCATIONS)
  private List<ValMatchV1PlayerLocationsDto> defusePlayerLocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFUSE_LOCATION = "defuseLocation";
  @SerializedName(SERIALIZED_NAME_DEFUSE_LOCATION)
  private ValMatchV1LocationDto defuseLocation;

  public static final String SERIALIZED_NAME_PLAYER_STATS = "playerStats";
  @SerializedName(SERIALIZED_NAME_PLAYER_STATS)
  private List<ValMatchV1PlayerRoundStatsDto> playerStats = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROUND_RESULT_CODE = "roundResultCode";
  @SerializedName(SERIALIZED_NAME_ROUND_RESULT_CODE)
  private String roundResultCode;

  public ValMatchV1RoundResultDto() {
  }

  public ValMatchV1RoundResultDto roundNum(Integer roundNum) {
    this.roundNum = roundNum;
    return this;
  }

   /**
   * Get roundNum
   * @return roundNum
  **/
  @javax.annotation.Nonnull
  public Integer getRoundNum() {
    return roundNum;
  }

  public void setRoundNum(Integer roundNum) {
    this.roundNum = roundNum;
  }


  public ValMatchV1RoundResultDto roundResult(String roundResult) {
    this.roundResult = roundResult;
    return this;
  }

   /**
   * Get roundResult
   * @return roundResult
  **/
  @javax.annotation.Nonnull
  public String getRoundResult() {
    return roundResult;
  }

  public void setRoundResult(String roundResult) {
    this.roundResult = roundResult;
  }


  public ValMatchV1RoundResultDto roundCeremony(String roundCeremony) {
    this.roundCeremony = roundCeremony;
    return this;
  }

   /**
   * Get roundCeremony
   * @return roundCeremony
  **/
  @javax.annotation.Nonnull
  public String getRoundCeremony() {
    return roundCeremony;
  }

  public void setRoundCeremony(String roundCeremony) {
    this.roundCeremony = roundCeremony;
  }


  public ValMatchV1RoundResultDto winningTeam(String winningTeam) {
    this.winningTeam = winningTeam;
    return this;
  }

   /**
   * Get winningTeam
   * @return winningTeam
  **/
  @javax.annotation.Nonnull
  public String getWinningTeam() {
    return winningTeam;
  }

  public void setWinningTeam(String winningTeam) {
    this.winningTeam = winningTeam;
  }


  public ValMatchV1RoundResultDto bombPlanter(String bombPlanter) {
    this.bombPlanter = bombPlanter;
    return this;
  }

   /**
   * PUUID of player
   * @return bombPlanter
  **/
  @javax.annotation.Nonnull
  public String getBombPlanter() {
    return bombPlanter;
  }

  public void setBombPlanter(String bombPlanter) {
    this.bombPlanter = bombPlanter;
  }


  public ValMatchV1RoundResultDto bombDefuser(String bombDefuser) {
    this.bombDefuser = bombDefuser;
    return this;
  }

   /**
   * PUUID of player
   * @return bombDefuser
  **/
  @javax.annotation.Nonnull
  public String getBombDefuser() {
    return bombDefuser;
  }

  public void setBombDefuser(String bombDefuser) {
    this.bombDefuser = bombDefuser;
  }


  public ValMatchV1RoundResultDto plantRoundTime(Integer plantRoundTime) {
    this.plantRoundTime = plantRoundTime;
    return this;
  }

   /**
   * Get plantRoundTime
   * @return plantRoundTime
  **/
  @javax.annotation.Nonnull
  public Integer getPlantRoundTime() {
    return plantRoundTime;
  }

  public void setPlantRoundTime(Integer plantRoundTime) {
    this.plantRoundTime = plantRoundTime;
  }


  public ValMatchV1RoundResultDto plantPlayerLocations(List<ValMatchV1PlayerLocationsDto> plantPlayerLocations) {
    this.plantPlayerLocations = plantPlayerLocations;
    return this;
  }

  public ValMatchV1RoundResultDto addPlantPlayerLocationsItem(ValMatchV1PlayerLocationsDto plantPlayerLocationsItem) {
    if (this.plantPlayerLocations == null) {
      this.plantPlayerLocations = new ArrayList<>();
    }
    this.plantPlayerLocations.add(plantPlayerLocationsItem);
    return this;
  }

   /**
   * Get plantPlayerLocations
   * @return plantPlayerLocations
  **/
  @javax.annotation.Nonnull
  public List<ValMatchV1PlayerLocationsDto> getPlantPlayerLocations() {
    return plantPlayerLocations;
  }

  public void setPlantPlayerLocations(List<ValMatchV1PlayerLocationsDto> plantPlayerLocations) {
    this.plantPlayerLocations = plantPlayerLocations;
  }


  public ValMatchV1RoundResultDto plantLocation(ValMatchV1LocationDto plantLocation) {
    this.plantLocation = plantLocation;
    return this;
  }

   /**
   * Get plantLocation
   * @return plantLocation
  **/
  @javax.annotation.Nonnull
  public ValMatchV1LocationDto getPlantLocation() {
    return plantLocation;
  }

  public void setPlantLocation(ValMatchV1LocationDto plantLocation) {
    this.plantLocation = plantLocation;
  }


  public ValMatchV1RoundResultDto plantSite(String plantSite) {
    this.plantSite = plantSite;
    return this;
  }

   /**
   * Get plantSite
   * @return plantSite
  **/
  @javax.annotation.Nonnull
  public String getPlantSite() {
    return plantSite;
  }

  public void setPlantSite(String plantSite) {
    this.plantSite = plantSite;
  }


  public ValMatchV1RoundResultDto defuseRoundTime(Integer defuseRoundTime) {
    this.defuseRoundTime = defuseRoundTime;
    return this;
  }

   /**
   * Get defuseRoundTime
   * @return defuseRoundTime
  **/
  @javax.annotation.Nonnull
  public Integer getDefuseRoundTime() {
    return defuseRoundTime;
  }

  public void setDefuseRoundTime(Integer defuseRoundTime) {
    this.defuseRoundTime = defuseRoundTime;
  }


  public ValMatchV1RoundResultDto defusePlayerLocations(List<ValMatchV1PlayerLocationsDto> defusePlayerLocations) {
    this.defusePlayerLocations = defusePlayerLocations;
    return this;
  }

  public ValMatchV1RoundResultDto addDefusePlayerLocationsItem(ValMatchV1PlayerLocationsDto defusePlayerLocationsItem) {
    if (this.defusePlayerLocations == null) {
      this.defusePlayerLocations = new ArrayList<>();
    }
    this.defusePlayerLocations.add(defusePlayerLocationsItem);
    return this;
  }

   /**
   * Get defusePlayerLocations
   * @return defusePlayerLocations
  **/
  @javax.annotation.Nonnull
  public List<ValMatchV1PlayerLocationsDto> getDefusePlayerLocations() {
    return defusePlayerLocations;
  }

  public void setDefusePlayerLocations(List<ValMatchV1PlayerLocationsDto> defusePlayerLocations) {
    this.defusePlayerLocations = defusePlayerLocations;
  }


  public ValMatchV1RoundResultDto defuseLocation(ValMatchV1LocationDto defuseLocation) {
    this.defuseLocation = defuseLocation;
    return this;
  }

   /**
   * Get defuseLocation
   * @return defuseLocation
  **/
  @javax.annotation.Nonnull
  public ValMatchV1LocationDto getDefuseLocation() {
    return defuseLocation;
  }

  public void setDefuseLocation(ValMatchV1LocationDto defuseLocation) {
    this.defuseLocation = defuseLocation;
  }


  public ValMatchV1RoundResultDto playerStats(List<ValMatchV1PlayerRoundStatsDto> playerStats) {
    this.playerStats = playerStats;
    return this;
  }

  public ValMatchV1RoundResultDto addPlayerStatsItem(ValMatchV1PlayerRoundStatsDto playerStatsItem) {
    if (this.playerStats == null) {
      this.playerStats = new ArrayList<>();
    }
    this.playerStats.add(playerStatsItem);
    return this;
  }

   /**
   * Get playerStats
   * @return playerStats
  **/
  @javax.annotation.Nonnull
  public List<ValMatchV1PlayerRoundStatsDto> getPlayerStats() {
    return playerStats;
  }

  public void setPlayerStats(List<ValMatchV1PlayerRoundStatsDto> playerStats) {
    this.playerStats = playerStats;
  }


  public ValMatchV1RoundResultDto roundResultCode(String roundResultCode) {
    this.roundResultCode = roundResultCode;
    return this;
  }

   /**
   * Get roundResultCode
   * @return roundResultCode
  **/
  @javax.annotation.Nonnull
  public String getRoundResultCode() {
    return roundResultCode;
  }

  public void setRoundResultCode(String roundResultCode) {
    this.roundResultCode = roundResultCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValMatchV1RoundResultDto valMatchV1RoundResultDto = (ValMatchV1RoundResultDto) o;
    return Objects.equals(this.roundNum, valMatchV1RoundResultDto.roundNum) &&
        Objects.equals(this.roundResult, valMatchV1RoundResultDto.roundResult) &&
        Objects.equals(this.roundCeremony, valMatchV1RoundResultDto.roundCeremony) &&
        Objects.equals(this.winningTeam, valMatchV1RoundResultDto.winningTeam) &&
        Objects.equals(this.bombPlanter, valMatchV1RoundResultDto.bombPlanter) &&
        Objects.equals(this.bombDefuser, valMatchV1RoundResultDto.bombDefuser) &&
        Objects.equals(this.plantRoundTime, valMatchV1RoundResultDto.plantRoundTime) &&
        Objects.equals(this.plantPlayerLocations, valMatchV1RoundResultDto.plantPlayerLocations) &&
        Objects.equals(this.plantLocation, valMatchV1RoundResultDto.plantLocation) &&
        Objects.equals(this.plantSite, valMatchV1RoundResultDto.plantSite) &&
        Objects.equals(this.defuseRoundTime, valMatchV1RoundResultDto.defuseRoundTime) &&
        Objects.equals(this.defusePlayerLocations, valMatchV1RoundResultDto.defusePlayerLocations) &&
        Objects.equals(this.defuseLocation, valMatchV1RoundResultDto.defuseLocation) &&
        Objects.equals(this.playerStats, valMatchV1RoundResultDto.playerStats) &&
        Objects.equals(this.roundResultCode, valMatchV1RoundResultDto.roundResultCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(roundNum, roundResult, roundCeremony, winningTeam, bombPlanter, bombDefuser, plantRoundTime, plantPlayerLocations, plantLocation, plantSite, defuseRoundTime, defusePlayerLocations, defuseLocation, playerStats, roundResultCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValMatchV1RoundResultDto {\n");
    sb.append("    roundNum: ").append(toIndentedString(roundNum)).append("\n");
    sb.append("    roundResult: ").append(toIndentedString(roundResult)).append("\n");
    sb.append("    roundCeremony: ").append(toIndentedString(roundCeremony)).append("\n");
    sb.append("    winningTeam: ").append(toIndentedString(winningTeam)).append("\n");
    sb.append("    bombPlanter: ").append(toIndentedString(bombPlanter)).append("\n");
    sb.append("    bombDefuser: ").append(toIndentedString(bombDefuser)).append("\n");
    sb.append("    plantRoundTime: ").append(toIndentedString(plantRoundTime)).append("\n");
    sb.append("    plantPlayerLocations: ").append(toIndentedString(plantPlayerLocations)).append("\n");
    sb.append("    plantLocation: ").append(toIndentedString(plantLocation)).append("\n");
    sb.append("    plantSite: ").append(toIndentedString(plantSite)).append("\n");
    sb.append("    defuseRoundTime: ").append(toIndentedString(defuseRoundTime)).append("\n");
    sb.append("    defusePlayerLocations: ").append(toIndentedString(defusePlayerLocations)).append("\n");
    sb.append("    defuseLocation: ").append(toIndentedString(defuseLocation)).append("\n");
    sb.append("    playerStats: ").append(toIndentedString(playerStats)).append("\n");
    sb.append("    roundResultCode: ").append(toIndentedString(roundResultCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("roundNum");
    openapiFields.add("roundResult");
    openapiFields.add("roundCeremony");
    openapiFields.add("winningTeam");
    openapiFields.add("bombPlanter");
    openapiFields.add("bombDefuser");
    openapiFields.add("plantRoundTime");
    openapiFields.add("plantPlayerLocations");
    openapiFields.add("plantLocation");
    openapiFields.add("plantSite");
    openapiFields.add("defuseRoundTime");
    openapiFields.add("defusePlayerLocations");
    openapiFields.add("defuseLocation");
    openapiFields.add("playerStats");
    openapiFields.add("roundResultCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("roundNum");
    openapiRequiredFields.add("roundResult");
    openapiRequiredFields.add("roundCeremony");
    openapiRequiredFields.add("winningTeam");
    openapiRequiredFields.add("bombPlanter");
    openapiRequiredFields.add("bombDefuser");
    openapiRequiredFields.add("plantRoundTime");
    openapiRequiredFields.add("plantPlayerLocations");
    openapiRequiredFields.add("plantLocation");
    openapiRequiredFields.add("plantSite");
    openapiRequiredFields.add("defuseRoundTime");
    openapiRequiredFields.add("defusePlayerLocations");
    openapiRequiredFields.add("defuseLocation");
    openapiRequiredFields.add("playerStats");
    openapiRequiredFields.add("roundResultCode");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ValMatchV1RoundResultDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValMatchV1RoundResultDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValMatchV1RoundResultDto is not found in the empty JSON string", ValMatchV1RoundResultDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValMatchV1RoundResultDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValMatchV1RoundResultDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ValMatchV1RoundResultDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("roundResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roundResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roundResult").toString()));
      }
      if (!jsonObj.get("roundCeremony").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roundCeremony` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roundCeremony").toString()));
      }
      if (!jsonObj.get("winningTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `winningTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("winningTeam").toString()));
      }
      if (!jsonObj.get("bombPlanter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bombPlanter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bombPlanter").toString()));
      }
      if (!jsonObj.get("bombDefuser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bombDefuser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bombDefuser").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("plantPlayerLocations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `plantPlayerLocations` to be an array in the JSON string but got `%s`", jsonObj.get("plantPlayerLocations").toString()));
      }

      JsonArray jsonArrayplantPlayerLocations = jsonObj.getAsJsonArray("plantPlayerLocations");
      // validate the required field `plantPlayerLocations` (array)
      for (int i = 0; i < jsonArrayplantPlayerLocations.size(); i++) {
        ValMatchV1PlayerLocationsDto.validateJsonElement(jsonArrayplantPlayerLocations.get(i));
      };
      // validate the required field `plantLocation`
      ValMatchV1LocationDto.validateJsonElement(jsonObj.get("plantLocation"));
      if (!jsonObj.get("plantSite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plantSite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plantSite").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("defusePlayerLocations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defusePlayerLocations` to be an array in the JSON string but got `%s`", jsonObj.get("defusePlayerLocations").toString()));
      }

      JsonArray jsonArraydefusePlayerLocations = jsonObj.getAsJsonArray("defusePlayerLocations");
      // validate the required field `defusePlayerLocations` (array)
      for (int i = 0; i < jsonArraydefusePlayerLocations.size(); i++) {
        ValMatchV1PlayerLocationsDto.validateJsonElement(jsonArraydefusePlayerLocations.get(i));
      };
      // validate the required field `defuseLocation`
      ValMatchV1LocationDto.validateJsonElement(jsonObj.get("defuseLocation"));
      // ensure the json data is an array
      if (!jsonObj.get("playerStats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerStats` to be an array in the JSON string but got `%s`", jsonObj.get("playerStats").toString()));
      }

      JsonArray jsonArrayplayerStats = jsonObj.getAsJsonArray("playerStats");
      // validate the required field `playerStats` (array)
      for (int i = 0; i < jsonArrayplayerStats.size(); i++) {
        ValMatchV1PlayerRoundStatsDto.validateJsonElement(jsonArrayplayerStats.get(i));
      };
      if (!jsonObj.get("roundResultCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roundResultCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roundResultCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValMatchV1RoundResultDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValMatchV1RoundResultDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValMatchV1RoundResultDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValMatchV1RoundResultDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ValMatchV1RoundResultDto>() {
           @Override
           public void write(JsonWriter out, ValMatchV1RoundResultDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValMatchV1RoundResultDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ValMatchV1RoundResultDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ValMatchV1RoundResultDto
  * @throws IOException if the JSON string is invalid with respect to ValMatchV1RoundResultDto
  */
  public static ValMatchV1RoundResultDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValMatchV1RoundResultDto.class);
  }

 /**
  * Convert an instance of ValMatchV1RoundResultDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

