/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.pajonti.sejuapi.model.SpectatorV5GameCustomizationObject;
import fr.pajonti.sejuapi.model.SpectatorV5Perks;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * SpectatorV5CurrentGameParticipant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class SpectatorV5CurrentGameParticipant {
  public static final String SERIALIZED_NAME_CHAMPION_ID = "championId";
  @SerializedName(SERIALIZED_NAME_CHAMPION_ID)
  private Long championId;

  public static final String SERIALIZED_NAME_PERKS = "perks";
  @SerializedName(SERIALIZED_NAME_PERKS)
  private SpectatorV5Perks perks;

  public static final String SERIALIZED_NAME_PROFILE_ICON_ID = "profileIconId";
  @SerializedName(SERIALIZED_NAME_PROFILE_ICON_ID)
  private Long profileIconId;

  public static final String SERIALIZED_NAME_BOT = "bot";
  @SerializedName(SERIALIZED_NAME_BOT)
  private Boolean bot;

  public static final String SERIALIZED_NAME_TEAM_ID = "teamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private Long teamId;

  public static final String SERIALIZED_NAME_SUMMONER_NAME = "summonerName";
  @SerializedName(SERIALIZED_NAME_SUMMONER_NAME)
  private String summonerName;

  public static final String SERIALIZED_NAME_SUMMONER_ID = "summonerId";
  @SerializedName(SERIALIZED_NAME_SUMMONER_ID)
  private String summonerId;

  public static final String SERIALIZED_NAME_PUUID = "puuid";
  @SerializedName(SERIALIZED_NAME_PUUID)
  private String puuid;

  public static final String SERIALIZED_NAME_SPELL1_ID = "spell1Id";
  @SerializedName(SERIALIZED_NAME_SPELL1_ID)
  private Long spell1Id;

  public static final String SERIALIZED_NAME_SPELL2_ID = "spell2Id";
  @SerializedName(SERIALIZED_NAME_SPELL2_ID)
  private Long spell2Id;

  public static final String SERIALIZED_NAME_GAME_CUSTOMIZATION_OBJECTS = "gameCustomizationObjects";
  @SerializedName(SERIALIZED_NAME_GAME_CUSTOMIZATION_OBJECTS)
  private List<SpectatorV5GameCustomizationObject> gameCustomizationObjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_RIOT_ID = "riotId";
  @SerializedName(SERIALIZED_NAME_RIOT_ID)
  private String riotId;

  public SpectatorV5CurrentGameParticipant() {
  }

  public SpectatorV5CurrentGameParticipant championId(Long championId) {
    this.championId = championId;
    return this;
  }

   /**
   * The ID of the champion played by this participant
   * @return championId
  **/
  @javax.annotation.Nonnull
  public Long getChampionId() {
    return championId;
  }

  public void setChampionId(Long championId) {
    this.championId = championId;
  }


  public SpectatorV5CurrentGameParticipant perks(SpectatorV5Perks perks) {
    this.perks = perks;
    return this;
  }

   /**
   * Get perks
   * @return perks
  **/
  @javax.annotation.Nullable
  public SpectatorV5Perks getPerks() {
    return perks;
  }

  public void setPerks(SpectatorV5Perks perks) {
    this.perks = perks;
  }


  public SpectatorV5CurrentGameParticipant profileIconId(Long profileIconId) {
    this.profileIconId = profileIconId;
    return this;
  }

   /**
   * The ID of the profile icon used by this participant
   * @return profileIconId
  **/
  @javax.annotation.Nonnull
  public Long getProfileIconId() {
    return profileIconId;
  }

  public void setProfileIconId(Long profileIconId) {
    this.profileIconId = profileIconId;
  }


  public SpectatorV5CurrentGameParticipant bot(Boolean bot) {
    this.bot = bot;
    return this;
  }

   /**
   * Flag indicating whether or not this participant is a bot
   * @return bot
  **/
  @javax.annotation.Nonnull
  public Boolean getBot() {
    return bot;
  }

  public void setBot(Boolean bot) {
    this.bot = bot;
  }


  public SpectatorV5CurrentGameParticipant teamId(Long teamId) {
    this.teamId = teamId;
    return this;
  }

   /**
   * The team ID of this participant, indicating the participant&#39;s team
   * @return teamId
  **/
  @javax.annotation.Nonnull
  public Long getTeamId() {
    return teamId;
  }

  public void setTeamId(Long teamId) {
    this.teamId = teamId;
  }


  public SpectatorV5CurrentGameParticipant summonerName(String summonerName) {
    this.summonerName = summonerName;
    return this;
  }

   /**
   * The summoner name of this participant
   * @return summonerName
  **/
  @javax.annotation.Nonnull
  public String getSummonerName() {
    return summonerName;
  }

  public void setSummonerName(String summonerName) {
    this.summonerName = summonerName;
  }


  public SpectatorV5CurrentGameParticipant summonerId(String summonerId) {
    this.summonerId = summonerId;
    return this;
  }

   /**
   * The encrypted summoner ID of this participant
   * @return summonerId
  **/
  @javax.annotation.Nonnull
  public String getSummonerId() {
    return summonerId;
  }

  public void setSummonerId(String summonerId) {
    this.summonerId = summonerId;
  }


  public SpectatorV5CurrentGameParticipant puuid(String puuid) {
    this.puuid = puuid;
    return this;
  }

   /**
   * The encrypted puuid of this participant
   * @return puuid
  **/
  @javax.annotation.Nullable
  public String getPuuid() {
    return puuid;
  }

  public void setPuuid(String puuid) {
    this.puuid = puuid;
  }


  public SpectatorV5CurrentGameParticipant spell1Id(Long spell1Id) {
    this.spell1Id = spell1Id;
    return this;
  }

   /**
   * The ID of the first summoner spell used by this participant
   * @return spell1Id
  **/
  @javax.annotation.Nonnull
  public Long getSpell1Id() {
    return spell1Id;
  }

  public void setSpell1Id(Long spell1Id) {
    this.spell1Id = spell1Id;
  }


  public SpectatorV5CurrentGameParticipant spell2Id(Long spell2Id) {
    this.spell2Id = spell2Id;
    return this;
  }

   /**
   * The ID of the second summoner spell used by this participant
   * @return spell2Id
  **/
  @javax.annotation.Nonnull
  public Long getSpell2Id() {
    return spell2Id;
  }

  public void setSpell2Id(Long spell2Id) {
    this.spell2Id = spell2Id;
  }


  public SpectatorV5CurrentGameParticipant gameCustomizationObjects(List<SpectatorV5GameCustomizationObject> gameCustomizationObjects) {
    this.gameCustomizationObjects = gameCustomizationObjects;
    return this;
  }

  public SpectatorV5CurrentGameParticipant addGameCustomizationObjectsItem(SpectatorV5GameCustomizationObject gameCustomizationObjectsItem) {
    if (this.gameCustomizationObjects == null) {
      this.gameCustomizationObjects = new ArrayList<>();
    }
    this.gameCustomizationObjects.add(gameCustomizationObjectsItem);
    return this;
  }

   /**
   * List of Game Customizations
   * @return gameCustomizationObjects
  **/
  @javax.annotation.Nonnull
  public List<SpectatorV5GameCustomizationObject> getGameCustomizationObjects() {
    return gameCustomizationObjects;
  }

  public void setGameCustomizationObjects(List<SpectatorV5GameCustomizationObject> gameCustomizationObjects) {
    this.gameCustomizationObjects = gameCustomizationObjects;
  }


  public SpectatorV5CurrentGameParticipant riotId(String riotId) {
    this.riotId = riotId;
    return this;
  }

   /**
   * Get riotId
   * @return riotId
  **/
  @javax.annotation.Nullable
  public String getRiotId() {
    return riotId;
  }

  public void setRiotId(String riotId) {
    this.riotId = riotId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpectatorV5CurrentGameParticipant spectatorV5CurrentGameParticipant = (SpectatorV5CurrentGameParticipant) o;
    return Objects.equals(this.championId, spectatorV5CurrentGameParticipant.championId) &&
        Objects.equals(this.perks, spectatorV5CurrentGameParticipant.perks) &&
        Objects.equals(this.profileIconId, spectatorV5CurrentGameParticipant.profileIconId) &&
        Objects.equals(this.bot, spectatorV5CurrentGameParticipant.bot) &&
        Objects.equals(this.teamId, spectatorV5CurrentGameParticipant.teamId) &&
        Objects.equals(this.summonerName, spectatorV5CurrentGameParticipant.summonerName) &&
        Objects.equals(this.summonerId, spectatorV5CurrentGameParticipant.summonerId) &&
        Objects.equals(this.puuid, spectatorV5CurrentGameParticipant.puuid) &&
        Objects.equals(this.spell1Id, spectatorV5CurrentGameParticipant.spell1Id) &&
        Objects.equals(this.spell2Id, spectatorV5CurrentGameParticipant.spell2Id) &&
        Objects.equals(this.gameCustomizationObjects, spectatorV5CurrentGameParticipant.gameCustomizationObjects) &&
        Objects.equals(this.riotId, spectatorV5CurrentGameParticipant.riotId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(championId, perks, profileIconId, bot, teamId, summonerName, summonerId, puuid, spell1Id, spell2Id, gameCustomizationObjects, riotId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpectatorV5CurrentGameParticipant {\n");
    sb.append("    championId: ").append(toIndentedString(championId)).append("\n");
    sb.append("    perks: ").append(toIndentedString(perks)).append("\n");
    sb.append("    profileIconId: ").append(toIndentedString(profileIconId)).append("\n");
    sb.append("    bot: ").append(toIndentedString(bot)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    summonerName: ").append(toIndentedString(summonerName)).append("\n");
    sb.append("    summonerId: ").append(toIndentedString(summonerId)).append("\n");
    sb.append("    puuid: ").append(toIndentedString(puuid)).append("\n");
    sb.append("    spell1Id: ").append(toIndentedString(spell1Id)).append("\n");
    sb.append("    spell2Id: ").append(toIndentedString(spell2Id)).append("\n");
    sb.append("    gameCustomizationObjects: ").append(toIndentedString(gameCustomizationObjects)).append("\n");
    sb.append("    riotId: ").append(toIndentedString(riotId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("championId");
    openapiFields.add("perks");
    openapiFields.add("profileIconId");
    openapiFields.add("bot");
    openapiFields.add("teamId");
    openapiFields.add("summonerName");
    openapiFields.add("summonerId");
    openapiFields.add("puuid");
    openapiFields.add("spell1Id");
    openapiFields.add("spell2Id");
    openapiFields.add("gameCustomizationObjects");
    openapiFields.add("riotId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("championId");
    openapiRequiredFields.add("profileIconId");
    openapiRequiredFields.add("bot");
    openapiRequiredFields.add("teamId");
    openapiRequiredFields.add("summonerName");
    openapiRequiredFields.add("summonerId");
    openapiRequiredFields.add("spell1Id");
    openapiRequiredFields.add("spell2Id");
    openapiRequiredFields.add("gameCustomizationObjects");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SpectatorV5CurrentGameParticipant
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpectatorV5CurrentGameParticipant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpectatorV5CurrentGameParticipant is not found in the empty JSON string", SpectatorV5CurrentGameParticipant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpectatorV5CurrentGameParticipant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpectatorV5CurrentGameParticipant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SpectatorV5CurrentGameParticipant.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `perks`
      if (jsonObj.get("perks") != null && !jsonObj.get("perks").isJsonNull()) {
        SpectatorV5Perks.validateJsonElement(jsonObj.get("perks"));
      }
      if (!jsonObj.get("summonerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summonerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summonerName").toString()));
      }
      if (!jsonObj.get("summonerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summonerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summonerId").toString()));
      }
      if ((jsonObj.get("puuid") != null && !jsonObj.get("puuid").isJsonNull()) && !jsonObj.get("puuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `puuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("puuid").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("gameCustomizationObjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gameCustomizationObjects` to be an array in the JSON string but got `%s`", jsonObj.get("gameCustomizationObjects").toString()));
      }

      JsonArray jsonArraygameCustomizationObjects = jsonObj.getAsJsonArray("gameCustomizationObjects");
      // validate the required field `gameCustomizationObjects` (array)
      for (int i = 0; i < jsonArraygameCustomizationObjects.size(); i++) {
        SpectatorV5GameCustomizationObject.validateJsonElement(jsonArraygameCustomizationObjects.get(i));
      };
      if ((jsonObj.get("riotId") != null && !jsonObj.get("riotId").isJsonNull()) && !jsonObj.get("riotId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `riotId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("riotId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpectatorV5CurrentGameParticipant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpectatorV5CurrentGameParticipant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpectatorV5CurrentGameParticipant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpectatorV5CurrentGameParticipant.class));

       return (TypeAdapter<T>) new TypeAdapter<SpectatorV5CurrentGameParticipant>() {
           @Override
           public void write(JsonWriter out, SpectatorV5CurrentGameParticipant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpectatorV5CurrentGameParticipant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SpectatorV5CurrentGameParticipant given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SpectatorV5CurrentGameParticipant
  * @throws IOException if the JSON string is invalid with respect to SpectatorV5CurrentGameParticipant
  */
  public static SpectatorV5CurrentGameParticipant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpectatorV5CurrentGameParticipant.class);
  }

 /**
  * Convert an instance of SpectatorV5CurrentGameParticipant to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

