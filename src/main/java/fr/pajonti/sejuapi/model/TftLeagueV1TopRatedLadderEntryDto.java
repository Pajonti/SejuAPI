/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * TftLeagueV1TopRatedLadderEntryDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class TftLeagueV1TopRatedLadderEntryDto {
  public static final String SERIALIZED_NAME_SUMMONER_ID = "summonerId";
  @SerializedName(SERIALIZED_NAME_SUMMONER_ID)
  private String summonerId;

  public static final String SERIALIZED_NAME_SUMMONER_NAME = "summonerName";
  @SerializedName(SERIALIZED_NAME_SUMMONER_NAME)
  private String summonerName;

  /**
   * (Legal values:  ORANGE,  PURPLE,  BLUE,  GREEN,  GRAY)
   */
  @JsonAdapter(RatedTierEnum.Adapter.class)
  public enum RatedTierEnum {
    ORANGE("ORANGE"),
    
    PURPLE("PURPLE"),
    
    BLUE("BLUE"),
    
    GREEN("GREEN"),
    
    GRAY("GRAY");

    private String value;

    RatedTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RatedTierEnum fromValue(String value) {
      for (RatedTierEnum b : RatedTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RatedTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RatedTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RatedTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RatedTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RatedTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RATED_TIER = "ratedTier";
  @SerializedName(SERIALIZED_NAME_RATED_TIER)
  private RatedTierEnum ratedTier;

  public static final String SERIALIZED_NAME_RATED_RATING = "ratedRating";
  @SerializedName(SERIALIZED_NAME_RATED_RATING)
  private Integer ratedRating;

  public static final String SERIALIZED_NAME_WINS = "wins";
  @SerializedName(SERIALIZED_NAME_WINS)
  private Integer wins;

  public static final String SERIALIZED_NAME_PREVIOUS_UPDATE_LADDER_POSITION = "previousUpdateLadderPosition";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_UPDATE_LADDER_POSITION)
  private Integer previousUpdateLadderPosition;

  public TftLeagueV1TopRatedLadderEntryDto() {
  }

  public TftLeagueV1TopRatedLadderEntryDto summonerId(String summonerId) {
    this.summonerId = summonerId;
    return this;
  }

   /**
   * Get summonerId
   * @return summonerId
  **/
  @javax.annotation.Nonnull
  public String getSummonerId() {
    return summonerId;
  }

  public void setSummonerId(String summonerId) {
    this.summonerId = summonerId;
  }


  public TftLeagueV1TopRatedLadderEntryDto summonerName(String summonerName) {
    this.summonerName = summonerName;
    return this;
  }

   /**
   * Get summonerName
   * @return summonerName
  **/
  @javax.annotation.Nonnull
  public String getSummonerName() {
    return summonerName;
  }

  public void setSummonerName(String summonerName) {
    this.summonerName = summonerName;
  }


  public TftLeagueV1TopRatedLadderEntryDto ratedTier(RatedTierEnum ratedTier) {
    this.ratedTier = ratedTier;
    return this;
  }

   /**
   * (Legal values:  ORANGE,  PURPLE,  BLUE,  GREEN,  GRAY)
   * @return ratedTier
  **/
  @javax.annotation.Nonnull
  public RatedTierEnum getRatedTier() {
    return ratedTier;
  }

  public void setRatedTier(RatedTierEnum ratedTier) {
    this.ratedTier = ratedTier;
  }


  public TftLeagueV1TopRatedLadderEntryDto ratedRating(Integer ratedRating) {
    this.ratedRating = ratedRating;
    return this;
  }

   /**
   * Get ratedRating
   * @return ratedRating
  **/
  @javax.annotation.Nonnull
  public Integer getRatedRating() {
    return ratedRating;
  }

  public void setRatedRating(Integer ratedRating) {
    this.ratedRating = ratedRating;
  }


  public TftLeagueV1TopRatedLadderEntryDto wins(Integer wins) {
    this.wins = wins;
    return this;
  }

   /**
   * First placement.
   * @return wins
  **/
  @javax.annotation.Nonnull
  public Integer getWins() {
    return wins;
  }

  public void setWins(Integer wins) {
    this.wins = wins;
  }


  public TftLeagueV1TopRatedLadderEntryDto previousUpdateLadderPosition(Integer previousUpdateLadderPosition) {
    this.previousUpdateLadderPosition = previousUpdateLadderPosition;
    return this;
  }

   /**
   * Get previousUpdateLadderPosition
   * @return previousUpdateLadderPosition
  **/
  @javax.annotation.Nonnull
  public Integer getPreviousUpdateLadderPosition() {
    return previousUpdateLadderPosition;
  }

  public void setPreviousUpdateLadderPosition(Integer previousUpdateLadderPosition) {
    this.previousUpdateLadderPosition = previousUpdateLadderPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TftLeagueV1TopRatedLadderEntryDto tftLeagueV1TopRatedLadderEntryDto = (TftLeagueV1TopRatedLadderEntryDto) o;
    return Objects.equals(this.summonerId, tftLeagueV1TopRatedLadderEntryDto.summonerId) &&
        Objects.equals(this.summonerName, tftLeagueV1TopRatedLadderEntryDto.summonerName) &&
        Objects.equals(this.ratedTier, tftLeagueV1TopRatedLadderEntryDto.ratedTier) &&
        Objects.equals(this.ratedRating, tftLeagueV1TopRatedLadderEntryDto.ratedRating) &&
        Objects.equals(this.wins, tftLeagueV1TopRatedLadderEntryDto.wins) &&
        Objects.equals(this.previousUpdateLadderPosition, tftLeagueV1TopRatedLadderEntryDto.previousUpdateLadderPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(summonerId, summonerName, ratedTier, ratedRating, wins, previousUpdateLadderPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TftLeagueV1TopRatedLadderEntryDto {\n");
    sb.append("    summonerId: ").append(toIndentedString(summonerId)).append("\n");
    sb.append("    summonerName: ").append(toIndentedString(summonerName)).append("\n");
    sb.append("    ratedTier: ").append(toIndentedString(ratedTier)).append("\n");
    sb.append("    ratedRating: ").append(toIndentedString(ratedRating)).append("\n");
    sb.append("    wins: ").append(toIndentedString(wins)).append("\n");
    sb.append("    previousUpdateLadderPosition: ").append(toIndentedString(previousUpdateLadderPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("summonerId");
    openapiFields.add("summonerName");
    openapiFields.add("ratedTier");
    openapiFields.add("ratedRating");
    openapiFields.add("wins");
    openapiFields.add("previousUpdateLadderPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("summonerId");
    openapiRequiredFields.add("summonerName");
    openapiRequiredFields.add("ratedTier");
    openapiRequiredFields.add("ratedRating");
    openapiRequiredFields.add("wins");
    openapiRequiredFields.add("previousUpdateLadderPosition");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TftLeagueV1TopRatedLadderEntryDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TftLeagueV1TopRatedLadderEntryDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TftLeagueV1TopRatedLadderEntryDto is not found in the empty JSON string", TftLeagueV1TopRatedLadderEntryDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TftLeagueV1TopRatedLadderEntryDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TftLeagueV1TopRatedLadderEntryDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TftLeagueV1TopRatedLadderEntryDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("summonerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summonerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summonerId").toString()));
      }
      if (!jsonObj.get("summonerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summonerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summonerName").toString()));
      }
      if (!jsonObj.get("ratedTier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratedTier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratedTier").toString()));
      }
      // validate the required field `ratedTier`
      RatedTierEnum.validateJsonElement(jsonObj.get("ratedTier"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TftLeagueV1TopRatedLadderEntryDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TftLeagueV1TopRatedLadderEntryDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TftLeagueV1TopRatedLadderEntryDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TftLeagueV1TopRatedLadderEntryDto.class));

       return (TypeAdapter<T>) new TypeAdapter<TftLeagueV1TopRatedLadderEntryDto>() {
           @Override
           public void write(JsonWriter out, TftLeagueV1TopRatedLadderEntryDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TftLeagueV1TopRatedLadderEntryDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TftLeagueV1TopRatedLadderEntryDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TftLeagueV1TopRatedLadderEntryDto
  * @throws IOException if the JSON string is invalid with respect to TftLeagueV1TopRatedLadderEntryDto
  */
  public static TftLeagueV1TopRatedLadderEntryDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TftLeagueV1TopRatedLadderEntryDto.class);
  }

 /**
  * Convert an instance of TftLeagueV1TopRatedLadderEntryDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

