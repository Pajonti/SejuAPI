/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.pajonti.sejuapi.model.LorMatchV1PlayerDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * LorMatchV1InfoDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class LorMatchV1InfoDto {
  /**
   * (Legal values:  Constructed,  Expeditions,  Tutorial)
   */
  @JsonAdapter(GameModeEnum.Adapter.class)
  public enum GameModeEnum {
    CONSTRUCTED("Constructed"),
    
    EXPEDITIONS("Expeditions"),
    
    TUTORIAL("Tutorial");

    private String value;

    GameModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GameModeEnum fromValue(String value) {
      for (GameModeEnum b : GameModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GameModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GameModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GameModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GameModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GameModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GAME_MODE = "game_mode";
  @SerializedName(SERIALIZED_NAME_GAME_MODE)
  private GameModeEnum gameMode;

  /**
   * (Legal values:  Ranked,  Normal,  AI,  Tutorial,  VanillaTrial,  Singleton,  StandardGauntlet)
   */
  @JsonAdapter(GameTypeEnum.Adapter.class)
  public enum GameTypeEnum {
    RANKED("Ranked"),
    
    NORMAL("Normal"),
    
    AI("AI"),
    
    TUTORIAL("Tutorial"),
    
    VANILLATRIAL("VanillaTrial"),
    
    SINGLETON("Singleton"),
    
    STANDARDGAUNTLET("StandardGauntlet");

    private String value;

    GameTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GameTypeEnum fromValue(String value) {
      for (GameTypeEnum b : GameTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GameTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GameTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GameTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GameTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GameTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GAME_TYPE = "game_type";
  @SerializedName(SERIALIZED_NAME_GAME_TYPE)
  private GameTypeEnum gameType;

  public static final String SERIALIZED_NAME_GAME_START_TIME_UTC = "game_start_time_utc";
  @SerializedName(SERIALIZED_NAME_GAME_START_TIME_UTC)
  private String gameStartTimeUtc;

  public static final String SERIALIZED_NAME_GAME_VERSION = "game_version";
  @SerializedName(SERIALIZED_NAME_GAME_VERSION)
  private String gameVersion;

  /**
   * (Legal values:  standard,  eternal)
   */
  @JsonAdapter(GameFormatEnum.Adapter.class)
  public enum GameFormatEnum {
    STANDARD("standard"),
    
    ETERNAL("eternal");

    private String value;

    GameFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GameFormatEnum fromValue(String value) {
      for (GameFormatEnum b : GameFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GameFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GameFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GameFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GameFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GameFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GAME_FORMAT = "game_format";
  @SerializedName(SERIALIZED_NAME_GAME_FORMAT)
  private GameFormatEnum gameFormat;

  public static final String SERIALIZED_NAME_PLAYERS = "players";
  @SerializedName(SERIALIZED_NAME_PLAYERS)
  private List<LorMatchV1PlayerDto> players = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_TURN_COUNT = "total_turn_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_TURN_COUNT)
  private Integer totalTurnCount;

  public LorMatchV1InfoDto() {
  }

  public LorMatchV1InfoDto gameMode(GameModeEnum gameMode) {
    this.gameMode = gameMode;
    return this;
  }

   /**
   * (Legal values:  Constructed,  Expeditions,  Tutorial)
   * @return gameMode
  **/
  @javax.annotation.Nonnull
  public GameModeEnum getGameMode() {
    return gameMode;
  }

  public void setGameMode(GameModeEnum gameMode) {
    this.gameMode = gameMode;
  }


  public LorMatchV1InfoDto gameType(GameTypeEnum gameType) {
    this.gameType = gameType;
    return this;
  }

   /**
   * (Legal values:  Ranked,  Normal,  AI,  Tutorial,  VanillaTrial,  Singleton,  StandardGauntlet)
   * @return gameType
  **/
  @javax.annotation.Nonnull
  public GameTypeEnum getGameType() {
    return gameType;
  }

  public void setGameType(GameTypeEnum gameType) {
    this.gameType = gameType;
  }


  public LorMatchV1InfoDto gameStartTimeUtc(String gameStartTimeUtc) {
    this.gameStartTimeUtc = gameStartTimeUtc;
    return this;
  }

   /**
   * Get gameStartTimeUtc
   * @return gameStartTimeUtc
  **/
  @javax.annotation.Nonnull
  public String getGameStartTimeUtc() {
    return gameStartTimeUtc;
  }

  public void setGameStartTimeUtc(String gameStartTimeUtc) {
    this.gameStartTimeUtc = gameStartTimeUtc;
  }


  public LorMatchV1InfoDto gameVersion(String gameVersion) {
    this.gameVersion = gameVersion;
    return this;
  }

   /**
   * Get gameVersion
   * @return gameVersion
  **/
  @javax.annotation.Nonnull
  public String getGameVersion() {
    return gameVersion;
  }

  public void setGameVersion(String gameVersion) {
    this.gameVersion = gameVersion;
  }


  public LorMatchV1InfoDto gameFormat(GameFormatEnum gameFormat) {
    this.gameFormat = gameFormat;
    return this;
  }

   /**
   * (Legal values:  standard,  eternal)
   * @return gameFormat
  **/
  @javax.annotation.Nonnull
  public GameFormatEnum getGameFormat() {
    return gameFormat;
  }

  public void setGameFormat(GameFormatEnum gameFormat) {
    this.gameFormat = gameFormat;
  }


  public LorMatchV1InfoDto players(List<LorMatchV1PlayerDto> players) {
    this.players = players;
    return this;
  }

  public LorMatchV1InfoDto addPlayersItem(LorMatchV1PlayerDto playersItem) {
    if (this.players == null) {
      this.players = new ArrayList<>();
    }
    this.players.add(playersItem);
    return this;
  }

   /**
   * Get players
   * @return players
  **/
  @javax.annotation.Nonnull
  public List<LorMatchV1PlayerDto> getPlayers() {
    return players;
  }

  public void setPlayers(List<LorMatchV1PlayerDto> players) {
    this.players = players;
  }


  public LorMatchV1InfoDto totalTurnCount(Integer totalTurnCount) {
    this.totalTurnCount = totalTurnCount;
    return this;
  }

   /**
   * Total turns taken by both players.
   * @return totalTurnCount
  **/
  @javax.annotation.Nonnull
  public Integer getTotalTurnCount() {
    return totalTurnCount;
  }

  public void setTotalTurnCount(Integer totalTurnCount) {
    this.totalTurnCount = totalTurnCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LorMatchV1InfoDto lorMatchV1InfoDto = (LorMatchV1InfoDto) o;
    return Objects.equals(this.gameMode, lorMatchV1InfoDto.gameMode) &&
        Objects.equals(this.gameType, lorMatchV1InfoDto.gameType) &&
        Objects.equals(this.gameStartTimeUtc, lorMatchV1InfoDto.gameStartTimeUtc) &&
        Objects.equals(this.gameVersion, lorMatchV1InfoDto.gameVersion) &&
        Objects.equals(this.gameFormat, lorMatchV1InfoDto.gameFormat) &&
        Objects.equals(this.players, lorMatchV1InfoDto.players) &&
        Objects.equals(this.totalTurnCount, lorMatchV1InfoDto.totalTurnCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gameMode, gameType, gameStartTimeUtc, gameVersion, gameFormat, players, totalTurnCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LorMatchV1InfoDto {\n");
    sb.append("    gameMode: ").append(toIndentedString(gameMode)).append("\n");
    sb.append("    gameType: ").append(toIndentedString(gameType)).append("\n");
    sb.append("    gameStartTimeUtc: ").append(toIndentedString(gameStartTimeUtc)).append("\n");
    sb.append("    gameVersion: ").append(toIndentedString(gameVersion)).append("\n");
    sb.append("    gameFormat: ").append(toIndentedString(gameFormat)).append("\n");
    sb.append("    players: ").append(toIndentedString(players)).append("\n");
    sb.append("    totalTurnCount: ").append(toIndentedString(totalTurnCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("game_mode");
    openapiFields.add("game_type");
    openapiFields.add("game_start_time_utc");
    openapiFields.add("game_version");
    openapiFields.add("game_format");
    openapiFields.add("players");
    openapiFields.add("total_turn_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("game_mode");
    openapiRequiredFields.add("game_type");
    openapiRequiredFields.add("game_start_time_utc");
    openapiRequiredFields.add("game_version");
    openapiRequiredFields.add("game_format");
    openapiRequiredFields.add("players");
    openapiRequiredFields.add("total_turn_count");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LorMatchV1InfoDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LorMatchV1InfoDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LorMatchV1InfoDto is not found in the empty JSON string", LorMatchV1InfoDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LorMatchV1InfoDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LorMatchV1InfoDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LorMatchV1InfoDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("game_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `game_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("game_mode").toString()));
      }
      // validate the required field `game_mode`
      GameModeEnum.validateJsonElement(jsonObj.get("game_mode"));
      if (!jsonObj.get("game_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `game_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("game_type").toString()));
      }
      // validate the required field `game_type`
      GameTypeEnum.validateJsonElement(jsonObj.get("game_type"));
      if (!jsonObj.get("game_start_time_utc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `game_start_time_utc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("game_start_time_utc").toString()));
      }
      if (!jsonObj.get("game_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `game_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("game_version").toString()));
      }
      if (!jsonObj.get("game_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `game_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("game_format").toString()));
      }
      // validate the required field `game_format`
      GameFormatEnum.validateJsonElement(jsonObj.get("game_format"));
      // ensure the json data is an array
      if (!jsonObj.get("players").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `players` to be an array in the JSON string but got `%s`", jsonObj.get("players").toString()));
      }

      JsonArray jsonArrayplayers = jsonObj.getAsJsonArray("players");
      // validate the required field `players` (array)
      for (int i = 0; i < jsonArrayplayers.size(); i++) {
        LorMatchV1PlayerDto.validateJsonElement(jsonArrayplayers.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LorMatchV1InfoDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LorMatchV1InfoDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LorMatchV1InfoDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LorMatchV1InfoDto.class));

       return (TypeAdapter<T>) new TypeAdapter<LorMatchV1InfoDto>() {
           @Override
           public void write(JsonWriter out, LorMatchV1InfoDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LorMatchV1InfoDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LorMatchV1InfoDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LorMatchV1InfoDto
  * @throws IOException if the JSON string is invalid with respect to LorMatchV1InfoDto
  */
  public static LorMatchV1InfoDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LorMatchV1InfoDto.class);
  }

 /**
  * Convert an instance of LorMatchV1InfoDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

