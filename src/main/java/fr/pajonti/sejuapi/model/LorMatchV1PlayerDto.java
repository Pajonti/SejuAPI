/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * LorMatchV1PlayerDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class LorMatchV1PlayerDto {
  public static final String SERIALIZED_NAME_PUUID = "puuid";
  @SerializedName(SERIALIZED_NAME_PUUID)
  private String puuid;

  public static final String SERIALIZED_NAME_DECK_ID = "deck_id";
  @SerializedName(SERIALIZED_NAME_DECK_ID)
  private String deckId;

  public static final String SERIALIZED_NAME_DECK_CODE = "deck_code";
  @SerializedName(SERIALIZED_NAME_DECK_CODE)
  private String deckCode;

  public static final String SERIALIZED_NAME_FACTIONS = "factions";
  @SerializedName(SERIALIZED_NAME_FACTIONS)
  private List<String> factions = new ArrayList<>();

  public static final String SERIALIZED_NAME_GAME_OUTCOME = "game_outcome";
  @SerializedName(SERIALIZED_NAME_GAME_OUTCOME)
  private String gameOutcome;

  public static final String SERIALIZED_NAME_ORDER_OF_PLAY = "order_of_play";
  @SerializedName(SERIALIZED_NAME_ORDER_OF_PLAY)
  private Integer orderOfPlay;

  public LorMatchV1PlayerDto() {
  }

  public LorMatchV1PlayerDto puuid(String puuid) {
    this.puuid = puuid;
    return this;
  }

   /**
   * Get puuid
   * @return puuid
  **/
  @javax.annotation.Nonnull
  public String getPuuid() {
    return puuid;
  }

  public void setPuuid(String puuid) {
    this.puuid = puuid;
  }


  public LorMatchV1PlayerDto deckId(String deckId) {
    this.deckId = deckId;
    return this;
  }

   /**
   * Get deckId
   * @return deckId
  **/
  @javax.annotation.Nonnull
  public String getDeckId() {
    return deckId;
  }

  public void setDeckId(String deckId) {
    this.deckId = deckId;
  }


  public LorMatchV1PlayerDto deckCode(String deckCode) {
    this.deckCode = deckCode;
    return this;
  }

   /**
   * Code for the deck played. Refer to LOR documentation for details on deck codes.
   * @return deckCode
  **/
  @javax.annotation.Nonnull
  public String getDeckCode() {
    return deckCode;
  }

  public void setDeckCode(String deckCode) {
    this.deckCode = deckCode;
  }


  public LorMatchV1PlayerDto factions(List<String> factions) {
    this.factions = factions;
    return this;
  }

  public LorMatchV1PlayerDto addFactionsItem(String factionsItem) {
    if (this.factions == null) {
      this.factions = new ArrayList<>();
    }
    this.factions.add(factionsItem);
    return this;
  }

   /**
   * Get factions
   * @return factions
  **/
  @javax.annotation.Nonnull
  public List<String> getFactions() {
    return factions;
  }

  public void setFactions(List<String> factions) {
    this.factions = factions;
  }


  public LorMatchV1PlayerDto gameOutcome(String gameOutcome) {
    this.gameOutcome = gameOutcome;
    return this;
  }

   /**
   * Get gameOutcome
   * @return gameOutcome
  **/
  @javax.annotation.Nonnull
  public String getGameOutcome() {
    return gameOutcome;
  }

  public void setGameOutcome(String gameOutcome) {
    this.gameOutcome = gameOutcome;
  }


  public LorMatchV1PlayerDto orderOfPlay(Integer orderOfPlay) {
    this.orderOfPlay = orderOfPlay;
    return this;
  }

   /**
   * The order in which the players took turns.
   * @return orderOfPlay
  **/
  @javax.annotation.Nonnull
  public Integer getOrderOfPlay() {
    return orderOfPlay;
  }

  public void setOrderOfPlay(Integer orderOfPlay) {
    this.orderOfPlay = orderOfPlay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LorMatchV1PlayerDto lorMatchV1PlayerDto = (LorMatchV1PlayerDto) o;
    return Objects.equals(this.puuid, lorMatchV1PlayerDto.puuid) &&
        Objects.equals(this.deckId, lorMatchV1PlayerDto.deckId) &&
        Objects.equals(this.deckCode, lorMatchV1PlayerDto.deckCode) &&
        Objects.equals(this.factions, lorMatchV1PlayerDto.factions) &&
        Objects.equals(this.gameOutcome, lorMatchV1PlayerDto.gameOutcome) &&
        Objects.equals(this.orderOfPlay, lorMatchV1PlayerDto.orderOfPlay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(puuid, deckId, deckCode, factions, gameOutcome, orderOfPlay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LorMatchV1PlayerDto {\n");
    sb.append("    puuid: ").append(toIndentedString(puuid)).append("\n");
    sb.append("    deckId: ").append(toIndentedString(deckId)).append("\n");
    sb.append("    deckCode: ").append(toIndentedString(deckCode)).append("\n");
    sb.append("    factions: ").append(toIndentedString(factions)).append("\n");
    sb.append("    gameOutcome: ").append(toIndentedString(gameOutcome)).append("\n");
    sb.append("    orderOfPlay: ").append(toIndentedString(orderOfPlay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("puuid");
    openapiFields.add("deck_id");
    openapiFields.add("deck_code");
    openapiFields.add("factions");
    openapiFields.add("game_outcome");
    openapiFields.add("order_of_play");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("puuid");
    openapiRequiredFields.add("deck_id");
    openapiRequiredFields.add("deck_code");
    openapiRequiredFields.add("factions");
    openapiRequiredFields.add("game_outcome");
    openapiRequiredFields.add("order_of_play");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LorMatchV1PlayerDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LorMatchV1PlayerDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LorMatchV1PlayerDto is not found in the empty JSON string", LorMatchV1PlayerDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LorMatchV1PlayerDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LorMatchV1PlayerDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LorMatchV1PlayerDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("puuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `puuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("puuid").toString()));
      }
      if (!jsonObj.get("deck_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deck_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deck_id").toString()));
      }
      if (!jsonObj.get("deck_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deck_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deck_code").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("factions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("factions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `factions` to be an array in the JSON string but got `%s`", jsonObj.get("factions").toString()));
      }
      if (!jsonObj.get("game_outcome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `game_outcome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("game_outcome").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LorMatchV1PlayerDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LorMatchV1PlayerDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LorMatchV1PlayerDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LorMatchV1PlayerDto.class));

       return (TypeAdapter<T>) new TypeAdapter<LorMatchV1PlayerDto>() {
           @Override
           public void write(JsonWriter out, LorMatchV1PlayerDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LorMatchV1PlayerDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LorMatchV1PlayerDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LorMatchV1PlayerDto
  * @throws IOException if the JSON string is invalid with respect to LorMatchV1PlayerDto
  */
  public static LorMatchV1PlayerDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LorMatchV1PlayerDto.class);
  }

 /**
  * Convert an instance of LorMatchV1PlayerDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

