/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * MatchV5ParticipantChallenges
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class MatchV5ParticipantChallenges {
  public static final String SERIALIZED_NAME_12ASSIST_STREAK_COUNT = "12AssistStreakCount";
  @SerializedName(SERIALIZED_NAME_12ASSIST_STREAK_COUNT)
  private Double _12assistStreakCount;

  public static final String SERIALIZED_NAME_ABILITY_USES = "abilityUses";
  @SerializedName(SERIALIZED_NAME_ABILITY_USES)
  private Double abilityUses;

  public static final String SERIALIZED_NAME_ACES_BEFORE15_MINUTES = "acesBefore15Minutes";
  @SerializedName(SERIALIZED_NAME_ACES_BEFORE15_MINUTES)
  private Double acesBefore15Minutes;

  public static final String SERIALIZED_NAME_ALLIED_JUNGLE_MONSTER_KILLS = "alliedJungleMonsterKills";
  @SerializedName(SERIALIZED_NAME_ALLIED_JUNGLE_MONSTER_KILLS)
  private Double alliedJungleMonsterKills;

  public static final String SERIALIZED_NAME_BARON_BUFF_GOLD_ADVANTAGE_OVER_THRESHOLD = "baronBuffGoldAdvantageOverThreshold";
  @SerializedName(SERIALIZED_NAME_BARON_BUFF_GOLD_ADVANTAGE_OVER_THRESHOLD)
  private Double baronBuffGoldAdvantageOverThreshold;

  public static final String SERIALIZED_NAME_BARON_TAKEDOWNS = "baronTakedowns";
  @SerializedName(SERIALIZED_NAME_BARON_TAKEDOWNS)
  private Double baronTakedowns;

  public static final String SERIALIZED_NAME_BLAST_CONE_OPPOSITE_OPPONENT_COUNT = "blastConeOppositeOpponentCount";
  @SerializedName(SERIALIZED_NAME_BLAST_CONE_OPPOSITE_OPPONENT_COUNT)
  private Double blastConeOppositeOpponentCount;

  public static final String SERIALIZED_NAME_BOUNTY_GOLD = "bountyGold";
  @SerializedName(SERIALIZED_NAME_BOUNTY_GOLD)
  private Double bountyGold;

  public static final String SERIALIZED_NAME_BUFFS_STOLEN = "buffsStolen";
  @SerializedName(SERIALIZED_NAME_BUFFS_STOLEN)
  private Double buffsStolen;

  public static final String SERIALIZED_NAME_COMPLETE_SUPPORT_QUEST_IN_TIME = "completeSupportQuestInTime";
  @SerializedName(SERIALIZED_NAME_COMPLETE_SUPPORT_QUEST_IN_TIME)
  private Double completeSupportQuestInTime;

  public static final String SERIALIZED_NAME_CONTROL_WARDS_PLACED = "controlWardsPlaced";
  @SerializedName(SERIALIZED_NAME_CONTROL_WARDS_PLACED)
  private Double controlWardsPlaced;

  public static final String SERIALIZED_NAME_CONTROL_WARD_TIME_COVERAGE_IN_RIVER_OR_ENEMY_HALF = "controlWardTimeCoverageInRiverOrEnemyHalf";
  @SerializedName(SERIALIZED_NAME_CONTROL_WARD_TIME_COVERAGE_IN_RIVER_OR_ENEMY_HALF)
  private Double controlWardTimeCoverageInRiverOrEnemyHalf;

  public static final String SERIALIZED_NAME_DAMAGE_PER_MINUTE = "damagePerMinute";
  @SerializedName(SERIALIZED_NAME_DAMAGE_PER_MINUTE)
  private Double damagePerMinute;

  public static final String SERIALIZED_NAME_DAMAGE_TAKEN_ON_TEAM_PERCENTAGE = "damageTakenOnTeamPercentage";
  @SerializedName(SERIALIZED_NAME_DAMAGE_TAKEN_ON_TEAM_PERCENTAGE)
  private Double damageTakenOnTeamPercentage;

  public static final String SERIALIZED_NAME_DANCED_WITH_RIFT_HERALD = "dancedWithRiftHerald";
  @SerializedName(SERIALIZED_NAME_DANCED_WITH_RIFT_HERALD)
  private Double dancedWithRiftHerald;

  public static final String SERIALIZED_NAME_DEATHS_BY_ENEMY_CHAMPS = "deathsByEnemyChamps";
  @SerializedName(SERIALIZED_NAME_DEATHS_BY_ENEMY_CHAMPS)
  private Double deathsByEnemyChamps;

  public static final String SERIALIZED_NAME_DODGE_SKILL_SHOTS_SMALL_WINDOW = "dodgeSkillShotsSmallWindow";
  @SerializedName(SERIALIZED_NAME_DODGE_SKILL_SHOTS_SMALL_WINDOW)
  private Double dodgeSkillShotsSmallWindow;

  public static final String SERIALIZED_NAME_DOUBLE_ACES = "doubleAces";
  @SerializedName(SERIALIZED_NAME_DOUBLE_ACES)
  private Double doubleAces;

  public static final String SERIALIZED_NAME_DRAGON_TAKEDOWNS = "dragonTakedowns";
  @SerializedName(SERIALIZED_NAME_DRAGON_TAKEDOWNS)
  private Double dragonTakedowns;

  public static final String SERIALIZED_NAME_EARLIEST_BARON = "earliestBaron";
  @SerializedName(SERIALIZED_NAME_EARLIEST_BARON)
  private Double earliestBaron;

  public static final String SERIALIZED_NAME_EARLIEST_DRAGON_TAKEDOWN = "earliestDragonTakedown";
  @SerializedName(SERIALIZED_NAME_EARLIEST_DRAGON_TAKEDOWN)
  private Double earliestDragonTakedown;

  public static final String SERIALIZED_NAME_EARLIEST_ELDER_DRAGON = "earliestElderDragon";
  @SerializedName(SERIALIZED_NAME_EARLIEST_ELDER_DRAGON)
  private Double earliestElderDragon;

  public static final String SERIALIZED_NAME_EARLY_LANING_PHASE_GOLD_EXP_ADVANTAGE = "earlyLaningPhaseGoldExpAdvantage";
  @SerializedName(SERIALIZED_NAME_EARLY_LANING_PHASE_GOLD_EXP_ADVANTAGE)
  private Double earlyLaningPhaseGoldExpAdvantage;

  public static final String SERIALIZED_NAME_EFFECTIVE_HEAL_AND_SHIELDING = "effectiveHealAndShielding";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_HEAL_AND_SHIELDING)
  private Double effectiveHealAndShielding;

  public static final String SERIALIZED_NAME_ELDER_DRAGON_KILLS_WITH_OPPOSING_SOUL = "elderDragonKillsWithOpposingSoul";
  @SerializedName(SERIALIZED_NAME_ELDER_DRAGON_KILLS_WITH_OPPOSING_SOUL)
  private Double elderDragonKillsWithOpposingSoul;

  public static final String SERIALIZED_NAME_ELDER_DRAGON_MULTIKILLS = "elderDragonMultikills";
  @SerializedName(SERIALIZED_NAME_ELDER_DRAGON_MULTIKILLS)
  private Double elderDragonMultikills;

  public static final String SERIALIZED_NAME_ENEMY_CHAMPION_IMMOBILIZATIONS = "enemyChampionImmobilizations";
  @SerializedName(SERIALIZED_NAME_ENEMY_CHAMPION_IMMOBILIZATIONS)
  private Double enemyChampionImmobilizations;

  public static final String SERIALIZED_NAME_ENEMY_JUNGLE_MONSTER_KILLS = "enemyJungleMonsterKills";
  @SerializedName(SERIALIZED_NAME_ENEMY_JUNGLE_MONSTER_KILLS)
  private Double enemyJungleMonsterKills;

  public static final String SERIALIZED_NAME_EPIC_MONSTER_KILLS_NEAR_ENEMY_JUNGLER = "epicMonsterKillsNearEnemyJungler";
  @SerializedName(SERIALIZED_NAME_EPIC_MONSTER_KILLS_NEAR_ENEMY_JUNGLER)
  private Double epicMonsterKillsNearEnemyJungler;

  public static final String SERIALIZED_NAME_EPIC_MONSTER_KILLS_WITHIN30_SECONDS_OF_SPAWN = "epicMonsterKillsWithin30SecondsOfSpawn";
  @SerializedName(SERIALIZED_NAME_EPIC_MONSTER_KILLS_WITHIN30_SECONDS_OF_SPAWN)
  private Double epicMonsterKillsWithin30SecondsOfSpawn;

  public static final String SERIALIZED_NAME_EPIC_MONSTER_STEALS = "epicMonsterSteals";
  @SerializedName(SERIALIZED_NAME_EPIC_MONSTER_STEALS)
  private Double epicMonsterSteals;

  public static final String SERIALIZED_NAME_EPIC_MONSTER_STOLEN_WITHOUT_SMITE = "epicMonsterStolenWithoutSmite";
  @SerializedName(SERIALIZED_NAME_EPIC_MONSTER_STOLEN_WITHOUT_SMITE)
  private Double epicMonsterStolenWithoutSmite;

  public static final String SERIALIZED_NAME_FASTER_SUPPORT_QUEST_COMPLETION = "fasterSupportQuestCompletion";
  @SerializedName(SERIALIZED_NAME_FASTER_SUPPORT_QUEST_COMPLETION)
  private Double fasterSupportQuestCompletion;

  public static final String SERIALIZED_NAME_FASTEST_LEGENDARY = "fastestLegendary";
  @SerializedName(SERIALIZED_NAME_FASTEST_LEGENDARY)
  private Double fastestLegendary;

  public static final String SERIALIZED_NAME_FIRST_TURRET_KILLED = "firstTurretKilled";
  @SerializedName(SERIALIZED_NAME_FIRST_TURRET_KILLED)
  private Double firstTurretKilled;

  public static final String SERIALIZED_NAME_FIRST_TURRET_KILLED_TIME = "firstTurretKilledTime";
  @SerializedName(SERIALIZED_NAME_FIRST_TURRET_KILLED_TIME)
  private Double firstTurretKilledTime;

  public static final String SERIALIZED_NAME_FLAWLESS_ACES = "flawlessAces";
  @SerializedName(SERIALIZED_NAME_FLAWLESS_ACES)
  private Double flawlessAces;

  public static final String SERIALIZED_NAME_FULL_TEAM_TAKEDOWN = "fullTeamTakedown";
  @SerializedName(SERIALIZED_NAME_FULL_TEAM_TAKEDOWN)
  private Double fullTeamTakedown;

  public static final String SERIALIZED_NAME_GAME_LENGTH = "gameLength";
  @SerializedName(SERIALIZED_NAME_GAME_LENGTH)
  private Double gameLength;

  public static final String SERIALIZED_NAME_GET_TAKEDOWNS_IN_ALL_LANES_EARLY_JUNGLE_AS_LANER = "getTakedownsInAllLanesEarlyJungleAsLaner";
  @SerializedName(SERIALIZED_NAME_GET_TAKEDOWNS_IN_ALL_LANES_EARLY_JUNGLE_AS_LANER)
  private Double getTakedownsInAllLanesEarlyJungleAsLaner;

  public static final String SERIALIZED_NAME_GOLD_PER_MINUTE = "goldPerMinute";
  @SerializedName(SERIALIZED_NAME_GOLD_PER_MINUTE)
  private Double goldPerMinute;

  public static final String SERIALIZED_NAME_HAD_AFK_TEAMMATE = "hadAfkTeammate";
  @SerializedName(SERIALIZED_NAME_HAD_AFK_TEAMMATE)
  private Double hadAfkTeammate;

  public static final String SERIALIZED_NAME_HAD_OPEN_NEXUS = "hadOpenNexus";
  @SerializedName(SERIALIZED_NAME_HAD_OPEN_NEXUS)
  private Double hadOpenNexus;

  public static final String SERIALIZED_NAME_HIGHEST_CHAMPION_DAMAGE = "highestChampionDamage";
  @SerializedName(SERIALIZED_NAME_HIGHEST_CHAMPION_DAMAGE)
  private Double highestChampionDamage;

  public static final String SERIALIZED_NAME_HIGHEST_CROWD_CONTROL_SCORE = "highestCrowdControlScore";
  @SerializedName(SERIALIZED_NAME_HIGHEST_CROWD_CONTROL_SCORE)
  private Double highestCrowdControlScore;

  public static final String SERIALIZED_NAME_HIGHEST_WARD_KILLS = "highestWardKills";
  @SerializedName(SERIALIZED_NAME_HIGHEST_WARD_KILLS)
  private Double highestWardKills;

  public static final String SERIALIZED_NAME_IMMOBILIZE_AND_KILL_WITH_ALLY = "immobilizeAndKillWithAlly";
  @SerializedName(SERIALIZED_NAME_IMMOBILIZE_AND_KILL_WITH_ALLY)
  private Double immobilizeAndKillWithAlly;

  public static final String SERIALIZED_NAME_INITIAL_BUFF_COUNT = "initialBuffCount";
  @SerializedName(SERIALIZED_NAME_INITIAL_BUFF_COUNT)
  private Double initialBuffCount;

  public static final String SERIALIZED_NAME_INITIAL_CRAB_COUNT = "initialCrabCount";
  @SerializedName(SERIALIZED_NAME_INITIAL_CRAB_COUNT)
  private Double initialCrabCount;

  public static final String SERIALIZED_NAME_JUNGLE_CS_BEFORE10_MINUTES = "jungleCsBefore10Minutes";
  @SerializedName(SERIALIZED_NAME_JUNGLE_CS_BEFORE10_MINUTES)
  private Double jungleCsBefore10Minutes;

  public static final String SERIALIZED_NAME_JUNGLER_KILLS_EARLY_JUNGLE = "junglerKillsEarlyJungle";
  @SerializedName(SERIALIZED_NAME_JUNGLER_KILLS_EARLY_JUNGLE)
  private Double junglerKillsEarlyJungle;

  public static final String SERIALIZED_NAME_JUNGLER_TAKEDOWNS_NEAR_DAMAGED_EPIC_MONSTER = "junglerTakedownsNearDamagedEpicMonster";
  @SerializedName(SERIALIZED_NAME_JUNGLER_TAKEDOWNS_NEAR_DAMAGED_EPIC_MONSTER)
  private Double junglerTakedownsNearDamagedEpicMonster;

  public static final String SERIALIZED_NAME_KDA = "kda";
  @SerializedName(SERIALIZED_NAME_KDA)
  private Double kda;

  public static final String SERIALIZED_NAME_KILL_AFTER_HIDDEN_WITH_ALLY = "killAfterHiddenWithAlly";
  @SerializedName(SERIALIZED_NAME_KILL_AFTER_HIDDEN_WITH_ALLY)
  private Double killAfterHiddenWithAlly;

  public static final String SERIALIZED_NAME_KILLED_CHAMP_TOOK_FULL_TEAM_DAMAGE_SURVIVED = "killedChampTookFullTeamDamageSurvived";
  @SerializedName(SERIALIZED_NAME_KILLED_CHAMP_TOOK_FULL_TEAM_DAMAGE_SURVIVED)
  private Double killedChampTookFullTeamDamageSurvived;

  public static final String SERIALIZED_NAME_KILLING_SPREES = "killingSprees";
  @SerializedName(SERIALIZED_NAME_KILLING_SPREES)
  private Double killingSprees;

  public static final String SERIALIZED_NAME_KILL_PARTICIPATION = "killParticipation";
  @SerializedName(SERIALIZED_NAME_KILL_PARTICIPATION)
  private Double killParticipation;

  public static final String SERIALIZED_NAME_KILLS_NEAR_ENEMY_TURRET = "killsNearEnemyTurret";
  @SerializedName(SERIALIZED_NAME_KILLS_NEAR_ENEMY_TURRET)
  private Double killsNearEnemyTurret;

  public static final String SERIALIZED_NAME_KILLS_ON_LANERS_EARLY_JUNGLE_AS_JUNGLER = "killsOnLanersEarlyJungleAsJungler";
  @SerializedName(SERIALIZED_NAME_KILLS_ON_LANERS_EARLY_JUNGLE_AS_JUNGLER)
  private Double killsOnLanersEarlyJungleAsJungler;

  public static final String SERIALIZED_NAME_KILLS_ON_OTHER_LANES_EARLY_JUNGLE_AS_LANER = "killsOnOtherLanesEarlyJungleAsLaner";
  @SerializedName(SERIALIZED_NAME_KILLS_ON_OTHER_LANES_EARLY_JUNGLE_AS_LANER)
  private Double killsOnOtherLanesEarlyJungleAsLaner;

  public static final String SERIALIZED_NAME_KILLS_ON_RECENTLY_HEALED_BY_ARAM_PACK = "killsOnRecentlyHealedByAramPack";
  @SerializedName(SERIALIZED_NAME_KILLS_ON_RECENTLY_HEALED_BY_ARAM_PACK)
  private Double killsOnRecentlyHealedByAramPack;

  public static final String SERIALIZED_NAME_KILLS_UNDER_OWN_TURRET = "killsUnderOwnTurret";
  @SerializedName(SERIALIZED_NAME_KILLS_UNDER_OWN_TURRET)
  private Double killsUnderOwnTurret;

  public static final String SERIALIZED_NAME_KILLS_WITH_HELP_FROM_EPIC_MONSTER = "killsWithHelpFromEpicMonster";
  @SerializedName(SERIALIZED_NAME_KILLS_WITH_HELP_FROM_EPIC_MONSTER)
  private Double killsWithHelpFromEpicMonster;

  public static final String SERIALIZED_NAME_KNOCK_ENEMY_INTO_TEAM_AND_KILL = "knockEnemyIntoTeamAndKill";
  @SerializedName(SERIALIZED_NAME_KNOCK_ENEMY_INTO_TEAM_AND_KILL)
  private Double knockEnemyIntoTeamAndKill;

  public static final String SERIALIZED_NAME_K_TURRETS_DESTROYED_BEFORE_PLATES_FALL = "kTurretsDestroyedBeforePlatesFall";
  @SerializedName(SERIALIZED_NAME_K_TURRETS_DESTROYED_BEFORE_PLATES_FALL)
  private Double kTurretsDestroyedBeforePlatesFall;

  public static final String SERIALIZED_NAME_LAND_SKILL_SHOTS_EARLY_GAME = "landSkillShotsEarlyGame";
  @SerializedName(SERIALIZED_NAME_LAND_SKILL_SHOTS_EARLY_GAME)
  private Double landSkillShotsEarlyGame;

  public static final String SERIALIZED_NAME_LANE_MINIONS_FIRST10_MINUTES = "laneMinionsFirst10Minutes";
  @SerializedName(SERIALIZED_NAME_LANE_MINIONS_FIRST10_MINUTES)
  private Double laneMinionsFirst10Minutes;

  public static final String SERIALIZED_NAME_LANING_PHASE_GOLD_EXP_ADVANTAGE = "laningPhaseGoldExpAdvantage";
  @SerializedName(SERIALIZED_NAME_LANING_PHASE_GOLD_EXP_ADVANTAGE)
  private Double laningPhaseGoldExpAdvantage;

  public static final String SERIALIZED_NAME_LEGENDARY_COUNT = "legendaryCount";
  @SerializedName(SERIALIZED_NAME_LEGENDARY_COUNT)
  private Double legendaryCount;

  public static final String SERIALIZED_NAME_LOST_AN_INHIBITOR = "lostAnInhibitor";
  @SerializedName(SERIALIZED_NAME_LOST_AN_INHIBITOR)
  private Double lostAnInhibitor;

  public static final String SERIALIZED_NAME_MAX_CS_ADVANTAGE_ON_LANE_OPPONENT = "maxCsAdvantageOnLaneOpponent";
  @SerializedName(SERIALIZED_NAME_MAX_CS_ADVANTAGE_ON_LANE_OPPONENT)
  private Double maxCsAdvantageOnLaneOpponent;

  public static final String SERIALIZED_NAME_MAX_KILL_DEFICIT = "maxKillDeficit";
  @SerializedName(SERIALIZED_NAME_MAX_KILL_DEFICIT)
  private Double maxKillDeficit;

  public static final String SERIALIZED_NAME_MAX_LEVEL_LEAD_LANE_OPPONENT = "maxLevelLeadLaneOpponent";
  @SerializedName(SERIALIZED_NAME_MAX_LEVEL_LEAD_LANE_OPPONENT)
  private Double maxLevelLeadLaneOpponent;

  public static final String SERIALIZED_NAME_MEJAIS_FULL_STACK_IN_TIME = "mejaisFullStackInTime";
  @SerializedName(SERIALIZED_NAME_MEJAIS_FULL_STACK_IN_TIME)
  private Double mejaisFullStackInTime;

  public static final String SERIALIZED_NAME_MORE_ENEMY_JUNGLE_THAN_OPPONENT = "moreEnemyJungleThanOpponent";
  @SerializedName(SERIALIZED_NAME_MORE_ENEMY_JUNGLE_THAN_OPPONENT)
  private Double moreEnemyJungleThanOpponent;

  public static final String SERIALIZED_NAME_MOST_WARDS_DESTROYED_ONE_SWEEPER = "mostWardsDestroyedOneSweeper";
  @SerializedName(SERIALIZED_NAME_MOST_WARDS_DESTROYED_ONE_SWEEPER)
  private Double mostWardsDestroyedOneSweeper;

  public static final String SERIALIZED_NAME_MULTI_KILL_ONE_SPELL = "multiKillOneSpell";
  @SerializedName(SERIALIZED_NAME_MULTI_KILL_ONE_SPELL)
  private Double multiKillOneSpell;

  public static final String SERIALIZED_NAME_MULTIKILLS = "multikills";
  @SerializedName(SERIALIZED_NAME_MULTIKILLS)
  private Double multikills;

  public static final String SERIALIZED_NAME_MULTIKILLS_AFTER_AGGRESSIVE_FLASH = "multikillsAfterAggressiveFlash";
  @SerializedName(SERIALIZED_NAME_MULTIKILLS_AFTER_AGGRESSIVE_FLASH)
  private Double multikillsAfterAggressiveFlash;

  public static final String SERIALIZED_NAME_MULTI_TURRET_RIFT_HERALD_COUNT = "multiTurretRiftHeraldCount";
  @SerializedName(SERIALIZED_NAME_MULTI_TURRET_RIFT_HERALD_COUNT)
  private Double multiTurretRiftHeraldCount;

  public static final String SERIALIZED_NAME_MYTHIC_ITEM_USED = "mythicItemUsed";
  @SerializedName(SERIALIZED_NAME_MYTHIC_ITEM_USED)
  private Double mythicItemUsed;

  public static final String SERIALIZED_NAME_OUTER_TURRET_EXECUTES_BEFORE10_MINUTES = "outerTurretExecutesBefore10Minutes";
  @SerializedName(SERIALIZED_NAME_OUTER_TURRET_EXECUTES_BEFORE10_MINUTES)
  private Double outerTurretExecutesBefore10Minutes;

  public static final String SERIALIZED_NAME_OUTNUMBERED_KILLS = "outnumberedKills";
  @SerializedName(SERIALIZED_NAME_OUTNUMBERED_KILLS)
  private Double outnumberedKills;

  public static final String SERIALIZED_NAME_OUTNUMBERED_NEXUS_KILL = "outnumberedNexusKill";
  @SerializedName(SERIALIZED_NAME_OUTNUMBERED_NEXUS_KILL)
  private Double outnumberedNexusKill;

  public static final String SERIALIZED_NAME_PERFECT_DRAGON_SOULS_TAKEN = "perfectDragonSoulsTaken";
  @SerializedName(SERIALIZED_NAME_PERFECT_DRAGON_SOULS_TAKEN)
  private Double perfectDragonSoulsTaken;

  public static final String SERIALIZED_NAME_PERFECT_GAME = "perfectGame";
  @SerializedName(SERIALIZED_NAME_PERFECT_GAME)
  private Double perfectGame;

  public static final String SERIALIZED_NAME_PICK_KILL_WITH_ALLY = "pickKillWithAlly";
  @SerializedName(SERIALIZED_NAME_PICK_KILL_WITH_ALLY)
  private Double pickKillWithAlly;

  public static final String SERIALIZED_NAME_PLAYED_CHAMP_SELECT_POSITION = "playedChampSelectPosition";
  @SerializedName(SERIALIZED_NAME_PLAYED_CHAMP_SELECT_POSITION)
  private Double playedChampSelectPosition;

  public static final String SERIALIZED_NAME_PORO_EXPLOSIONS = "poroExplosions";
  @SerializedName(SERIALIZED_NAME_PORO_EXPLOSIONS)
  private Double poroExplosions;

  public static final String SERIALIZED_NAME_QUICK_CLEANSE = "quickCleanse";
  @SerializedName(SERIALIZED_NAME_QUICK_CLEANSE)
  private Double quickCleanse;

  public static final String SERIALIZED_NAME_QUICK_FIRST_TURRET = "quickFirstTurret";
  @SerializedName(SERIALIZED_NAME_QUICK_FIRST_TURRET)
  private Double quickFirstTurret;

  public static final String SERIALIZED_NAME_QUICK_SOLO_KILLS = "quickSoloKills";
  @SerializedName(SERIALIZED_NAME_QUICK_SOLO_KILLS)
  private Double quickSoloKills;

  public static final String SERIALIZED_NAME_RIFT_HERALD_TAKEDOWNS = "riftHeraldTakedowns";
  @SerializedName(SERIALIZED_NAME_RIFT_HERALD_TAKEDOWNS)
  private Double riftHeraldTakedowns;

  public static final String SERIALIZED_NAME_SAVE_ALLY_FROM_DEATH = "saveAllyFromDeath";
  @SerializedName(SERIALIZED_NAME_SAVE_ALLY_FROM_DEATH)
  private Double saveAllyFromDeath;

  public static final String SERIALIZED_NAME_SCUTTLE_CRAB_KILLS = "scuttleCrabKills";
  @SerializedName(SERIALIZED_NAME_SCUTTLE_CRAB_KILLS)
  private Double scuttleCrabKills;

  public static final String SERIALIZED_NAME_SHORTEST_TIME_TO_ACE_FROM_FIRST_TAKEDOWN = "shortestTimeToAceFromFirstTakedown";
  @SerializedName(SERIALIZED_NAME_SHORTEST_TIME_TO_ACE_FROM_FIRST_TAKEDOWN)
  private Double shortestTimeToAceFromFirstTakedown;

  public static final String SERIALIZED_NAME_SKILLSHOTS_DODGED = "skillshotsDodged";
  @SerializedName(SERIALIZED_NAME_SKILLSHOTS_DODGED)
  private Double skillshotsDodged;

  public static final String SERIALIZED_NAME_SKILLSHOTS_HIT = "skillshotsHit";
  @SerializedName(SERIALIZED_NAME_SKILLSHOTS_HIT)
  private Double skillshotsHit;

  public static final String SERIALIZED_NAME_SNOWBALLS_HIT = "snowballsHit";
  @SerializedName(SERIALIZED_NAME_SNOWBALLS_HIT)
  private Double snowballsHit;

  public static final String SERIALIZED_NAME_SOLO_BARON_KILLS = "soloBaronKills";
  @SerializedName(SERIALIZED_NAME_SOLO_BARON_KILLS)
  private Double soloBaronKills;

  public static final String SERIALIZED_NAME_SOLO_KILLS = "soloKills";
  @SerializedName(SERIALIZED_NAME_SOLO_KILLS)
  private Double soloKills;

  public static final String SERIALIZED_NAME_SOLO_TURRETS_LATEGAME = "soloTurretsLategame";
  @SerializedName(SERIALIZED_NAME_SOLO_TURRETS_LATEGAME)
  private Double soloTurretsLategame;

  public static final String SERIALIZED_NAME_STEALTH_WARDS_PLACED = "stealthWardsPlaced";
  @SerializedName(SERIALIZED_NAME_STEALTH_WARDS_PLACED)
  private Double stealthWardsPlaced;

  public static final String SERIALIZED_NAME_SURVIVED_SINGLE_DIGIT_HP_COUNT = "survivedSingleDigitHpCount";
  @SerializedName(SERIALIZED_NAME_SURVIVED_SINGLE_DIGIT_HP_COUNT)
  private Double survivedSingleDigitHpCount;

  public static final String SERIALIZED_NAME_SURVIVED_THREE_IMMOBILIZES_IN_FIGHT = "survivedThreeImmobilizesInFight";
  @SerializedName(SERIALIZED_NAME_SURVIVED_THREE_IMMOBILIZES_IN_FIGHT)
  private Double survivedThreeImmobilizesInFight;

  public static final String SERIALIZED_NAME_TAKEDOWN_ON_FIRST_TURRET = "takedownOnFirstTurret";
  @SerializedName(SERIALIZED_NAME_TAKEDOWN_ON_FIRST_TURRET)
  private Double takedownOnFirstTurret;

  public static final String SERIALIZED_NAME_TAKEDOWNS = "takedowns";
  @SerializedName(SERIALIZED_NAME_TAKEDOWNS)
  private Double takedowns;

  public static final String SERIALIZED_NAME_TAKEDOWNS_AFTER_GAINING_LEVEL_ADVANTAGE = "takedownsAfterGainingLevelAdvantage";
  @SerializedName(SERIALIZED_NAME_TAKEDOWNS_AFTER_GAINING_LEVEL_ADVANTAGE)
  private Double takedownsAfterGainingLevelAdvantage;

  public static final String SERIALIZED_NAME_TAKEDOWNS_BEFORE_JUNGLE_MINION_SPAWN = "takedownsBeforeJungleMinionSpawn";
  @SerializedName(SERIALIZED_NAME_TAKEDOWNS_BEFORE_JUNGLE_MINION_SPAWN)
  private Double takedownsBeforeJungleMinionSpawn;

  public static final String SERIALIZED_NAME_TAKEDOWNS_FIRST25_MINUTES = "takedownsFirst25Minutes";
  @SerializedName(SERIALIZED_NAME_TAKEDOWNS_FIRST25_MINUTES)
  private Double takedownsFirst25Minutes;

  public static final String SERIALIZED_NAME_TAKEDOWNS_FIRST_X_MINUTES = "takedownsFirstXMinutes";
  @SerializedName(SERIALIZED_NAME_TAKEDOWNS_FIRST_X_MINUTES)
  private Double takedownsFirstXMinutes;

  public static final String SERIALIZED_NAME_TAKEDOWNS_IN_ALCOVE = "takedownsInAlcove";
  @SerializedName(SERIALIZED_NAME_TAKEDOWNS_IN_ALCOVE)
  private Double takedownsInAlcove;

  public static final String SERIALIZED_NAME_TAKEDOWNS_IN_ENEMY_FOUNTAIN = "takedownsInEnemyFountain";
  @SerializedName(SERIALIZED_NAME_TAKEDOWNS_IN_ENEMY_FOUNTAIN)
  private Double takedownsInEnemyFountain;

  public static final String SERIALIZED_NAME_TEAM_BARON_KILLS = "teamBaronKills";
  @SerializedName(SERIALIZED_NAME_TEAM_BARON_KILLS)
  private Double teamBaronKills;

  public static final String SERIALIZED_NAME_TEAM_DAMAGE_PERCENTAGE = "teamDamagePercentage";
  @SerializedName(SERIALIZED_NAME_TEAM_DAMAGE_PERCENTAGE)
  private Double teamDamagePercentage;

  public static final String SERIALIZED_NAME_TEAM_ELDER_DRAGON_KILLS = "teamElderDragonKills";
  @SerializedName(SERIALIZED_NAME_TEAM_ELDER_DRAGON_KILLS)
  private Double teamElderDragonKills;

  public static final String SERIALIZED_NAME_TEAM_RIFT_HERALD_KILLS = "teamRiftHeraldKills";
  @SerializedName(SERIALIZED_NAME_TEAM_RIFT_HERALD_KILLS)
  private Double teamRiftHeraldKills;

  public static final String SERIALIZED_NAME_TELEPORT_TAKEDOWNS = "teleportTakedowns";
  @SerializedName(SERIALIZED_NAME_TELEPORT_TAKEDOWNS)
  private Double teleportTakedowns;

  public static final String SERIALIZED_NAME_THIRD_INHIBITOR_DESTROYED_TIME = "thirdInhibitorDestroyedTime";
  @SerializedName(SERIALIZED_NAME_THIRD_INHIBITOR_DESTROYED_TIME)
  private Double thirdInhibitorDestroyedTime;

  public static final String SERIALIZED_NAME_THREE_WARDS_ONE_SWEEPER_COUNT = "threeWardsOneSweeperCount";
  @SerializedName(SERIALIZED_NAME_THREE_WARDS_ONE_SWEEPER_COUNT)
  private Double threeWardsOneSweeperCount;

  public static final String SERIALIZED_NAME_TOOK_LARGE_DAMAGE_SURVIVED = "tookLargeDamageSurvived";
  @SerializedName(SERIALIZED_NAME_TOOK_LARGE_DAMAGE_SURVIVED)
  private Double tookLargeDamageSurvived;

  public static final String SERIALIZED_NAME_TURRET_PLATES_TAKEN = "turretPlatesTaken";
  @SerializedName(SERIALIZED_NAME_TURRET_PLATES_TAKEN)
  private Double turretPlatesTaken;

  public static final String SERIALIZED_NAME_TURRETS_TAKEN_WITH_RIFT_HERALD = "turretsTakenWithRiftHerald";
  @SerializedName(SERIALIZED_NAME_TURRETS_TAKEN_WITH_RIFT_HERALD)
  private Double turretsTakenWithRiftHerald;

  public static final String SERIALIZED_NAME_TURRET_TAKEDOWNS = "turretTakedowns";
  @SerializedName(SERIALIZED_NAME_TURRET_TAKEDOWNS)
  private Double turretTakedowns;

  public static final String SERIALIZED_NAME_TWENTY_MINIONS_IN3_SECONDS_COUNT = "twentyMinionsIn3SecondsCount";
  @SerializedName(SERIALIZED_NAME_TWENTY_MINIONS_IN3_SECONDS_COUNT)
  private Double twentyMinionsIn3SecondsCount;

  public static final String SERIALIZED_NAME_TWO_WARDS_ONE_SWEEPER_COUNT = "twoWardsOneSweeperCount";
  @SerializedName(SERIALIZED_NAME_TWO_WARDS_ONE_SWEEPER_COUNT)
  private Integer twoWardsOneSweeperCount;

  public static final String SERIALIZED_NAME_UNSEEN_RECALLS = "unseenRecalls";
  @SerializedName(SERIALIZED_NAME_UNSEEN_RECALLS)
  private Double unseenRecalls;

  public static final String SERIALIZED_NAME_VISION_SCORE_ADVANTAGE_LANE_OPPONENT = "visionScoreAdvantageLaneOpponent";
  @SerializedName(SERIALIZED_NAME_VISION_SCORE_ADVANTAGE_LANE_OPPONENT)
  private Double visionScoreAdvantageLaneOpponent;

  public static final String SERIALIZED_NAME_VISION_SCORE_PER_MINUTE = "visionScorePerMinute";
  @SerializedName(SERIALIZED_NAME_VISION_SCORE_PER_MINUTE)
  private Double visionScorePerMinute;

  public static final String SERIALIZED_NAME_WARDS_GUARDED = "wardsGuarded";
  @SerializedName(SERIALIZED_NAME_WARDS_GUARDED)
  private Double wardsGuarded;

  public static final String SERIALIZED_NAME_WARD_TAKEDOWNS = "wardTakedowns";
  @SerializedName(SERIALIZED_NAME_WARD_TAKEDOWNS)
  private Double wardTakedowns;

  public static final String SERIALIZED_NAME_WARD_TAKEDOWNS_BEFORE20_M = "wardTakedownsBefore20M";
  @SerializedName(SERIALIZED_NAME_WARD_TAKEDOWNS_BEFORE20_M)
  private Double wardTakedownsBefore20M;

  public static final String SERIALIZED_NAME_LEGENDARY_ITEM_USED = "legendaryItemUsed";
  @SerializedName(SERIALIZED_NAME_LEGENDARY_ITEM_USED)
  private List<Integer> legendaryItemUsed;

  public MatchV5ParticipantChallenges() {
  }

  public MatchV5ParticipantChallenges _12assistStreakCount(Double _12assistStreakCount) {
    this._12assistStreakCount = _12assistStreakCount;
    return this;
  }

   /**
   * Get _12assistStreakCount
   * @return _12assistStreakCount
  **/
  @javax.annotation.Nullable
  public Double get12assistStreakCount() {
    return _12assistStreakCount;
  }

  public void set12assistStreakCount(Double _12assistStreakCount) {
    this._12assistStreakCount = _12assistStreakCount;
  }


  public MatchV5ParticipantChallenges abilityUses(Double abilityUses) {
    this.abilityUses = abilityUses;
    return this;
  }

   /**
   * Get abilityUses
   * @return abilityUses
  **/
  @javax.annotation.Nullable
  public Double getAbilityUses() {
    return abilityUses;
  }

  public void setAbilityUses(Double abilityUses) {
    this.abilityUses = abilityUses;
  }


  public MatchV5ParticipantChallenges acesBefore15Minutes(Double acesBefore15Minutes) {
    this.acesBefore15Minutes = acesBefore15Minutes;
    return this;
  }

   /**
   * Get acesBefore15Minutes
   * @return acesBefore15Minutes
  **/
  @javax.annotation.Nullable
  public Double getAcesBefore15Minutes() {
    return acesBefore15Minutes;
  }

  public void setAcesBefore15Minutes(Double acesBefore15Minutes) {
    this.acesBefore15Minutes = acesBefore15Minutes;
  }


  public MatchV5ParticipantChallenges alliedJungleMonsterKills(Double alliedJungleMonsterKills) {
    this.alliedJungleMonsterKills = alliedJungleMonsterKills;
    return this;
  }

   /**
   * Get alliedJungleMonsterKills
   * @return alliedJungleMonsterKills
  **/
  @javax.annotation.Nullable
  public Double getAlliedJungleMonsterKills() {
    return alliedJungleMonsterKills;
  }

  public void setAlliedJungleMonsterKills(Double alliedJungleMonsterKills) {
    this.alliedJungleMonsterKills = alliedJungleMonsterKills;
  }


  public MatchV5ParticipantChallenges baronBuffGoldAdvantageOverThreshold(Double baronBuffGoldAdvantageOverThreshold) {
    this.baronBuffGoldAdvantageOverThreshold = baronBuffGoldAdvantageOverThreshold;
    return this;
  }

   /**
   * Get baronBuffGoldAdvantageOverThreshold
   * @return baronBuffGoldAdvantageOverThreshold
  **/
  @javax.annotation.Nullable
  public Double getBaronBuffGoldAdvantageOverThreshold() {
    return baronBuffGoldAdvantageOverThreshold;
  }

  public void setBaronBuffGoldAdvantageOverThreshold(Double baronBuffGoldAdvantageOverThreshold) {
    this.baronBuffGoldAdvantageOverThreshold = baronBuffGoldAdvantageOverThreshold;
  }


  public MatchV5ParticipantChallenges baronTakedowns(Double baronTakedowns) {
    this.baronTakedowns = baronTakedowns;
    return this;
  }

   /**
   * Get baronTakedowns
   * @return baronTakedowns
  **/
  @javax.annotation.Nullable
  public Double getBaronTakedowns() {
    return baronTakedowns;
  }

  public void setBaronTakedowns(Double baronTakedowns) {
    this.baronTakedowns = baronTakedowns;
  }


  public MatchV5ParticipantChallenges blastConeOppositeOpponentCount(Double blastConeOppositeOpponentCount) {
    this.blastConeOppositeOpponentCount = blastConeOppositeOpponentCount;
    return this;
  }

   /**
   * Get blastConeOppositeOpponentCount
   * @return blastConeOppositeOpponentCount
  **/
  @javax.annotation.Nullable
  public Double getBlastConeOppositeOpponentCount() {
    return blastConeOppositeOpponentCount;
  }

  public void setBlastConeOppositeOpponentCount(Double blastConeOppositeOpponentCount) {
    this.blastConeOppositeOpponentCount = blastConeOppositeOpponentCount;
  }


  public MatchV5ParticipantChallenges bountyGold(Double bountyGold) {
    this.bountyGold = bountyGold;
    return this;
  }

   /**
   * Get bountyGold
   * @return bountyGold
  **/
  @javax.annotation.Nullable
  public Double getBountyGold() {
    return bountyGold;
  }

  public void setBountyGold(Double bountyGold) {
    this.bountyGold = bountyGold;
  }


  public MatchV5ParticipantChallenges buffsStolen(Double buffsStolen) {
    this.buffsStolen = buffsStolen;
    return this;
  }

   /**
   * Get buffsStolen
   * @return buffsStolen
  **/
  @javax.annotation.Nullable
  public Double getBuffsStolen() {
    return buffsStolen;
  }

  public void setBuffsStolen(Double buffsStolen) {
    this.buffsStolen = buffsStolen;
  }


  public MatchV5ParticipantChallenges completeSupportQuestInTime(Double completeSupportQuestInTime) {
    this.completeSupportQuestInTime = completeSupportQuestInTime;
    return this;
  }

   /**
   * Get completeSupportQuestInTime
   * @return completeSupportQuestInTime
  **/
  @javax.annotation.Nullable
  public Double getCompleteSupportQuestInTime() {
    return completeSupportQuestInTime;
  }

  public void setCompleteSupportQuestInTime(Double completeSupportQuestInTime) {
    this.completeSupportQuestInTime = completeSupportQuestInTime;
  }


  public MatchV5ParticipantChallenges controlWardsPlaced(Double controlWardsPlaced) {
    this.controlWardsPlaced = controlWardsPlaced;
    return this;
  }

   /**
   * Get controlWardsPlaced
   * @return controlWardsPlaced
  **/
  @javax.annotation.Nullable
  public Double getControlWardsPlaced() {
    return controlWardsPlaced;
  }

  public void setControlWardsPlaced(Double controlWardsPlaced) {
    this.controlWardsPlaced = controlWardsPlaced;
  }


  public MatchV5ParticipantChallenges controlWardTimeCoverageInRiverOrEnemyHalf(Double controlWardTimeCoverageInRiverOrEnemyHalf) {
    this.controlWardTimeCoverageInRiverOrEnemyHalf = controlWardTimeCoverageInRiverOrEnemyHalf;
    return this;
  }

   /**
   * Get controlWardTimeCoverageInRiverOrEnemyHalf
   * @return controlWardTimeCoverageInRiverOrEnemyHalf
  **/
  @javax.annotation.Nullable
  public Double getControlWardTimeCoverageInRiverOrEnemyHalf() {
    return controlWardTimeCoverageInRiverOrEnemyHalf;
  }

  public void setControlWardTimeCoverageInRiverOrEnemyHalf(Double controlWardTimeCoverageInRiverOrEnemyHalf) {
    this.controlWardTimeCoverageInRiverOrEnemyHalf = controlWardTimeCoverageInRiverOrEnemyHalf;
  }


  public MatchV5ParticipantChallenges damagePerMinute(Double damagePerMinute) {
    this.damagePerMinute = damagePerMinute;
    return this;
  }

   /**
   * Get damagePerMinute
   * @return damagePerMinute
  **/
  @javax.annotation.Nullable
  public Double getDamagePerMinute() {
    return damagePerMinute;
  }

  public void setDamagePerMinute(Double damagePerMinute) {
    this.damagePerMinute = damagePerMinute;
  }


  public MatchV5ParticipantChallenges damageTakenOnTeamPercentage(Double damageTakenOnTeamPercentage) {
    this.damageTakenOnTeamPercentage = damageTakenOnTeamPercentage;
    return this;
  }

   /**
   * Get damageTakenOnTeamPercentage
   * @return damageTakenOnTeamPercentage
  **/
  @javax.annotation.Nullable
  public Double getDamageTakenOnTeamPercentage() {
    return damageTakenOnTeamPercentage;
  }

  public void setDamageTakenOnTeamPercentage(Double damageTakenOnTeamPercentage) {
    this.damageTakenOnTeamPercentage = damageTakenOnTeamPercentage;
  }


  public MatchV5ParticipantChallenges dancedWithRiftHerald(Double dancedWithRiftHerald) {
    this.dancedWithRiftHerald = dancedWithRiftHerald;
    return this;
  }

   /**
   * Get dancedWithRiftHerald
   * @return dancedWithRiftHerald
  **/
  @javax.annotation.Nullable
  public Double getDancedWithRiftHerald() {
    return dancedWithRiftHerald;
  }

  public void setDancedWithRiftHerald(Double dancedWithRiftHerald) {
    this.dancedWithRiftHerald = dancedWithRiftHerald;
  }


  public MatchV5ParticipantChallenges deathsByEnemyChamps(Double deathsByEnemyChamps) {
    this.deathsByEnemyChamps = deathsByEnemyChamps;
    return this;
  }

   /**
   * Get deathsByEnemyChamps
   * @return deathsByEnemyChamps
  **/
  @javax.annotation.Nullable
  public Double getDeathsByEnemyChamps() {
    return deathsByEnemyChamps;
  }

  public void setDeathsByEnemyChamps(Double deathsByEnemyChamps) {
    this.deathsByEnemyChamps = deathsByEnemyChamps;
  }


  public MatchV5ParticipantChallenges dodgeSkillShotsSmallWindow(Double dodgeSkillShotsSmallWindow) {
    this.dodgeSkillShotsSmallWindow = dodgeSkillShotsSmallWindow;
    return this;
  }

   /**
   * Get dodgeSkillShotsSmallWindow
   * @return dodgeSkillShotsSmallWindow
  **/
  @javax.annotation.Nullable
  public Double getDodgeSkillShotsSmallWindow() {
    return dodgeSkillShotsSmallWindow;
  }

  public void setDodgeSkillShotsSmallWindow(Double dodgeSkillShotsSmallWindow) {
    this.dodgeSkillShotsSmallWindow = dodgeSkillShotsSmallWindow;
  }


  public MatchV5ParticipantChallenges doubleAces(Double doubleAces) {
    this.doubleAces = doubleAces;
    return this;
  }

   /**
   * Get doubleAces
   * @return doubleAces
  **/
  @javax.annotation.Nullable
  public Double getDoubleAces() {
    return doubleAces;
  }

  public void setDoubleAces(Double doubleAces) {
    this.doubleAces = doubleAces;
  }


  public MatchV5ParticipantChallenges dragonTakedowns(Double dragonTakedowns) {
    this.dragonTakedowns = dragonTakedowns;
    return this;
  }

   /**
   * Get dragonTakedowns
   * @return dragonTakedowns
  **/
  @javax.annotation.Nullable
  public Double getDragonTakedowns() {
    return dragonTakedowns;
  }

  public void setDragonTakedowns(Double dragonTakedowns) {
    this.dragonTakedowns = dragonTakedowns;
  }


  public MatchV5ParticipantChallenges earliestBaron(Double earliestBaron) {
    this.earliestBaron = earliestBaron;
    return this;
  }

   /**
   * Get earliestBaron
   * @return earliestBaron
  **/
  @javax.annotation.Nullable
  public Double getEarliestBaron() {
    return earliestBaron;
  }

  public void setEarliestBaron(Double earliestBaron) {
    this.earliestBaron = earliestBaron;
  }


  public MatchV5ParticipantChallenges earliestDragonTakedown(Double earliestDragonTakedown) {
    this.earliestDragonTakedown = earliestDragonTakedown;
    return this;
  }

   /**
   * Get earliestDragonTakedown
   * @return earliestDragonTakedown
  **/
  @javax.annotation.Nullable
  public Double getEarliestDragonTakedown() {
    return earliestDragonTakedown;
  }

  public void setEarliestDragonTakedown(Double earliestDragonTakedown) {
    this.earliestDragonTakedown = earliestDragonTakedown;
  }


  public MatchV5ParticipantChallenges earliestElderDragon(Double earliestElderDragon) {
    this.earliestElderDragon = earliestElderDragon;
    return this;
  }

   /**
   * Get earliestElderDragon
   * @return earliestElderDragon
  **/
  @javax.annotation.Nullable
  public Double getEarliestElderDragon() {
    return earliestElderDragon;
  }

  public void setEarliestElderDragon(Double earliestElderDragon) {
    this.earliestElderDragon = earliestElderDragon;
  }


  public MatchV5ParticipantChallenges earlyLaningPhaseGoldExpAdvantage(Double earlyLaningPhaseGoldExpAdvantage) {
    this.earlyLaningPhaseGoldExpAdvantage = earlyLaningPhaseGoldExpAdvantage;
    return this;
  }

   /**
   * Get earlyLaningPhaseGoldExpAdvantage
   * @return earlyLaningPhaseGoldExpAdvantage
  **/
  @javax.annotation.Nullable
  public Double getEarlyLaningPhaseGoldExpAdvantage() {
    return earlyLaningPhaseGoldExpAdvantage;
  }

  public void setEarlyLaningPhaseGoldExpAdvantage(Double earlyLaningPhaseGoldExpAdvantage) {
    this.earlyLaningPhaseGoldExpAdvantage = earlyLaningPhaseGoldExpAdvantage;
  }


  public MatchV5ParticipantChallenges effectiveHealAndShielding(Double effectiveHealAndShielding) {
    this.effectiveHealAndShielding = effectiveHealAndShielding;
    return this;
  }

   /**
   * Get effectiveHealAndShielding
   * @return effectiveHealAndShielding
  **/
  @javax.annotation.Nullable
  public Double getEffectiveHealAndShielding() {
    return effectiveHealAndShielding;
  }

  public void setEffectiveHealAndShielding(Double effectiveHealAndShielding) {
    this.effectiveHealAndShielding = effectiveHealAndShielding;
  }


  public MatchV5ParticipantChallenges elderDragonKillsWithOpposingSoul(Double elderDragonKillsWithOpposingSoul) {
    this.elderDragonKillsWithOpposingSoul = elderDragonKillsWithOpposingSoul;
    return this;
  }

   /**
   * Get elderDragonKillsWithOpposingSoul
   * @return elderDragonKillsWithOpposingSoul
  **/
  @javax.annotation.Nullable
  public Double getElderDragonKillsWithOpposingSoul() {
    return elderDragonKillsWithOpposingSoul;
  }

  public void setElderDragonKillsWithOpposingSoul(Double elderDragonKillsWithOpposingSoul) {
    this.elderDragonKillsWithOpposingSoul = elderDragonKillsWithOpposingSoul;
  }


  public MatchV5ParticipantChallenges elderDragonMultikills(Double elderDragonMultikills) {
    this.elderDragonMultikills = elderDragonMultikills;
    return this;
  }

   /**
   * Get elderDragonMultikills
   * @return elderDragonMultikills
  **/
  @javax.annotation.Nullable
  public Double getElderDragonMultikills() {
    return elderDragonMultikills;
  }

  public void setElderDragonMultikills(Double elderDragonMultikills) {
    this.elderDragonMultikills = elderDragonMultikills;
  }


  public MatchV5ParticipantChallenges enemyChampionImmobilizations(Double enemyChampionImmobilizations) {
    this.enemyChampionImmobilizations = enemyChampionImmobilizations;
    return this;
  }

   /**
   * Get enemyChampionImmobilizations
   * @return enemyChampionImmobilizations
  **/
  @javax.annotation.Nullable
  public Double getEnemyChampionImmobilizations() {
    return enemyChampionImmobilizations;
  }

  public void setEnemyChampionImmobilizations(Double enemyChampionImmobilizations) {
    this.enemyChampionImmobilizations = enemyChampionImmobilizations;
  }


  public MatchV5ParticipantChallenges enemyJungleMonsterKills(Double enemyJungleMonsterKills) {
    this.enemyJungleMonsterKills = enemyJungleMonsterKills;
    return this;
  }

   /**
   * Get enemyJungleMonsterKills
   * @return enemyJungleMonsterKills
  **/
  @javax.annotation.Nullable
  public Double getEnemyJungleMonsterKills() {
    return enemyJungleMonsterKills;
  }

  public void setEnemyJungleMonsterKills(Double enemyJungleMonsterKills) {
    this.enemyJungleMonsterKills = enemyJungleMonsterKills;
  }


  public MatchV5ParticipantChallenges epicMonsterKillsNearEnemyJungler(Double epicMonsterKillsNearEnemyJungler) {
    this.epicMonsterKillsNearEnemyJungler = epicMonsterKillsNearEnemyJungler;
    return this;
  }

   /**
   * Get epicMonsterKillsNearEnemyJungler
   * @return epicMonsterKillsNearEnemyJungler
  **/
  @javax.annotation.Nullable
  public Double getEpicMonsterKillsNearEnemyJungler() {
    return epicMonsterKillsNearEnemyJungler;
  }

  public void setEpicMonsterKillsNearEnemyJungler(Double epicMonsterKillsNearEnemyJungler) {
    this.epicMonsterKillsNearEnemyJungler = epicMonsterKillsNearEnemyJungler;
  }


  public MatchV5ParticipantChallenges epicMonsterKillsWithin30SecondsOfSpawn(Double epicMonsterKillsWithin30SecondsOfSpawn) {
    this.epicMonsterKillsWithin30SecondsOfSpawn = epicMonsterKillsWithin30SecondsOfSpawn;
    return this;
  }

   /**
   * Get epicMonsterKillsWithin30SecondsOfSpawn
   * @return epicMonsterKillsWithin30SecondsOfSpawn
  **/
  @javax.annotation.Nullable
  public Double getEpicMonsterKillsWithin30SecondsOfSpawn() {
    return epicMonsterKillsWithin30SecondsOfSpawn;
  }

  public void setEpicMonsterKillsWithin30SecondsOfSpawn(Double epicMonsterKillsWithin30SecondsOfSpawn) {
    this.epicMonsterKillsWithin30SecondsOfSpawn = epicMonsterKillsWithin30SecondsOfSpawn;
  }


  public MatchV5ParticipantChallenges epicMonsterSteals(Double epicMonsterSteals) {
    this.epicMonsterSteals = epicMonsterSteals;
    return this;
  }

   /**
   * Get epicMonsterSteals
   * @return epicMonsterSteals
  **/
  @javax.annotation.Nullable
  public Double getEpicMonsterSteals() {
    return epicMonsterSteals;
  }

  public void setEpicMonsterSteals(Double epicMonsterSteals) {
    this.epicMonsterSteals = epicMonsterSteals;
  }


  public MatchV5ParticipantChallenges epicMonsterStolenWithoutSmite(Double epicMonsterStolenWithoutSmite) {
    this.epicMonsterStolenWithoutSmite = epicMonsterStolenWithoutSmite;
    return this;
  }

   /**
   * Get epicMonsterStolenWithoutSmite
   * @return epicMonsterStolenWithoutSmite
  **/
  @javax.annotation.Nullable
  public Double getEpicMonsterStolenWithoutSmite() {
    return epicMonsterStolenWithoutSmite;
  }

  public void setEpicMonsterStolenWithoutSmite(Double epicMonsterStolenWithoutSmite) {
    this.epicMonsterStolenWithoutSmite = epicMonsterStolenWithoutSmite;
  }


  public MatchV5ParticipantChallenges fasterSupportQuestCompletion(Double fasterSupportQuestCompletion) {
    this.fasterSupportQuestCompletion = fasterSupportQuestCompletion;
    return this;
  }

   /**
   * Get fasterSupportQuestCompletion
   * @return fasterSupportQuestCompletion
  **/
  @javax.annotation.Nullable
  public Double getFasterSupportQuestCompletion() {
    return fasterSupportQuestCompletion;
  }

  public void setFasterSupportQuestCompletion(Double fasterSupportQuestCompletion) {
    this.fasterSupportQuestCompletion = fasterSupportQuestCompletion;
  }


  public MatchV5ParticipantChallenges fastestLegendary(Double fastestLegendary) {
    this.fastestLegendary = fastestLegendary;
    return this;
  }

   /**
   * Get fastestLegendary
   * @return fastestLegendary
  **/
  @javax.annotation.Nullable
  public Double getFastestLegendary() {
    return fastestLegendary;
  }

  public void setFastestLegendary(Double fastestLegendary) {
    this.fastestLegendary = fastestLegendary;
  }


  public MatchV5ParticipantChallenges firstTurretKilled(Double firstTurretKilled) {
    this.firstTurretKilled = firstTurretKilled;
    return this;
  }

   /**
   * Get firstTurretKilled
   * @return firstTurretKilled
  **/
  @javax.annotation.Nullable
  public Double getFirstTurretKilled() {
    return firstTurretKilled;
  }

  public void setFirstTurretKilled(Double firstTurretKilled) {
    this.firstTurretKilled = firstTurretKilled;
  }


  public MatchV5ParticipantChallenges firstTurretKilledTime(Double firstTurretKilledTime) {
    this.firstTurretKilledTime = firstTurretKilledTime;
    return this;
  }

   /**
   * Get firstTurretKilledTime
   * @return firstTurretKilledTime
  **/
  @javax.annotation.Nullable
  public Double getFirstTurretKilledTime() {
    return firstTurretKilledTime;
  }

  public void setFirstTurretKilledTime(Double firstTurretKilledTime) {
    this.firstTurretKilledTime = firstTurretKilledTime;
  }


  public MatchV5ParticipantChallenges flawlessAces(Double flawlessAces) {
    this.flawlessAces = flawlessAces;
    return this;
  }

   /**
   * Get flawlessAces
   * @return flawlessAces
  **/
  @javax.annotation.Nullable
  public Double getFlawlessAces() {
    return flawlessAces;
  }

  public void setFlawlessAces(Double flawlessAces) {
    this.flawlessAces = flawlessAces;
  }


  public MatchV5ParticipantChallenges fullTeamTakedown(Double fullTeamTakedown) {
    this.fullTeamTakedown = fullTeamTakedown;
    return this;
  }

   /**
   * Get fullTeamTakedown
   * @return fullTeamTakedown
  **/
  @javax.annotation.Nullable
  public Double getFullTeamTakedown() {
    return fullTeamTakedown;
  }

  public void setFullTeamTakedown(Double fullTeamTakedown) {
    this.fullTeamTakedown = fullTeamTakedown;
  }


  public MatchV5ParticipantChallenges gameLength(Double gameLength) {
    this.gameLength = gameLength;
    return this;
  }

   /**
   * Get gameLength
   * @return gameLength
  **/
  @javax.annotation.Nullable
  public Double getGameLength() {
    return gameLength;
  }

  public void setGameLength(Double gameLength) {
    this.gameLength = gameLength;
  }


  public MatchV5ParticipantChallenges getTakedownsInAllLanesEarlyJungleAsLaner(Double getTakedownsInAllLanesEarlyJungleAsLaner) {
    this.getTakedownsInAllLanesEarlyJungleAsLaner = getTakedownsInAllLanesEarlyJungleAsLaner;
    return this;
  }

   /**
   * Get getTakedownsInAllLanesEarlyJungleAsLaner
   * @return getTakedownsInAllLanesEarlyJungleAsLaner
  **/
  @javax.annotation.Nullable
  public Double getGetTakedownsInAllLanesEarlyJungleAsLaner() {
    return getTakedownsInAllLanesEarlyJungleAsLaner;
  }

  public void setGetTakedownsInAllLanesEarlyJungleAsLaner(Double getTakedownsInAllLanesEarlyJungleAsLaner) {
    this.getTakedownsInAllLanesEarlyJungleAsLaner = getTakedownsInAllLanesEarlyJungleAsLaner;
  }


  public MatchV5ParticipantChallenges goldPerMinute(Double goldPerMinute) {
    this.goldPerMinute = goldPerMinute;
    return this;
  }

   /**
   * Get goldPerMinute
   * @return goldPerMinute
  **/
  @javax.annotation.Nullable
  public Double getGoldPerMinute() {
    return goldPerMinute;
  }

  public void setGoldPerMinute(Double goldPerMinute) {
    this.goldPerMinute = goldPerMinute;
  }


  public MatchV5ParticipantChallenges hadAfkTeammate(Double hadAfkTeammate) {
    this.hadAfkTeammate = hadAfkTeammate;
    return this;
  }

   /**
   * Get hadAfkTeammate
   * @return hadAfkTeammate
  **/
  @javax.annotation.Nullable
  public Double getHadAfkTeammate() {
    return hadAfkTeammate;
  }

  public void setHadAfkTeammate(Double hadAfkTeammate) {
    this.hadAfkTeammate = hadAfkTeammate;
  }


  public MatchV5ParticipantChallenges hadOpenNexus(Double hadOpenNexus) {
    this.hadOpenNexus = hadOpenNexus;
    return this;
  }

   /**
   * Get hadOpenNexus
   * @return hadOpenNexus
  **/
  @javax.annotation.Nullable
  public Double getHadOpenNexus() {
    return hadOpenNexus;
  }

  public void setHadOpenNexus(Double hadOpenNexus) {
    this.hadOpenNexus = hadOpenNexus;
  }


  public MatchV5ParticipantChallenges highestChampionDamage(Double highestChampionDamage) {
    this.highestChampionDamage = highestChampionDamage;
    return this;
  }

   /**
   * Get highestChampionDamage
   * @return highestChampionDamage
  **/
  @javax.annotation.Nullable
  public Double getHighestChampionDamage() {
    return highestChampionDamage;
  }

  public void setHighestChampionDamage(Double highestChampionDamage) {
    this.highestChampionDamage = highestChampionDamage;
  }


  public MatchV5ParticipantChallenges highestCrowdControlScore(Double highestCrowdControlScore) {
    this.highestCrowdControlScore = highestCrowdControlScore;
    return this;
  }

   /**
   * Get highestCrowdControlScore
   * @return highestCrowdControlScore
  **/
  @javax.annotation.Nullable
  public Double getHighestCrowdControlScore() {
    return highestCrowdControlScore;
  }

  public void setHighestCrowdControlScore(Double highestCrowdControlScore) {
    this.highestCrowdControlScore = highestCrowdControlScore;
  }


  public MatchV5ParticipantChallenges highestWardKills(Double highestWardKills) {
    this.highestWardKills = highestWardKills;
    return this;
  }

   /**
   * Get highestWardKills
   * @return highestWardKills
  **/
  @javax.annotation.Nullable
  public Double getHighestWardKills() {
    return highestWardKills;
  }

  public void setHighestWardKills(Double highestWardKills) {
    this.highestWardKills = highestWardKills;
  }


  public MatchV5ParticipantChallenges immobilizeAndKillWithAlly(Double immobilizeAndKillWithAlly) {
    this.immobilizeAndKillWithAlly = immobilizeAndKillWithAlly;
    return this;
  }

   /**
   * Get immobilizeAndKillWithAlly
   * @return immobilizeAndKillWithAlly
  **/
  @javax.annotation.Nullable
  public Double getImmobilizeAndKillWithAlly() {
    return immobilizeAndKillWithAlly;
  }

  public void setImmobilizeAndKillWithAlly(Double immobilizeAndKillWithAlly) {
    this.immobilizeAndKillWithAlly = immobilizeAndKillWithAlly;
  }


  public MatchV5ParticipantChallenges initialBuffCount(Double initialBuffCount) {
    this.initialBuffCount = initialBuffCount;
    return this;
  }

   /**
   * Get initialBuffCount
   * @return initialBuffCount
  **/
  @javax.annotation.Nullable
  public Double getInitialBuffCount() {
    return initialBuffCount;
  }

  public void setInitialBuffCount(Double initialBuffCount) {
    this.initialBuffCount = initialBuffCount;
  }


  public MatchV5ParticipantChallenges initialCrabCount(Double initialCrabCount) {
    this.initialCrabCount = initialCrabCount;
    return this;
  }

   /**
   * Get initialCrabCount
   * @return initialCrabCount
  **/
  @javax.annotation.Nullable
  public Double getInitialCrabCount() {
    return initialCrabCount;
  }

  public void setInitialCrabCount(Double initialCrabCount) {
    this.initialCrabCount = initialCrabCount;
  }


  public MatchV5ParticipantChallenges jungleCsBefore10Minutes(Double jungleCsBefore10Minutes) {
    this.jungleCsBefore10Minutes = jungleCsBefore10Minutes;
    return this;
  }

   /**
   * Get jungleCsBefore10Minutes
   * @return jungleCsBefore10Minutes
  **/
  @javax.annotation.Nullable
  public Double getJungleCsBefore10Minutes() {
    return jungleCsBefore10Minutes;
  }

  public void setJungleCsBefore10Minutes(Double jungleCsBefore10Minutes) {
    this.jungleCsBefore10Minutes = jungleCsBefore10Minutes;
  }


  public MatchV5ParticipantChallenges junglerKillsEarlyJungle(Double junglerKillsEarlyJungle) {
    this.junglerKillsEarlyJungle = junglerKillsEarlyJungle;
    return this;
  }

   /**
   * Get junglerKillsEarlyJungle
   * @return junglerKillsEarlyJungle
  **/
  @javax.annotation.Nullable
  public Double getJunglerKillsEarlyJungle() {
    return junglerKillsEarlyJungle;
  }

  public void setJunglerKillsEarlyJungle(Double junglerKillsEarlyJungle) {
    this.junglerKillsEarlyJungle = junglerKillsEarlyJungle;
  }


  public MatchV5ParticipantChallenges junglerTakedownsNearDamagedEpicMonster(Double junglerTakedownsNearDamagedEpicMonster) {
    this.junglerTakedownsNearDamagedEpicMonster = junglerTakedownsNearDamagedEpicMonster;
    return this;
  }

   /**
   * Get junglerTakedownsNearDamagedEpicMonster
   * @return junglerTakedownsNearDamagedEpicMonster
  **/
  @javax.annotation.Nullable
  public Double getJunglerTakedownsNearDamagedEpicMonster() {
    return junglerTakedownsNearDamagedEpicMonster;
  }

  public void setJunglerTakedownsNearDamagedEpicMonster(Double junglerTakedownsNearDamagedEpicMonster) {
    this.junglerTakedownsNearDamagedEpicMonster = junglerTakedownsNearDamagedEpicMonster;
  }


  public MatchV5ParticipantChallenges kda(Double kda) {
    this.kda = kda;
    return this;
  }

   /**
   * Get kda
   * @return kda
  **/
  @javax.annotation.Nullable
  public Double getKda() {
    return kda;
  }

  public void setKda(Double kda) {
    this.kda = kda;
  }


  public MatchV5ParticipantChallenges killAfterHiddenWithAlly(Double killAfterHiddenWithAlly) {
    this.killAfterHiddenWithAlly = killAfterHiddenWithAlly;
    return this;
  }

   /**
   * Get killAfterHiddenWithAlly
   * @return killAfterHiddenWithAlly
  **/
  @javax.annotation.Nullable
  public Double getKillAfterHiddenWithAlly() {
    return killAfterHiddenWithAlly;
  }

  public void setKillAfterHiddenWithAlly(Double killAfterHiddenWithAlly) {
    this.killAfterHiddenWithAlly = killAfterHiddenWithAlly;
  }


  public MatchV5ParticipantChallenges killedChampTookFullTeamDamageSurvived(Double killedChampTookFullTeamDamageSurvived) {
    this.killedChampTookFullTeamDamageSurvived = killedChampTookFullTeamDamageSurvived;
    return this;
  }

   /**
   * Get killedChampTookFullTeamDamageSurvived
   * @return killedChampTookFullTeamDamageSurvived
  **/
  @javax.annotation.Nullable
  public Double getKilledChampTookFullTeamDamageSurvived() {
    return killedChampTookFullTeamDamageSurvived;
  }

  public void setKilledChampTookFullTeamDamageSurvived(Double killedChampTookFullTeamDamageSurvived) {
    this.killedChampTookFullTeamDamageSurvived = killedChampTookFullTeamDamageSurvived;
  }


  public MatchV5ParticipantChallenges killingSprees(Double killingSprees) {
    this.killingSprees = killingSprees;
    return this;
  }

   /**
   * Get killingSprees
   * @return killingSprees
  **/
  @javax.annotation.Nullable
  public Double getKillingSprees() {
    return killingSprees;
  }

  public void setKillingSprees(Double killingSprees) {
    this.killingSprees = killingSprees;
  }


  public MatchV5ParticipantChallenges killParticipation(Double killParticipation) {
    this.killParticipation = killParticipation;
    return this;
  }

   /**
   * Get killParticipation
   * @return killParticipation
  **/
  @javax.annotation.Nullable
  public Double getKillParticipation() {
    return killParticipation;
  }

  public void setKillParticipation(Double killParticipation) {
    this.killParticipation = killParticipation;
  }


  public MatchV5ParticipantChallenges killsNearEnemyTurret(Double killsNearEnemyTurret) {
    this.killsNearEnemyTurret = killsNearEnemyTurret;
    return this;
  }

   /**
   * Get killsNearEnemyTurret
   * @return killsNearEnemyTurret
  **/
  @javax.annotation.Nullable
  public Double getKillsNearEnemyTurret() {
    return killsNearEnemyTurret;
  }

  public void setKillsNearEnemyTurret(Double killsNearEnemyTurret) {
    this.killsNearEnemyTurret = killsNearEnemyTurret;
  }


  public MatchV5ParticipantChallenges killsOnLanersEarlyJungleAsJungler(Double killsOnLanersEarlyJungleAsJungler) {
    this.killsOnLanersEarlyJungleAsJungler = killsOnLanersEarlyJungleAsJungler;
    return this;
  }

   /**
   * Get killsOnLanersEarlyJungleAsJungler
   * @return killsOnLanersEarlyJungleAsJungler
  **/
  @javax.annotation.Nullable
  public Double getKillsOnLanersEarlyJungleAsJungler() {
    return killsOnLanersEarlyJungleAsJungler;
  }

  public void setKillsOnLanersEarlyJungleAsJungler(Double killsOnLanersEarlyJungleAsJungler) {
    this.killsOnLanersEarlyJungleAsJungler = killsOnLanersEarlyJungleAsJungler;
  }


  public MatchV5ParticipantChallenges killsOnOtherLanesEarlyJungleAsLaner(Double killsOnOtherLanesEarlyJungleAsLaner) {
    this.killsOnOtherLanesEarlyJungleAsLaner = killsOnOtherLanesEarlyJungleAsLaner;
    return this;
  }

   /**
   * Get killsOnOtherLanesEarlyJungleAsLaner
   * @return killsOnOtherLanesEarlyJungleAsLaner
  **/
  @javax.annotation.Nullable
  public Double getKillsOnOtherLanesEarlyJungleAsLaner() {
    return killsOnOtherLanesEarlyJungleAsLaner;
  }

  public void setKillsOnOtherLanesEarlyJungleAsLaner(Double killsOnOtherLanesEarlyJungleAsLaner) {
    this.killsOnOtherLanesEarlyJungleAsLaner = killsOnOtherLanesEarlyJungleAsLaner;
  }


  public MatchV5ParticipantChallenges killsOnRecentlyHealedByAramPack(Double killsOnRecentlyHealedByAramPack) {
    this.killsOnRecentlyHealedByAramPack = killsOnRecentlyHealedByAramPack;
    return this;
  }

   /**
   * Get killsOnRecentlyHealedByAramPack
   * @return killsOnRecentlyHealedByAramPack
  **/
  @javax.annotation.Nullable
  public Double getKillsOnRecentlyHealedByAramPack() {
    return killsOnRecentlyHealedByAramPack;
  }

  public void setKillsOnRecentlyHealedByAramPack(Double killsOnRecentlyHealedByAramPack) {
    this.killsOnRecentlyHealedByAramPack = killsOnRecentlyHealedByAramPack;
  }


  public MatchV5ParticipantChallenges killsUnderOwnTurret(Double killsUnderOwnTurret) {
    this.killsUnderOwnTurret = killsUnderOwnTurret;
    return this;
  }

   /**
   * Get killsUnderOwnTurret
   * @return killsUnderOwnTurret
  **/
  @javax.annotation.Nullable
  public Double getKillsUnderOwnTurret() {
    return killsUnderOwnTurret;
  }

  public void setKillsUnderOwnTurret(Double killsUnderOwnTurret) {
    this.killsUnderOwnTurret = killsUnderOwnTurret;
  }


  public MatchV5ParticipantChallenges killsWithHelpFromEpicMonster(Double killsWithHelpFromEpicMonster) {
    this.killsWithHelpFromEpicMonster = killsWithHelpFromEpicMonster;
    return this;
  }

   /**
   * Get killsWithHelpFromEpicMonster
   * @return killsWithHelpFromEpicMonster
  **/
  @javax.annotation.Nullable
  public Double getKillsWithHelpFromEpicMonster() {
    return killsWithHelpFromEpicMonster;
  }

  public void setKillsWithHelpFromEpicMonster(Double killsWithHelpFromEpicMonster) {
    this.killsWithHelpFromEpicMonster = killsWithHelpFromEpicMonster;
  }


  public MatchV5ParticipantChallenges knockEnemyIntoTeamAndKill(Double knockEnemyIntoTeamAndKill) {
    this.knockEnemyIntoTeamAndKill = knockEnemyIntoTeamAndKill;
    return this;
  }

   /**
   * Get knockEnemyIntoTeamAndKill
   * @return knockEnemyIntoTeamAndKill
  **/
  @javax.annotation.Nullable
  public Double getKnockEnemyIntoTeamAndKill() {
    return knockEnemyIntoTeamAndKill;
  }

  public void setKnockEnemyIntoTeamAndKill(Double knockEnemyIntoTeamAndKill) {
    this.knockEnemyIntoTeamAndKill = knockEnemyIntoTeamAndKill;
  }


  public MatchV5ParticipantChallenges kTurretsDestroyedBeforePlatesFall(Double kTurretsDestroyedBeforePlatesFall) {
    this.kTurretsDestroyedBeforePlatesFall = kTurretsDestroyedBeforePlatesFall;
    return this;
  }

   /**
   * Get kTurretsDestroyedBeforePlatesFall
   * @return kTurretsDestroyedBeforePlatesFall
  **/
  @javax.annotation.Nullable
  public Double getkTurretsDestroyedBeforePlatesFall() {
    return kTurretsDestroyedBeforePlatesFall;
  }

  public void setkTurretsDestroyedBeforePlatesFall(Double kTurretsDestroyedBeforePlatesFall) {
    this.kTurretsDestroyedBeforePlatesFall = kTurretsDestroyedBeforePlatesFall;
  }


  public MatchV5ParticipantChallenges landSkillShotsEarlyGame(Double landSkillShotsEarlyGame) {
    this.landSkillShotsEarlyGame = landSkillShotsEarlyGame;
    return this;
  }

   /**
   * Get landSkillShotsEarlyGame
   * @return landSkillShotsEarlyGame
  **/
  @javax.annotation.Nullable
  public Double getLandSkillShotsEarlyGame() {
    return landSkillShotsEarlyGame;
  }

  public void setLandSkillShotsEarlyGame(Double landSkillShotsEarlyGame) {
    this.landSkillShotsEarlyGame = landSkillShotsEarlyGame;
  }


  public MatchV5ParticipantChallenges laneMinionsFirst10Minutes(Double laneMinionsFirst10Minutes) {
    this.laneMinionsFirst10Minutes = laneMinionsFirst10Minutes;
    return this;
  }

   /**
   * Get laneMinionsFirst10Minutes
   * @return laneMinionsFirst10Minutes
  **/
  @javax.annotation.Nullable
  public Double getLaneMinionsFirst10Minutes() {
    return laneMinionsFirst10Minutes;
  }

  public void setLaneMinionsFirst10Minutes(Double laneMinionsFirst10Minutes) {
    this.laneMinionsFirst10Minutes = laneMinionsFirst10Minutes;
  }


  public MatchV5ParticipantChallenges laningPhaseGoldExpAdvantage(Double laningPhaseGoldExpAdvantage) {
    this.laningPhaseGoldExpAdvantage = laningPhaseGoldExpAdvantage;
    return this;
  }

   /**
   * Get laningPhaseGoldExpAdvantage
   * @return laningPhaseGoldExpAdvantage
  **/
  @javax.annotation.Nullable
  public Double getLaningPhaseGoldExpAdvantage() {
    return laningPhaseGoldExpAdvantage;
  }

  public void setLaningPhaseGoldExpAdvantage(Double laningPhaseGoldExpAdvantage) {
    this.laningPhaseGoldExpAdvantage = laningPhaseGoldExpAdvantage;
  }


  public MatchV5ParticipantChallenges legendaryCount(Double legendaryCount) {
    this.legendaryCount = legendaryCount;
    return this;
  }

   /**
   * Get legendaryCount
   * @return legendaryCount
  **/
  @javax.annotation.Nullable
  public Double getLegendaryCount() {
    return legendaryCount;
  }

  public void setLegendaryCount(Double legendaryCount) {
    this.legendaryCount = legendaryCount;
  }


  public MatchV5ParticipantChallenges lostAnInhibitor(Double lostAnInhibitor) {
    this.lostAnInhibitor = lostAnInhibitor;
    return this;
  }

   /**
   * Get lostAnInhibitor
   * @return lostAnInhibitor
  **/
  @javax.annotation.Nullable
  public Double getLostAnInhibitor() {
    return lostAnInhibitor;
  }

  public void setLostAnInhibitor(Double lostAnInhibitor) {
    this.lostAnInhibitor = lostAnInhibitor;
  }


  public MatchV5ParticipantChallenges maxCsAdvantageOnLaneOpponent(Double maxCsAdvantageOnLaneOpponent) {
    this.maxCsAdvantageOnLaneOpponent = maxCsAdvantageOnLaneOpponent;
    return this;
  }

   /**
   * Get maxCsAdvantageOnLaneOpponent
   * @return maxCsAdvantageOnLaneOpponent
  **/
  @javax.annotation.Nullable
  public Double getMaxCsAdvantageOnLaneOpponent() {
    return maxCsAdvantageOnLaneOpponent;
  }

  public void setMaxCsAdvantageOnLaneOpponent(Double maxCsAdvantageOnLaneOpponent) {
    this.maxCsAdvantageOnLaneOpponent = maxCsAdvantageOnLaneOpponent;
  }


  public MatchV5ParticipantChallenges maxKillDeficit(Double maxKillDeficit) {
    this.maxKillDeficit = maxKillDeficit;
    return this;
  }

   /**
   * Get maxKillDeficit
   * @return maxKillDeficit
  **/
  @javax.annotation.Nullable
  public Double getMaxKillDeficit() {
    return maxKillDeficit;
  }

  public void setMaxKillDeficit(Double maxKillDeficit) {
    this.maxKillDeficit = maxKillDeficit;
  }


  public MatchV5ParticipantChallenges maxLevelLeadLaneOpponent(Double maxLevelLeadLaneOpponent) {
    this.maxLevelLeadLaneOpponent = maxLevelLeadLaneOpponent;
    return this;
  }

   /**
   * Get maxLevelLeadLaneOpponent
   * @return maxLevelLeadLaneOpponent
  **/
  @javax.annotation.Nullable
  public Double getMaxLevelLeadLaneOpponent() {
    return maxLevelLeadLaneOpponent;
  }

  public void setMaxLevelLeadLaneOpponent(Double maxLevelLeadLaneOpponent) {
    this.maxLevelLeadLaneOpponent = maxLevelLeadLaneOpponent;
  }


  public MatchV5ParticipantChallenges mejaisFullStackInTime(Double mejaisFullStackInTime) {
    this.mejaisFullStackInTime = mejaisFullStackInTime;
    return this;
  }

   /**
   * Get mejaisFullStackInTime
   * @return mejaisFullStackInTime
  **/
  @javax.annotation.Nullable
  public Double getMejaisFullStackInTime() {
    return mejaisFullStackInTime;
  }

  public void setMejaisFullStackInTime(Double mejaisFullStackInTime) {
    this.mejaisFullStackInTime = mejaisFullStackInTime;
  }


  public MatchV5ParticipantChallenges moreEnemyJungleThanOpponent(Double moreEnemyJungleThanOpponent) {
    this.moreEnemyJungleThanOpponent = moreEnemyJungleThanOpponent;
    return this;
  }

   /**
   * Get moreEnemyJungleThanOpponent
   * @return moreEnemyJungleThanOpponent
  **/
  @javax.annotation.Nullable
  public Double getMoreEnemyJungleThanOpponent() {
    return moreEnemyJungleThanOpponent;
  }

  public void setMoreEnemyJungleThanOpponent(Double moreEnemyJungleThanOpponent) {
    this.moreEnemyJungleThanOpponent = moreEnemyJungleThanOpponent;
  }


  public MatchV5ParticipantChallenges mostWardsDestroyedOneSweeper(Double mostWardsDestroyedOneSweeper) {
    this.mostWardsDestroyedOneSweeper = mostWardsDestroyedOneSweeper;
    return this;
  }

   /**
   * Get mostWardsDestroyedOneSweeper
   * @return mostWardsDestroyedOneSweeper
  **/
  @javax.annotation.Nullable
  public Double getMostWardsDestroyedOneSweeper() {
    return mostWardsDestroyedOneSweeper;
  }

  public void setMostWardsDestroyedOneSweeper(Double mostWardsDestroyedOneSweeper) {
    this.mostWardsDestroyedOneSweeper = mostWardsDestroyedOneSweeper;
  }


  public MatchV5ParticipantChallenges multiKillOneSpell(Double multiKillOneSpell) {
    this.multiKillOneSpell = multiKillOneSpell;
    return this;
  }

   /**
   * Get multiKillOneSpell
   * @return multiKillOneSpell
  **/
  @javax.annotation.Nullable
  public Double getMultiKillOneSpell() {
    return multiKillOneSpell;
  }

  public void setMultiKillOneSpell(Double multiKillOneSpell) {
    this.multiKillOneSpell = multiKillOneSpell;
  }


  public MatchV5ParticipantChallenges multikills(Double multikills) {
    this.multikills = multikills;
    return this;
  }

   /**
   * Get multikills
   * @return multikills
  **/
  @javax.annotation.Nullable
  public Double getMultikills() {
    return multikills;
  }

  public void setMultikills(Double multikills) {
    this.multikills = multikills;
  }


  public MatchV5ParticipantChallenges multikillsAfterAggressiveFlash(Double multikillsAfterAggressiveFlash) {
    this.multikillsAfterAggressiveFlash = multikillsAfterAggressiveFlash;
    return this;
  }

   /**
   * Get multikillsAfterAggressiveFlash
   * @return multikillsAfterAggressiveFlash
  **/
  @javax.annotation.Nullable
  public Double getMultikillsAfterAggressiveFlash() {
    return multikillsAfterAggressiveFlash;
  }

  public void setMultikillsAfterAggressiveFlash(Double multikillsAfterAggressiveFlash) {
    this.multikillsAfterAggressiveFlash = multikillsAfterAggressiveFlash;
  }


  public MatchV5ParticipantChallenges multiTurretRiftHeraldCount(Double multiTurretRiftHeraldCount) {
    this.multiTurretRiftHeraldCount = multiTurretRiftHeraldCount;
    return this;
  }

   /**
   * Get multiTurretRiftHeraldCount
   * @return multiTurretRiftHeraldCount
  **/
  @javax.annotation.Nullable
  public Double getMultiTurretRiftHeraldCount() {
    return multiTurretRiftHeraldCount;
  }

  public void setMultiTurretRiftHeraldCount(Double multiTurretRiftHeraldCount) {
    this.multiTurretRiftHeraldCount = multiTurretRiftHeraldCount;
  }


  public MatchV5ParticipantChallenges mythicItemUsed(Double mythicItemUsed) {
    this.mythicItemUsed = mythicItemUsed;
    return this;
  }

   /**
   * Get mythicItemUsed
   * @return mythicItemUsed
  **/
  @javax.annotation.Nullable
  public Double getMythicItemUsed() {
    return mythicItemUsed;
  }

  public void setMythicItemUsed(Double mythicItemUsed) {
    this.mythicItemUsed = mythicItemUsed;
  }


  public MatchV5ParticipantChallenges outerTurretExecutesBefore10Minutes(Double outerTurretExecutesBefore10Minutes) {
    this.outerTurretExecutesBefore10Minutes = outerTurretExecutesBefore10Minutes;
    return this;
  }

   /**
   * Get outerTurretExecutesBefore10Minutes
   * @return outerTurretExecutesBefore10Minutes
  **/
  @javax.annotation.Nullable
  public Double getOuterTurretExecutesBefore10Minutes() {
    return outerTurretExecutesBefore10Minutes;
  }

  public void setOuterTurretExecutesBefore10Minutes(Double outerTurretExecutesBefore10Minutes) {
    this.outerTurretExecutesBefore10Minutes = outerTurretExecutesBefore10Minutes;
  }


  public MatchV5ParticipantChallenges outnumberedKills(Double outnumberedKills) {
    this.outnumberedKills = outnumberedKills;
    return this;
  }

   /**
   * Get outnumberedKills
   * @return outnumberedKills
  **/
  @javax.annotation.Nullable
  public Double getOutnumberedKills() {
    return outnumberedKills;
  }

  public void setOutnumberedKills(Double outnumberedKills) {
    this.outnumberedKills = outnumberedKills;
  }


  public MatchV5ParticipantChallenges outnumberedNexusKill(Double outnumberedNexusKill) {
    this.outnumberedNexusKill = outnumberedNexusKill;
    return this;
  }

   /**
   * Get outnumberedNexusKill
   * @return outnumberedNexusKill
  **/
  @javax.annotation.Nullable
  public Double getOutnumberedNexusKill() {
    return outnumberedNexusKill;
  }

  public void setOutnumberedNexusKill(Double outnumberedNexusKill) {
    this.outnumberedNexusKill = outnumberedNexusKill;
  }


  public MatchV5ParticipantChallenges perfectDragonSoulsTaken(Double perfectDragonSoulsTaken) {
    this.perfectDragonSoulsTaken = perfectDragonSoulsTaken;
    return this;
  }

   /**
   * Get perfectDragonSoulsTaken
   * @return perfectDragonSoulsTaken
  **/
  @javax.annotation.Nullable
  public Double getPerfectDragonSoulsTaken() {
    return perfectDragonSoulsTaken;
  }

  public void setPerfectDragonSoulsTaken(Double perfectDragonSoulsTaken) {
    this.perfectDragonSoulsTaken = perfectDragonSoulsTaken;
  }


  public MatchV5ParticipantChallenges perfectGame(Double perfectGame) {
    this.perfectGame = perfectGame;
    return this;
  }

   /**
   * Get perfectGame
   * @return perfectGame
  **/
  @javax.annotation.Nullable
  public Double getPerfectGame() {
    return perfectGame;
  }

  public void setPerfectGame(Double perfectGame) {
    this.perfectGame = perfectGame;
  }


  public MatchV5ParticipantChallenges pickKillWithAlly(Double pickKillWithAlly) {
    this.pickKillWithAlly = pickKillWithAlly;
    return this;
  }

   /**
   * Get pickKillWithAlly
   * @return pickKillWithAlly
  **/
  @javax.annotation.Nullable
  public Double getPickKillWithAlly() {
    return pickKillWithAlly;
  }

  public void setPickKillWithAlly(Double pickKillWithAlly) {
    this.pickKillWithAlly = pickKillWithAlly;
  }


  public MatchV5ParticipantChallenges playedChampSelectPosition(Double playedChampSelectPosition) {
    this.playedChampSelectPosition = playedChampSelectPosition;
    return this;
  }

   /**
   * Get playedChampSelectPosition
   * @return playedChampSelectPosition
  **/
  @javax.annotation.Nullable
  public Double getPlayedChampSelectPosition() {
    return playedChampSelectPosition;
  }

  public void setPlayedChampSelectPosition(Double playedChampSelectPosition) {
    this.playedChampSelectPosition = playedChampSelectPosition;
  }


  public MatchV5ParticipantChallenges poroExplosions(Double poroExplosions) {
    this.poroExplosions = poroExplosions;
    return this;
  }

   /**
   * Get poroExplosions
   * @return poroExplosions
  **/
  @javax.annotation.Nullable
  public Double getPoroExplosions() {
    return poroExplosions;
  }

  public void setPoroExplosions(Double poroExplosions) {
    this.poroExplosions = poroExplosions;
  }


  public MatchV5ParticipantChallenges quickCleanse(Double quickCleanse) {
    this.quickCleanse = quickCleanse;
    return this;
  }

   /**
   * Get quickCleanse
   * @return quickCleanse
  **/
  @javax.annotation.Nullable
  public Double getQuickCleanse() {
    return quickCleanse;
  }

  public void setQuickCleanse(Double quickCleanse) {
    this.quickCleanse = quickCleanse;
  }


  public MatchV5ParticipantChallenges quickFirstTurret(Double quickFirstTurret) {
    this.quickFirstTurret = quickFirstTurret;
    return this;
  }

   /**
   * Get quickFirstTurret
   * @return quickFirstTurret
  **/
  @javax.annotation.Nullable
  public Double getQuickFirstTurret() {
    return quickFirstTurret;
  }

  public void setQuickFirstTurret(Double quickFirstTurret) {
    this.quickFirstTurret = quickFirstTurret;
  }


  public MatchV5ParticipantChallenges quickSoloKills(Double quickSoloKills) {
    this.quickSoloKills = quickSoloKills;
    return this;
  }

   /**
   * Get quickSoloKills
   * @return quickSoloKills
  **/
  @javax.annotation.Nullable
  public Double getQuickSoloKills() {
    return quickSoloKills;
  }

  public void setQuickSoloKills(Double quickSoloKills) {
    this.quickSoloKills = quickSoloKills;
  }


  public MatchV5ParticipantChallenges riftHeraldTakedowns(Double riftHeraldTakedowns) {
    this.riftHeraldTakedowns = riftHeraldTakedowns;
    return this;
  }

   /**
   * Get riftHeraldTakedowns
   * @return riftHeraldTakedowns
  **/
  @javax.annotation.Nullable
  public Double getRiftHeraldTakedowns() {
    return riftHeraldTakedowns;
  }

  public void setRiftHeraldTakedowns(Double riftHeraldTakedowns) {
    this.riftHeraldTakedowns = riftHeraldTakedowns;
  }


  public MatchV5ParticipantChallenges saveAllyFromDeath(Double saveAllyFromDeath) {
    this.saveAllyFromDeath = saveAllyFromDeath;
    return this;
  }

   /**
   * Get saveAllyFromDeath
   * @return saveAllyFromDeath
  **/
  @javax.annotation.Nullable
  public Double getSaveAllyFromDeath() {
    return saveAllyFromDeath;
  }

  public void setSaveAllyFromDeath(Double saveAllyFromDeath) {
    this.saveAllyFromDeath = saveAllyFromDeath;
  }


  public MatchV5ParticipantChallenges scuttleCrabKills(Double scuttleCrabKills) {
    this.scuttleCrabKills = scuttleCrabKills;
    return this;
  }

   /**
   * Get scuttleCrabKills
   * @return scuttleCrabKills
  **/
  @javax.annotation.Nullable
  public Double getScuttleCrabKills() {
    return scuttleCrabKills;
  }

  public void setScuttleCrabKills(Double scuttleCrabKills) {
    this.scuttleCrabKills = scuttleCrabKills;
  }


  public MatchV5ParticipantChallenges shortestTimeToAceFromFirstTakedown(Double shortestTimeToAceFromFirstTakedown) {
    this.shortestTimeToAceFromFirstTakedown = shortestTimeToAceFromFirstTakedown;
    return this;
  }

   /**
   * Get shortestTimeToAceFromFirstTakedown
   * @return shortestTimeToAceFromFirstTakedown
  **/
  @javax.annotation.Nullable
  public Double getShortestTimeToAceFromFirstTakedown() {
    return shortestTimeToAceFromFirstTakedown;
  }

  public void setShortestTimeToAceFromFirstTakedown(Double shortestTimeToAceFromFirstTakedown) {
    this.shortestTimeToAceFromFirstTakedown = shortestTimeToAceFromFirstTakedown;
  }


  public MatchV5ParticipantChallenges skillshotsDodged(Double skillshotsDodged) {
    this.skillshotsDodged = skillshotsDodged;
    return this;
  }

   /**
   * Get skillshotsDodged
   * @return skillshotsDodged
  **/
  @javax.annotation.Nullable
  public Double getSkillshotsDodged() {
    return skillshotsDodged;
  }

  public void setSkillshotsDodged(Double skillshotsDodged) {
    this.skillshotsDodged = skillshotsDodged;
  }


  public MatchV5ParticipantChallenges skillshotsHit(Double skillshotsHit) {
    this.skillshotsHit = skillshotsHit;
    return this;
  }

   /**
   * Get skillshotsHit
   * @return skillshotsHit
  **/
  @javax.annotation.Nullable
  public Double getSkillshotsHit() {
    return skillshotsHit;
  }

  public void setSkillshotsHit(Double skillshotsHit) {
    this.skillshotsHit = skillshotsHit;
  }


  public MatchV5ParticipantChallenges snowballsHit(Double snowballsHit) {
    this.snowballsHit = snowballsHit;
    return this;
  }

   /**
   * Get snowballsHit
   * @return snowballsHit
  **/
  @javax.annotation.Nullable
  public Double getSnowballsHit() {
    return snowballsHit;
  }

  public void setSnowballsHit(Double snowballsHit) {
    this.snowballsHit = snowballsHit;
  }


  public MatchV5ParticipantChallenges soloBaronKills(Double soloBaronKills) {
    this.soloBaronKills = soloBaronKills;
    return this;
  }

   /**
   * Get soloBaronKills
   * @return soloBaronKills
  **/
  @javax.annotation.Nullable
  public Double getSoloBaronKills() {
    return soloBaronKills;
  }

  public void setSoloBaronKills(Double soloBaronKills) {
    this.soloBaronKills = soloBaronKills;
  }


  public MatchV5ParticipantChallenges soloKills(Double soloKills) {
    this.soloKills = soloKills;
    return this;
  }

   /**
   * Get soloKills
   * @return soloKills
  **/
  @javax.annotation.Nullable
  public Double getSoloKills() {
    return soloKills;
  }

  public void setSoloKills(Double soloKills) {
    this.soloKills = soloKills;
  }


  public MatchV5ParticipantChallenges soloTurretsLategame(Double soloTurretsLategame) {
    this.soloTurretsLategame = soloTurretsLategame;
    return this;
  }

   /**
   * Get soloTurretsLategame
   * @return soloTurretsLategame
  **/
  @javax.annotation.Nullable
  public Double getSoloTurretsLategame() {
    return soloTurretsLategame;
  }

  public void setSoloTurretsLategame(Double soloTurretsLategame) {
    this.soloTurretsLategame = soloTurretsLategame;
  }


  public MatchV5ParticipantChallenges stealthWardsPlaced(Double stealthWardsPlaced) {
    this.stealthWardsPlaced = stealthWardsPlaced;
    return this;
  }

   /**
   * Get stealthWardsPlaced
   * @return stealthWardsPlaced
  **/
  @javax.annotation.Nullable
  public Double getStealthWardsPlaced() {
    return stealthWardsPlaced;
  }

  public void setStealthWardsPlaced(Double stealthWardsPlaced) {
    this.stealthWardsPlaced = stealthWardsPlaced;
  }


  public MatchV5ParticipantChallenges survivedSingleDigitHpCount(Double survivedSingleDigitHpCount) {
    this.survivedSingleDigitHpCount = survivedSingleDigitHpCount;
    return this;
  }

   /**
   * Get survivedSingleDigitHpCount
   * @return survivedSingleDigitHpCount
  **/
  @javax.annotation.Nullable
  public Double getSurvivedSingleDigitHpCount() {
    return survivedSingleDigitHpCount;
  }

  public void setSurvivedSingleDigitHpCount(Double survivedSingleDigitHpCount) {
    this.survivedSingleDigitHpCount = survivedSingleDigitHpCount;
  }


  public MatchV5ParticipantChallenges survivedThreeImmobilizesInFight(Double survivedThreeImmobilizesInFight) {
    this.survivedThreeImmobilizesInFight = survivedThreeImmobilizesInFight;
    return this;
  }

   /**
   * Get survivedThreeImmobilizesInFight
   * @return survivedThreeImmobilizesInFight
  **/
  @javax.annotation.Nullable
  public Double getSurvivedThreeImmobilizesInFight() {
    return survivedThreeImmobilizesInFight;
  }

  public void setSurvivedThreeImmobilizesInFight(Double survivedThreeImmobilizesInFight) {
    this.survivedThreeImmobilizesInFight = survivedThreeImmobilizesInFight;
  }


  public MatchV5ParticipantChallenges takedownOnFirstTurret(Double takedownOnFirstTurret) {
    this.takedownOnFirstTurret = takedownOnFirstTurret;
    return this;
  }

   /**
   * Get takedownOnFirstTurret
   * @return takedownOnFirstTurret
  **/
  @javax.annotation.Nullable
  public Double getTakedownOnFirstTurret() {
    return takedownOnFirstTurret;
  }

  public void setTakedownOnFirstTurret(Double takedownOnFirstTurret) {
    this.takedownOnFirstTurret = takedownOnFirstTurret;
  }


  public MatchV5ParticipantChallenges takedowns(Double takedowns) {
    this.takedowns = takedowns;
    return this;
  }

   /**
   * Get takedowns
   * @return takedowns
  **/
  @javax.annotation.Nullable
  public Double getTakedowns() {
    return takedowns;
  }

  public void setTakedowns(Double takedowns) {
    this.takedowns = takedowns;
  }


  public MatchV5ParticipantChallenges takedownsAfterGainingLevelAdvantage(Double takedownsAfterGainingLevelAdvantage) {
    this.takedownsAfterGainingLevelAdvantage = takedownsAfterGainingLevelAdvantage;
    return this;
  }

   /**
   * Get takedownsAfterGainingLevelAdvantage
   * @return takedownsAfterGainingLevelAdvantage
  **/
  @javax.annotation.Nullable
  public Double getTakedownsAfterGainingLevelAdvantage() {
    return takedownsAfterGainingLevelAdvantage;
  }

  public void setTakedownsAfterGainingLevelAdvantage(Double takedownsAfterGainingLevelAdvantage) {
    this.takedownsAfterGainingLevelAdvantage = takedownsAfterGainingLevelAdvantage;
  }


  public MatchV5ParticipantChallenges takedownsBeforeJungleMinionSpawn(Double takedownsBeforeJungleMinionSpawn) {
    this.takedownsBeforeJungleMinionSpawn = takedownsBeforeJungleMinionSpawn;
    return this;
  }

   /**
   * Get takedownsBeforeJungleMinionSpawn
   * @return takedownsBeforeJungleMinionSpawn
  **/
  @javax.annotation.Nullable
  public Double getTakedownsBeforeJungleMinionSpawn() {
    return takedownsBeforeJungleMinionSpawn;
  }

  public void setTakedownsBeforeJungleMinionSpawn(Double takedownsBeforeJungleMinionSpawn) {
    this.takedownsBeforeJungleMinionSpawn = takedownsBeforeJungleMinionSpawn;
  }


  public MatchV5ParticipantChallenges takedownsFirst25Minutes(Double takedownsFirst25Minutes) {
    this.takedownsFirst25Minutes = takedownsFirst25Minutes;
    return this;
  }

   /**
   * Get takedownsFirst25Minutes
   * @return takedownsFirst25Minutes
  **/
  @javax.annotation.Nullable
  public Double getTakedownsFirst25Minutes() {
    return takedownsFirst25Minutes;
  }

  public void setTakedownsFirst25Minutes(Double takedownsFirst25Minutes) {
    this.takedownsFirst25Minutes = takedownsFirst25Minutes;
  }


  public MatchV5ParticipantChallenges takedownsFirstXMinutes(Double takedownsFirstXMinutes) {
    this.takedownsFirstXMinutes = takedownsFirstXMinutes;
    return this;
  }

   /**
   * Get takedownsFirstXMinutes
   * @return takedownsFirstXMinutes
  **/
  @javax.annotation.Nullable
  public Double getTakedownsFirstXMinutes() {
    return takedownsFirstXMinutes;
  }

  public void setTakedownsFirstXMinutes(Double takedownsFirstXMinutes) {
    this.takedownsFirstXMinutes = takedownsFirstXMinutes;
  }


  public MatchV5ParticipantChallenges takedownsInAlcove(Double takedownsInAlcove) {
    this.takedownsInAlcove = takedownsInAlcove;
    return this;
  }

   /**
   * Get takedownsInAlcove
   * @return takedownsInAlcove
  **/
  @javax.annotation.Nullable
  public Double getTakedownsInAlcove() {
    return takedownsInAlcove;
  }

  public void setTakedownsInAlcove(Double takedownsInAlcove) {
    this.takedownsInAlcove = takedownsInAlcove;
  }


  public MatchV5ParticipantChallenges takedownsInEnemyFountain(Double takedownsInEnemyFountain) {
    this.takedownsInEnemyFountain = takedownsInEnemyFountain;
    return this;
  }

   /**
   * Get takedownsInEnemyFountain
   * @return takedownsInEnemyFountain
  **/
  @javax.annotation.Nullable
  public Double getTakedownsInEnemyFountain() {
    return takedownsInEnemyFountain;
  }

  public void setTakedownsInEnemyFountain(Double takedownsInEnemyFountain) {
    this.takedownsInEnemyFountain = takedownsInEnemyFountain;
  }


  public MatchV5ParticipantChallenges teamBaronKills(Double teamBaronKills) {
    this.teamBaronKills = teamBaronKills;
    return this;
  }

   /**
   * Get teamBaronKills
   * @return teamBaronKills
  **/
  @javax.annotation.Nullable
  public Double getTeamBaronKills() {
    return teamBaronKills;
  }

  public void setTeamBaronKills(Double teamBaronKills) {
    this.teamBaronKills = teamBaronKills;
  }


  public MatchV5ParticipantChallenges teamDamagePercentage(Double teamDamagePercentage) {
    this.teamDamagePercentage = teamDamagePercentage;
    return this;
  }

   /**
   * Get teamDamagePercentage
   * @return teamDamagePercentage
  **/
  @javax.annotation.Nullable
  public Double getTeamDamagePercentage() {
    return teamDamagePercentage;
  }

  public void setTeamDamagePercentage(Double teamDamagePercentage) {
    this.teamDamagePercentage = teamDamagePercentage;
  }


  public MatchV5ParticipantChallenges teamElderDragonKills(Double teamElderDragonKills) {
    this.teamElderDragonKills = teamElderDragonKills;
    return this;
  }

   /**
   * Get teamElderDragonKills
   * @return teamElderDragonKills
  **/
  @javax.annotation.Nullable
  public Double getTeamElderDragonKills() {
    return teamElderDragonKills;
  }

  public void setTeamElderDragonKills(Double teamElderDragonKills) {
    this.teamElderDragonKills = teamElderDragonKills;
  }


  public MatchV5ParticipantChallenges teamRiftHeraldKills(Double teamRiftHeraldKills) {
    this.teamRiftHeraldKills = teamRiftHeraldKills;
    return this;
  }

   /**
   * Get teamRiftHeraldKills
   * @return teamRiftHeraldKills
  **/
  @javax.annotation.Nullable
  public Double getTeamRiftHeraldKills() {
    return teamRiftHeraldKills;
  }

  public void setTeamRiftHeraldKills(Double teamRiftHeraldKills) {
    this.teamRiftHeraldKills = teamRiftHeraldKills;
  }


  public MatchV5ParticipantChallenges teleportTakedowns(Double teleportTakedowns) {
    this.teleportTakedowns = teleportTakedowns;
    return this;
  }

   /**
   * Get teleportTakedowns
   * @return teleportTakedowns
  **/
  @javax.annotation.Nullable
  public Double getTeleportTakedowns() {
    return teleportTakedowns;
  }

  public void setTeleportTakedowns(Double teleportTakedowns) {
    this.teleportTakedowns = teleportTakedowns;
  }


  public MatchV5ParticipantChallenges thirdInhibitorDestroyedTime(Double thirdInhibitorDestroyedTime) {
    this.thirdInhibitorDestroyedTime = thirdInhibitorDestroyedTime;
    return this;
  }

   /**
   * Get thirdInhibitorDestroyedTime
   * @return thirdInhibitorDestroyedTime
  **/
  @javax.annotation.Nullable
  public Double getThirdInhibitorDestroyedTime() {
    return thirdInhibitorDestroyedTime;
  }

  public void setThirdInhibitorDestroyedTime(Double thirdInhibitorDestroyedTime) {
    this.thirdInhibitorDestroyedTime = thirdInhibitorDestroyedTime;
  }


  public MatchV5ParticipantChallenges threeWardsOneSweeperCount(Double threeWardsOneSweeperCount) {
    this.threeWardsOneSweeperCount = threeWardsOneSweeperCount;
    return this;
  }

   /**
   * Get threeWardsOneSweeperCount
   * @return threeWardsOneSweeperCount
  **/
  @javax.annotation.Nullable
  public Double getThreeWardsOneSweeperCount() {
    return threeWardsOneSweeperCount;
  }

  public void setThreeWardsOneSweeperCount(Double threeWardsOneSweeperCount) {
    this.threeWardsOneSweeperCount = threeWardsOneSweeperCount;
  }


  public MatchV5ParticipantChallenges tookLargeDamageSurvived(Double tookLargeDamageSurvived) {
    this.tookLargeDamageSurvived = tookLargeDamageSurvived;
    return this;
  }

   /**
   * Get tookLargeDamageSurvived
   * @return tookLargeDamageSurvived
  **/
  @javax.annotation.Nullable
  public Double getTookLargeDamageSurvived() {
    return tookLargeDamageSurvived;
  }

  public void setTookLargeDamageSurvived(Double tookLargeDamageSurvived) {
    this.tookLargeDamageSurvived = tookLargeDamageSurvived;
  }


  public MatchV5ParticipantChallenges turretPlatesTaken(Double turretPlatesTaken) {
    this.turretPlatesTaken = turretPlatesTaken;
    return this;
  }

   /**
   * Get turretPlatesTaken
   * @return turretPlatesTaken
  **/
  @javax.annotation.Nullable
  public Double getTurretPlatesTaken() {
    return turretPlatesTaken;
  }

  public void setTurretPlatesTaken(Double turretPlatesTaken) {
    this.turretPlatesTaken = turretPlatesTaken;
  }


  public MatchV5ParticipantChallenges turretsTakenWithRiftHerald(Double turretsTakenWithRiftHerald) {
    this.turretsTakenWithRiftHerald = turretsTakenWithRiftHerald;
    return this;
  }

   /**
   * Get turretsTakenWithRiftHerald
   * @return turretsTakenWithRiftHerald
  **/
  @javax.annotation.Nullable
  public Double getTurretsTakenWithRiftHerald() {
    return turretsTakenWithRiftHerald;
  }

  public void setTurretsTakenWithRiftHerald(Double turretsTakenWithRiftHerald) {
    this.turretsTakenWithRiftHerald = turretsTakenWithRiftHerald;
  }


  public MatchV5ParticipantChallenges turretTakedowns(Double turretTakedowns) {
    this.turretTakedowns = turretTakedowns;
    return this;
  }

   /**
   * Get turretTakedowns
   * @return turretTakedowns
  **/
  @javax.annotation.Nullable
  public Double getTurretTakedowns() {
    return turretTakedowns;
  }

  public void setTurretTakedowns(Double turretTakedowns) {
    this.turretTakedowns = turretTakedowns;
  }


  public MatchV5ParticipantChallenges twentyMinionsIn3SecondsCount(Double twentyMinionsIn3SecondsCount) {
    this.twentyMinionsIn3SecondsCount = twentyMinionsIn3SecondsCount;
    return this;
  }

   /**
   * Get twentyMinionsIn3SecondsCount
   * @return twentyMinionsIn3SecondsCount
  **/
  @javax.annotation.Nullable
  public Double getTwentyMinionsIn3SecondsCount() {
    return twentyMinionsIn3SecondsCount;
  }

  public void setTwentyMinionsIn3SecondsCount(Double twentyMinionsIn3SecondsCount) {
    this.twentyMinionsIn3SecondsCount = twentyMinionsIn3SecondsCount;
  }


  public MatchV5ParticipantChallenges twoWardsOneSweeperCount(Integer twoWardsOneSweeperCount) {
    this.twoWardsOneSweeperCount = twoWardsOneSweeperCount;
    return this;
  }

   /**
   * Get twoWardsOneSweeperCount
   * @return twoWardsOneSweeperCount
  **/
  @javax.annotation.Nullable
  public Integer getTwoWardsOneSweeperCount() {
    return twoWardsOneSweeperCount;
  }

  public void setTwoWardsOneSweeperCount(Integer twoWardsOneSweeperCount) {
    this.twoWardsOneSweeperCount = twoWardsOneSweeperCount;
  }


  public MatchV5ParticipantChallenges unseenRecalls(Double unseenRecalls) {
    this.unseenRecalls = unseenRecalls;
    return this;
  }

   /**
   * Get unseenRecalls
   * @return unseenRecalls
  **/
  @javax.annotation.Nullable
  public Double getUnseenRecalls() {
    return unseenRecalls;
  }

  public void setUnseenRecalls(Double unseenRecalls) {
    this.unseenRecalls = unseenRecalls;
  }


  public MatchV5ParticipantChallenges visionScoreAdvantageLaneOpponent(Double visionScoreAdvantageLaneOpponent) {
    this.visionScoreAdvantageLaneOpponent = visionScoreAdvantageLaneOpponent;
    return this;
  }

   /**
   * Get visionScoreAdvantageLaneOpponent
   * @return visionScoreAdvantageLaneOpponent
  **/
  @javax.annotation.Nullable
  public Double getVisionScoreAdvantageLaneOpponent() {
    return visionScoreAdvantageLaneOpponent;
  }

  public void setVisionScoreAdvantageLaneOpponent(Double visionScoreAdvantageLaneOpponent) {
    this.visionScoreAdvantageLaneOpponent = visionScoreAdvantageLaneOpponent;
  }


  public MatchV5ParticipantChallenges visionScorePerMinute(Double visionScorePerMinute) {
    this.visionScorePerMinute = visionScorePerMinute;
    return this;
  }

   /**
   * Get visionScorePerMinute
   * @return visionScorePerMinute
  **/
  @javax.annotation.Nullable
  public Double getVisionScorePerMinute() {
    return visionScorePerMinute;
  }

  public void setVisionScorePerMinute(Double visionScorePerMinute) {
    this.visionScorePerMinute = visionScorePerMinute;
  }


  public MatchV5ParticipantChallenges wardsGuarded(Double wardsGuarded) {
    this.wardsGuarded = wardsGuarded;
    return this;
  }

   /**
   * Get wardsGuarded
   * @return wardsGuarded
  **/
  @javax.annotation.Nullable
  public Double getWardsGuarded() {
    return wardsGuarded;
  }

  public void setWardsGuarded(Double wardsGuarded) {
    this.wardsGuarded = wardsGuarded;
  }


  public MatchV5ParticipantChallenges wardTakedowns(Double wardTakedowns) {
    this.wardTakedowns = wardTakedowns;
    return this;
  }

   /**
   * Get wardTakedowns
   * @return wardTakedowns
  **/
  @javax.annotation.Nullable
  public Double getWardTakedowns() {
    return wardTakedowns;
  }

  public void setWardTakedowns(Double wardTakedowns) {
    this.wardTakedowns = wardTakedowns;
  }


  public MatchV5ParticipantChallenges wardTakedownsBefore20M(Double wardTakedownsBefore20M) {
    this.wardTakedownsBefore20M = wardTakedownsBefore20M;
    return this;
  }

   /**
   * Get wardTakedownsBefore20M
   * @return wardTakedownsBefore20M
  **/
  @javax.annotation.Nullable
  public Double getWardTakedownsBefore20M() {
    return wardTakedownsBefore20M;
  }

  public void setWardTakedownsBefore20M(Double wardTakedownsBefore20M) {
    this.wardTakedownsBefore20M = wardTakedownsBefore20M;
  }


  public MatchV5ParticipantChallenges legendaryItemUsed(List<Integer> legendaryItemUsed) {
    this.legendaryItemUsed = legendaryItemUsed;
    return this;
  }

  public MatchV5ParticipantChallenges addLegendaryItemUsedItem(Integer legendaryItemUsedItem) {
    if (this.legendaryItemUsed == null) {
      this.legendaryItemUsed = new ArrayList<>();
    }
    this.legendaryItemUsed.add(legendaryItemUsedItem);
    return this;
  }

   /**
   * Get legendaryItemUsed
   * @return legendaryItemUsed
  **/
  @javax.annotation.Nullable
  public List<Integer> getLegendaryItemUsed() {
    return legendaryItemUsed;
  }

  public void setLegendaryItemUsed(List<Integer> legendaryItemUsed) {
    this.legendaryItemUsed = legendaryItemUsed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchV5ParticipantChallenges matchV5ParticipantChallenges = (MatchV5ParticipantChallenges) o;
    return Objects.equals(this._12assistStreakCount, matchV5ParticipantChallenges._12assistStreakCount) &&
        Objects.equals(this.abilityUses, matchV5ParticipantChallenges.abilityUses) &&
        Objects.equals(this.acesBefore15Minutes, matchV5ParticipantChallenges.acesBefore15Minutes) &&
        Objects.equals(this.alliedJungleMonsterKills, matchV5ParticipantChallenges.alliedJungleMonsterKills) &&
        Objects.equals(this.baronBuffGoldAdvantageOverThreshold, matchV5ParticipantChallenges.baronBuffGoldAdvantageOverThreshold) &&
        Objects.equals(this.baronTakedowns, matchV5ParticipantChallenges.baronTakedowns) &&
        Objects.equals(this.blastConeOppositeOpponentCount, matchV5ParticipantChallenges.blastConeOppositeOpponentCount) &&
        Objects.equals(this.bountyGold, matchV5ParticipantChallenges.bountyGold) &&
        Objects.equals(this.buffsStolen, matchV5ParticipantChallenges.buffsStolen) &&
        Objects.equals(this.completeSupportQuestInTime, matchV5ParticipantChallenges.completeSupportQuestInTime) &&
        Objects.equals(this.controlWardsPlaced, matchV5ParticipantChallenges.controlWardsPlaced) &&
        Objects.equals(this.controlWardTimeCoverageInRiverOrEnemyHalf, matchV5ParticipantChallenges.controlWardTimeCoverageInRiverOrEnemyHalf) &&
        Objects.equals(this.damagePerMinute, matchV5ParticipantChallenges.damagePerMinute) &&
        Objects.equals(this.damageTakenOnTeamPercentage, matchV5ParticipantChallenges.damageTakenOnTeamPercentage) &&
        Objects.equals(this.dancedWithRiftHerald, matchV5ParticipantChallenges.dancedWithRiftHerald) &&
        Objects.equals(this.deathsByEnemyChamps, matchV5ParticipantChallenges.deathsByEnemyChamps) &&
        Objects.equals(this.dodgeSkillShotsSmallWindow, matchV5ParticipantChallenges.dodgeSkillShotsSmallWindow) &&
        Objects.equals(this.doubleAces, matchV5ParticipantChallenges.doubleAces) &&
        Objects.equals(this.dragonTakedowns, matchV5ParticipantChallenges.dragonTakedowns) &&
        Objects.equals(this.earliestBaron, matchV5ParticipantChallenges.earliestBaron) &&
        Objects.equals(this.earliestDragonTakedown, matchV5ParticipantChallenges.earliestDragonTakedown) &&
        Objects.equals(this.earliestElderDragon, matchV5ParticipantChallenges.earliestElderDragon) &&
        Objects.equals(this.earlyLaningPhaseGoldExpAdvantage, matchV5ParticipantChallenges.earlyLaningPhaseGoldExpAdvantage) &&
        Objects.equals(this.effectiveHealAndShielding, matchV5ParticipantChallenges.effectiveHealAndShielding) &&
        Objects.equals(this.elderDragonKillsWithOpposingSoul, matchV5ParticipantChallenges.elderDragonKillsWithOpposingSoul) &&
        Objects.equals(this.elderDragonMultikills, matchV5ParticipantChallenges.elderDragonMultikills) &&
        Objects.equals(this.enemyChampionImmobilizations, matchV5ParticipantChallenges.enemyChampionImmobilizations) &&
        Objects.equals(this.enemyJungleMonsterKills, matchV5ParticipantChallenges.enemyJungleMonsterKills) &&
        Objects.equals(this.epicMonsterKillsNearEnemyJungler, matchV5ParticipantChallenges.epicMonsterKillsNearEnemyJungler) &&
        Objects.equals(this.epicMonsterKillsWithin30SecondsOfSpawn, matchV5ParticipantChallenges.epicMonsterKillsWithin30SecondsOfSpawn) &&
        Objects.equals(this.epicMonsterSteals, matchV5ParticipantChallenges.epicMonsterSteals) &&
        Objects.equals(this.epicMonsterStolenWithoutSmite, matchV5ParticipantChallenges.epicMonsterStolenWithoutSmite) &&
        Objects.equals(this.fasterSupportQuestCompletion, matchV5ParticipantChallenges.fasterSupportQuestCompletion) &&
        Objects.equals(this.fastestLegendary, matchV5ParticipantChallenges.fastestLegendary) &&
        Objects.equals(this.firstTurretKilled, matchV5ParticipantChallenges.firstTurretKilled) &&
        Objects.equals(this.firstTurretKilledTime, matchV5ParticipantChallenges.firstTurretKilledTime) &&
        Objects.equals(this.flawlessAces, matchV5ParticipantChallenges.flawlessAces) &&
        Objects.equals(this.fullTeamTakedown, matchV5ParticipantChallenges.fullTeamTakedown) &&
        Objects.equals(this.gameLength, matchV5ParticipantChallenges.gameLength) &&
        Objects.equals(this.getTakedownsInAllLanesEarlyJungleAsLaner, matchV5ParticipantChallenges.getTakedownsInAllLanesEarlyJungleAsLaner) &&
        Objects.equals(this.goldPerMinute, matchV5ParticipantChallenges.goldPerMinute) &&
        Objects.equals(this.hadAfkTeammate, matchV5ParticipantChallenges.hadAfkTeammate) &&
        Objects.equals(this.hadOpenNexus, matchV5ParticipantChallenges.hadOpenNexus) &&
        Objects.equals(this.highestChampionDamage, matchV5ParticipantChallenges.highestChampionDamage) &&
        Objects.equals(this.highestCrowdControlScore, matchV5ParticipantChallenges.highestCrowdControlScore) &&
        Objects.equals(this.highestWardKills, matchV5ParticipantChallenges.highestWardKills) &&
        Objects.equals(this.immobilizeAndKillWithAlly, matchV5ParticipantChallenges.immobilizeAndKillWithAlly) &&
        Objects.equals(this.initialBuffCount, matchV5ParticipantChallenges.initialBuffCount) &&
        Objects.equals(this.initialCrabCount, matchV5ParticipantChallenges.initialCrabCount) &&
        Objects.equals(this.jungleCsBefore10Minutes, matchV5ParticipantChallenges.jungleCsBefore10Minutes) &&
        Objects.equals(this.junglerKillsEarlyJungle, matchV5ParticipantChallenges.junglerKillsEarlyJungle) &&
        Objects.equals(this.junglerTakedownsNearDamagedEpicMonster, matchV5ParticipantChallenges.junglerTakedownsNearDamagedEpicMonster) &&
        Objects.equals(this.kda, matchV5ParticipantChallenges.kda) &&
        Objects.equals(this.killAfterHiddenWithAlly, matchV5ParticipantChallenges.killAfterHiddenWithAlly) &&
        Objects.equals(this.killedChampTookFullTeamDamageSurvived, matchV5ParticipantChallenges.killedChampTookFullTeamDamageSurvived) &&
        Objects.equals(this.killingSprees, matchV5ParticipantChallenges.killingSprees) &&
        Objects.equals(this.killParticipation, matchV5ParticipantChallenges.killParticipation) &&
        Objects.equals(this.killsNearEnemyTurret, matchV5ParticipantChallenges.killsNearEnemyTurret) &&
        Objects.equals(this.killsOnLanersEarlyJungleAsJungler, matchV5ParticipantChallenges.killsOnLanersEarlyJungleAsJungler) &&
        Objects.equals(this.killsOnOtherLanesEarlyJungleAsLaner, matchV5ParticipantChallenges.killsOnOtherLanesEarlyJungleAsLaner) &&
        Objects.equals(this.killsOnRecentlyHealedByAramPack, matchV5ParticipantChallenges.killsOnRecentlyHealedByAramPack) &&
        Objects.equals(this.killsUnderOwnTurret, matchV5ParticipantChallenges.killsUnderOwnTurret) &&
        Objects.equals(this.killsWithHelpFromEpicMonster, matchV5ParticipantChallenges.killsWithHelpFromEpicMonster) &&
        Objects.equals(this.knockEnemyIntoTeamAndKill, matchV5ParticipantChallenges.knockEnemyIntoTeamAndKill) &&
        Objects.equals(this.kTurretsDestroyedBeforePlatesFall, matchV5ParticipantChallenges.kTurretsDestroyedBeforePlatesFall) &&
        Objects.equals(this.landSkillShotsEarlyGame, matchV5ParticipantChallenges.landSkillShotsEarlyGame) &&
        Objects.equals(this.laneMinionsFirst10Minutes, matchV5ParticipantChallenges.laneMinionsFirst10Minutes) &&
        Objects.equals(this.laningPhaseGoldExpAdvantage, matchV5ParticipantChallenges.laningPhaseGoldExpAdvantage) &&
        Objects.equals(this.legendaryCount, matchV5ParticipantChallenges.legendaryCount) &&
        Objects.equals(this.lostAnInhibitor, matchV5ParticipantChallenges.lostAnInhibitor) &&
        Objects.equals(this.maxCsAdvantageOnLaneOpponent, matchV5ParticipantChallenges.maxCsAdvantageOnLaneOpponent) &&
        Objects.equals(this.maxKillDeficit, matchV5ParticipantChallenges.maxKillDeficit) &&
        Objects.equals(this.maxLevelLeadLaneOpponent, matchV5ParticipantChallenges.maxLevelLeadLaneOpponent) &&
        Objects.equals(this.mejaisFullStackInTime, matchV5ParticipantChallenges.mejaisFullStackInTime) &&
        Objects.equals(this.moreEnemyJungleThanOpponent, matchV5ParticipantChallenges.moreEnemyJungleThanOpponent) &&
        Objects.equals(this.mostWardsDestroyedOneSweeper, matchV5ParticipantChallenges.mostWardsDestroyedOneSweeper) &&
        Objects.equals(this.multiKillOneSpell, matchV5ParticipantChallenges.multiKillOneSpell) &&
        Objects.equals(this.multikills, matchV5ParticipantChallenges.multikills) &&
        Objects.equals(this.multikillsAfterAggressiveFlash, matchV5ParticipantChallenges.multikillsAfterAggressiveFlash) &&
        Objects.equals(this.multiTurretRiftHeraldCount, matchV5ParticipantChallenges.multiTurretRiftHeraldCount) &&
        Objects.equals(this.mythicItemUsed, matchV5ParticipantChallenges.mythicItemUsed) &&
        Objects.equals(this.outerTurretExecutesBefore10Minutes, matchV5ParticipantChallenges.outerTurretExecutesBefore10Minutes) &&
        Objects.equals(this.outnumberedKills, matchV5ParticipantChallenges.outnumberedKills) &&
        Objects.equals(this.outnumberedNexusKill, matchV5ParticipantChallenges.outnumberedNexusKill) &&
        Objects.equals(this.perfectDragonSoulsTaken, matchV5ParticipantChallenges.perfectDragonSoulsTaken) &&
        Objects.equals(this.perfectGame, matchV5ParticipantChallenges.perfectGame) &&
        Objects.equals(this.pickKillWithAlly, matchV5ParticipantChallenges.pickKillWithAlly) &&
        Objects.equals(this.playedChampSelectPosition, matchV5ParticipantChallenges.playedChampSelectPosition) &&
        Objects.equals(this.poroExplosions, matchV5ParticipantChallenges.poroExplosions) &&
        Objects.equals(this.quickCleanse, matchV5ParticipantChallenges.quickCleanse) &&
        Objects.equals(this.quickFirstTurret, matchV5ParticipantChallenges.quickFirstTurret) &&
        Objects.equals(this.quickSoloKills, matchV5ParticipantChallenges.quickSoloKills) &&
        Objects.equals(this.riftHeraldTakedowns, matchV5ParticipantChallenges.riftHeraldTakedowns) &&
        Objects.equals(this.saveAllyFromDeath, matchV5ParticipantChallenges.saveAllyFromDeath) &&
        Objects.equals(this.scuttleCrabKills, matchV5ParticipantChallenges.scuttleCrabKills) &&
        Objects.equals(this.shortestTimeToAceFromFirstTakedown, matchV5ParticipantChallenges.shortestTimeToAceFromFirstTakedown) &&
        Objects.equals(this.skillshotsDodged, matchV5ParticipantChallenges.skillshotsDodged) &&
        Objects.equals(this.skillshotsHit, matchV5ParticipantChallenges.skillshotsHit) &&
        Objects.equals(this.snowballsHit, matchV5ParticipantChallenges.snowballsHit) &&
        Objects.equals(this.soloBaronKills, matchV5ParticipantChallenges.soloBaronKills) &&
        Objects.equals(this.soloKills, matchV5ParticipantChallenges.soloKills) &&
        Objects.equals(this.soloTurretsLategame, matchV5ParticipantChallenges.soloTurretsLategame) &&
        Objects.equals(this.stealthWardsPlaced, matchV5ParticipantChallenges.stealthWardsPlaced) &&
        Objects.equals(this.survivedSingleDigitHpCount, matchV5ParticipantChallenges.survivedSingleDigitHpCount) &&
        Objects.equals(this.survivedThreeImmobilizesInFight, matchV5ParticipantChallenges.survivedThreeImmobilizesInFight) &&
        Objects.equals(this.takedownOnFirstTurret, matchV5ParticipantChallenges.takedownOnFirstTurret) &&
        Objects.equals(this.takedowns, matchV5ParticipantChallenges.takedowns) &&
        Objects.equals(this.takedownsAfterGainingLevelAdvantage, matchV5ParticipantChallenges.takedownsAfterGainingLevelAdvantage) &&
        Objects.equals(this.takedownsBeforeJungleMinionSpawn, matchV5ParticipantChallenges.takedownsBeforeJungleMinionSpawn) &&
        Objects.equals(this.takedownsFirst25Minutes, matchV5ParticipantChallenges.takedownsFirst25Minutes) &&
        Objects.equals(this.takedownsFirstXMinutes, matchV5ParticipantChallenges.takedownsFirstXMinutes) &&
        Objects.equals(this.takedownsInAlcove, matchV5ParticipantChallenges.takedownsInAlcove) &&
        Objects.equals(this.takedownsInEnemyFountain, matchV5ParticipantChallenges.takedownsInEnemyFountain) &&
        Objects.equals(this.teamBaronKills, matchV5ParticipantChallenges.teamBaronKills) &&
        Objects.equals(this.teamDamagePercentage, matchV5ParticipantChallenges.teamDamagePercentage) &&
        Objects.equals(this.teamElderDragonKills, matchV5ParticipantChallenges.teamElderDragonKills) &&
        Objects.equals(this.teamRiftHeraldKills, matchV5ParticipantChallenges.teamRiftHeraldKills) &&
        Objects.equals(this.teleportTakedowns, matchV5ParticipantChallenges.teleportTakedowns) &&
        Objects.equals(this.thirdInhibitorDestroyedTime, matchV5ParticipantChallenges.thirdInhibitorDestroyedTime) &&
        Objects.equals(this.threeWardsOneSweeperCount, matchV5ParticipantChallenges.threeWardsOneSweeperCount) &&
        Objects.equals(this.tookLargeDamageSurvived, matchV5ParticipantChallenges.tookLargeDamageSurvived) &&
        Objects.equals(this.turretPlatesTaken, matchV5ParticipantChallenges.turretPlatesTaken) &&
        Objects.equals(this.turretsTakenWithRiftHerald, matchV5ParticipantChallenges.turretsTakenWithRiftHerald) &&
        Objects.equals(this.turretTakedowns, matchV5ParticipantChallenges.turretTakedowns) &&
        Objects.equals(this.twentyMinionsIn3SecondsCount, matchV5ParticipantChallenges.twentyMinionsIn3SecondsCount) &&
        Objects.equals(this.twoWardsOneSweeperCount, matchV5ParticipantChallenges.twoWardsOneSweeperCount) &&
        Objects.equals(this.unseenRecalls, matchV5ParticipantChallenges.unseenRecalls) &&
        Objects.equals(this.visionScoreAdvantageLaneOpponent, matchV5ParticipantChallenges.visionScoreAdvantageLaneOpponent) &&
        Objects.equals(this.visionScorePerMinute, matchV5ParticipantChallenges.visionScorePerMinute) &&
        Objects.equals(this.wardsGuarded, matchV5ParticipantChallenges.wardsGuarded) &&
        Objects.equals(this.wardTakedowns, matchV5ParticipantChallenges.wardTakedowns) &&
        Objects.equals(this.wardTakedownsBefore20M, matchV5ParticipantChallenges.wardTakedownsBefore20M) &&
        Objects.equals(this.legendaryItemUsed, matchV5ParticipantChallenges.legendaryItemUsed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_12assistStreakCount, abilityUses, acesBefore15Minutes, alliedJungleMonsterKills, baronBuffGoldAdvantageOverThreshold, baronTakedowns, blastConeOppositeOpponentCount, bountyGold, buffsStolen, completeSupportQuestInTime, controlWardsPlaced, controlWardTimeCoverageInRiverOrEnemyHalf, damagePerMinute, damageTakenOnTeamPercentage, dancedWithRiftHerald, deathsByEnemyChamps, dodgeSkillShotsSmallWindow, doubleAces, dragonTakedowns, earliestBaron, earliestDragonTakedown, earliestElderDragon, earlyLaningPhaseGoldExpAdvantage, effectiveHealAndShielding, elderDragonKillsWithOpposingSoul, elderDragonMultikills, enemyChampionImmobilizations, enemyJungleMonsterKills, epicMonsterKillsNearEnemyJungler, epicMonsterKillsWithin30SecondsOfSpawn, epicMonsterSteals, epicMonsterStolenWithoutSmite, fasterSupportQuestCompletion, fastestLegendary, firstTurretKilled, firstTurretKilledTime, flawlessAces, fullTeamTakedown, gameLength, getTakedownsInAllLanesEarlyJungleAsLaner, goldPerMinute, hadAfkTeammate, hadOpenNexus, highestChampionDamage, highestCrowdControlScore, highestWardKills, immobilizeAndKillWithAlly, initialBuffCount, initialCrabCount, jungleCsBefore10Minutes, junglerKillsEarlyJungle, junglerTakedownsNearDamagedEpicMonster, kda, killAfterHiddenWithAlly, killedChampTookFullTeamDamageSurvived, killingSprees, killParticipation, killsNearEnemyTurret, killsOnLanersEarlyJungleAsJungler, killsOnOtherLanesEarlyJungleAsLaner, killsOnRecentlyHealedByAramPack, killsUnderOwnTurret, killsWithHelpFromEpicMonster, knockEnemyIntoTeamAndKill, kTurretsDestroyedBeforePlatesFall, landSkillShotsEarlyGame, laneMinionsFirst10Minutes, laningPhaseGoldExpAdvantage, legendaryCount, lostAnInhibitor, maxCsAdvantageOnLaneOpponent, maxKillDeficit, maxLevelLeadLaneOpponent, mejaisFullStackInTime, moreEnemyJungleThanOpponent, mostWardsDestroyedOneSweeper, multiKillOneSpell, multikills, multikillsAfterAggressiveFlash, multiTurretRiftHeraldCount, mythicItemUsed, outerTurretExecutesBefore10Minutes, outnumberedKills, outnumberedNexusKill, perfectDragonSoulsTaken, perfectGame, pickKillWithAlly, playedChampSelectPosition, poroExplosions, quickCleanse, quickFirstTurret, quickSoloKills, riftHeraldTakedowns, saveAllyFromDeath, scuttleCrabKills, shortestTimeToAceFromFirstTakedown, skillshotsDodged, skillshotsHit, snowballsHit, soloBaronKills, soloKills, soloTurretsLategame, stealthWardsPlaced, survivedSingleDigitHpCount, survivedThreeImmobilizesInFight, takedownOnFirstTurret, takedowns, takedownsAfterGainingLevelAdvantage, takedownsBeforeJungleMinionSpawn, takedownsFirst25Minutes, takedownsFirstXMinutes, takedownsInAlcove, takedownsInEnemyFountain, teamBaronKills, teamDamagePercentage, teamElderDragonKills, teamRiftHeraldKills, teleportTakedowns, thirdInhibitorDestroyedTime, threeWardsOneSweeperCount, tookLargeDamageSurvived, turretPlatesTaken, turretsTakenWithRiftHerald, turretTakedowns, twentyMinionsIn3SecondsCount, twoWardsOneSweeperCount, unseenRecalls, visionScoreAdvantageLaneOpponent, visionScorePerMinute, wardsGuarded, wardTakedowns, wardTakedownsBefore20M, legendaryItemUsed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchV5ParticipantChallenges {\n");
    sb.append("    _12assistStreakCount: ").append(toIndentedString(_12assistStreakCount)).append("\n");
    sb.append("    abilityUses: ").append(toIndentedString(abilityUses)).append("\n");
    sb.append("    acesBefore15Minutes: ").append(toIndentedString(acesBefore15Minutes)).append("\n");
    sb.append("    alliedJungleMonsterKills: ").append(toIndentedString(alliedJungleMonsterKills)).append("\n");
    sb.append("    baronBuffGoldAdvantageOverThreshold: ").append(toIndentedString(baronBuffGoldAdvantageOverThreshold)).append("\n");
    sb.append("    baronTakedowns: ").append(toIndentedString(baronTakedowns)).append("\n");
    sb.append("    blastConeOppositeOpponentCount: ").append(toIndentedString(blastConeOppositeOpponentCount)).append("\n");
    sb.append("    bountyGold: ").append(toIndentedString(bountyGold)).append("\n");
    sb.append("    buffsStolen: ").append(toIndentedString(buffsStolen)).append("\n");
    sb.append("    completeSupportQuestInTime: ").append(toIndentedString(completeSupportQuestInTime)).append("\n");
    sb.append("    controlWardsPlaced: ").append(toIndentedString(controlWardsPlaced)).append("\n");
    sb.append("    controlWardTimeCoverageInRiverOrEnemyHalf: ").append(toIndentedString(controlWardTimeCoverageInRiverOrEnemyHalf)).append("\n");
    sb.append("    damagePerMinute: ").append(toIndentedString(damagePerMinute)).append("\n");
    sb.append("    damageTakenOnTeamPercentage: ").append(toIndentedString(damageTakenOnTeamPercentage)).append("\n");
    sb.append("    dancedWithRiftHerald: ").append(toIndentedString(dancedWithRiftHerald)).append("\n");
    sb.append("    deathsByEnemyChamps: ").append(toIndentedString(deathsByEnemyChamps)).append("\n");
    sb.append("    dodgeSkillShotsSmallWindow: ").append(toIndentedString(dodgeSkillShotsSmallWindow)).append("\n");
    sb.append("    doubleAces: ").append(toIndentedString(doubleAces)).append("\n");
    sb.append("    dragonTakedowns: ").append(toIndentedString(dragonTakedowns)).append("\n");
    sb.append("    earliestBaron: ").append(toIndentedString(earliestBaron)).append("\n");
    sb.append("    earliestDragonTakedown: ").append(toIndentedString(earliestDragonTakedown)).append("\n");
    sb.append("    earliestElderDragon: ").append(toIndentedString(earliestElderDragon)).append("\n");
    sb.append("    earlyLaningPhaseGoldExpAdvantage: ").append(toIndentedString(earlyLaningPhaseGoldExpAdvantage)).append("\n");
    sb.append("    effectiveHealAndShielding: ").append(toIndentedString(effectiveHealAndShielding)).append("\n");
    sb.append("    elderDragonKillsWithOpposingSoul: ").append(toIndentedString(elderDragonKillsWithOpposingSoul)).append("\n");
    sb.append("    elderDragonMultikills: ").append(toIndentedString(elderDragonMultikills)).append("\n");
    sb.append("    enemyChampionImmobilizations: ").append(toIndentedString(enemyChampionImmobilizations)).append("\n");
    sb.append("    enemyJungleMonsterKills: ").append(toIndentedString(enemyJungleMonsterKills)).append("\n");
    sb.append("    epicMonsterKillsNearEnemyJungler: ").append(toIndentedString(epicMonsterKillsNearEnemyJungler)).append("\n");
    sb.append("    epicMonsterKillsWithin30SecondsOfSpawn: ").append(toIndentedString(epicMonsterKillsWithin30SecondsOfSpawn)).append("\n");
    sb.append("    epicMonsterSteals: ").append(toIndentedString(epicMonsterSteals)).append("\n");
    sb.append("    epicMonsterStolenWithoutSmite: ").append(toIndentedString(epicMonsterStolenWithoutSmite)).append("\n");
    sb.append("    fasterSupportQuestCompletion: ").append(toIndentedString(fasterSupportQuestCompletion)).append("\n");
    sb.append("    fastestLegendary: ").append(toIndentedString(fastestLegendary)).append("\n");
    sb.append("    firstTurretKilled: ").append(toIndentedString(firstTurretKilled)).append("\n");
    sb.append("    firstTurretKilledTime: ").append(toIndentedString(firstTurretKilledTime)).append("\n");
    sb.append("    flawlessAces: ").append(toIndentedString(flawlessAces)).append("\n");
    sb.append("    fullTeamTakedown: ").append(toIndentedString(fullTeamTakedown)).append("\n");
    sb.append("    gameLength: ").append(toIndentedString(gameLength)).append("\n");
    sb.append("    getTakedownsInAllLanesEarlyJungleAsLaner: ").append(toIndentedString(getTakedownsInAllLanesEarlyJungleAsLaner)).append("\n");
    sb.append("    goldPerMinute: ").append(toIndentedString(goldPerMinute)).append("\n");
    sb.append("    hadAfkTeammate: ").append(toIndentedString(hadAfkTeammate)).append("\n");
    sb.append("    hadOpenNexus: ").append(toIndentedString(hadOpenNexus)).append("\n");
    sb.append("    highestChampionDamage: ").append(toIndentedString(highestChampionDamage)).append("\n");
    sb.append("    highestCrowdControlScore: ").append(toIndentedString(highestCrowdControlScore)).append("\n");
    sb.append("    highestWardKills: ").append(toIndentedString(highestWardKills)).append("\n");
    sb.append("    immobilizeAndKillWithAlly: ").append(toIndentedString(immobilizeAndKillWithAlly)).append("\n");
    sb.append("    initialBuffCount: ").append(toIndentedString(initialBuffCount)).append("\n");
    sb.append("    initialCrabCount: ").append(toIndentedString(initialCrabCount)).append("\n");
    sb.append("    jungleCsBefore10Minutes: ").append(toIndentedString(jungleCsBefore10Minutes)).append("\n");
    sb.append("    junglerKillsEarlyJungle: ").append(toIndentedString(junglerKillsEarlyJungle)).append("\n");
    sb.append("    junglerTakedownsNearDamagedEpicMonster: ").append(toIndentedString(junglerTakedownsNearDamagedEpicMonster)).append("\n");
    sb.append("    kda: ").append(toIndentedString(kda)).append("\n");
    sb.append("    killAfterHiddenWithAlly: ").append(toIndentedString(killAfterHiddenWithAlly)).append("\n");
    sb.append("    killedChampTookFullTeamDamageSurvived: ").append(toIndentedString(killedChampTookFullTeamDamageSurvived)).append("\n");
    sb.append("    killingSprees: ").append(toIndentedString(killingSprees)).append("\n");
    sb.append("    killParticipation: ").append(toIndentedString(killParticipation)).append("\n");
    sb.append("    killsNearEnemyTurret: ").append(toIndentedString(killsNearEnemyTurret)).append("\n");
    sb.append("    killsOnLanersEarlyJungleAsJungler: ").append(toIndentedString(killsOnLanersEarlyJungleAsJungler)).append("\n");
    sb.append("    killsOnOtherLanesEarlyJungleAsLaner: ").append(toIndentedString(killsOnOtherLanesEarlyJungleAsLaner)).append("\n");
    sb.append("    killsOnRecentlyHealedByAramPack: ").append(toIndentedString(killsOnRecentlyHealedByAramPack)).append("\n");
    sb.append("    killsUnderOwnTurret: ").append(toIndentedString(killsUnderOwnTurret)).append("\n");
    sb.append("    killsWithHelpFromEpicMonster: ").append(toIndentedString(killsWithHelpFromEpicMonster)).append("\n");
    sb.append("    knockEnemyIntoTeamAndKill: ").append(toIndentedString(knockEnemyIntoTeamAndKill)).append("\n");
    sb.append("    kTurretsDestroyedBeforePlatesFall: ").append(toIndentedString(kTurretsDestroyedBeforePlatesFall)).append("\n");
    sb.append("    landSkillShotsEarlyGame: ").append(toIndentedString(landSkillShotsEarlyGame)).append("\n");
    sb.append("    laneMinionsFirst10Minutes: ").append(toIndentedString(laneMinionsFirst10Minutes)).append("\n");
    sb.append("    laningPhaseGoldExpAdvantage: ").append(toIndentedString(laningPhaseGoldExpAdvantage)).append("\n");
    sb.append("    legendaryCount: ").append(toIndentedString(legendaryCount)).append("\n");
    sb.append("    lostAnInhibitor: ").append(toIndentedString(lostAnInhibitor)).append("\n");
    sb.append("    maxCsAdvantageOnLaneOpponent: ").append(toIndentedString(maxCsAdvantageOnLaneOpponent)).append("\n");
    sb.append("    maxKillDeficit: ").append(toIndentedString(maxKillDeficit)).append("\n");
    sb.append("    maxLevelLeadLaneOpponent: ").append(toIndentedString(maxLevelLeadLaneOpponent)).append("\n");
    sb.append("    mejaisFullStackInTime: ").append(toIndentedString(mejaisFullStackInTime)).append("\n");
    sb.append("    moreEnemyJungleThanOpponent: ").append(toIndentedString(moreEnemyJungleThanOpponent)).append("\n");
    sb.append("    mostWardsDestroyedOneSweeper: ").append(toIndentedString(mostWardsDestroyedOneSweeper)).append("\n");
    sb.append("    multiKillOneSpell: ").append(toIndentedString(multiKillOneSpell)).append("\n");
    sb.append("    multikills: ").append(toIndentedString(multikills)).append("\n");
    sb.append("    multikillsAfterAggressiveFlash: ").append(toIndentedString(multikillsAfterAggressiveFlash)).append("\n");
    sb.append("    multiTurretRiftHeraldCount: ").append(toIndentedString(multiTurretRiftHeraldCount)).append("\n");
    sb.append("    mythicItemUsed: ").append(toIndentedString(mythicItemUsed)).append("\n");
    sb.append("    outerTurretExecutesBefore10Minutes: ").append(toIndentedString(outerTurretExecutesBefore10Minutes)).append("\n");
    sb.append("    outnumberedKills: ").append(toIndentedString(outnumberedKills)).append("\n");
    sb.append("    outnumberedNexusKill: ").append(toIndentedString(outnumberedNexusKill)).append("\n");
    sb.append("    perfectDragonSoulsTaken: ").append(toIndentedString(perfectDragonSoulsTaken)).append("\n");
    sb.append("    perfectGame: ").append(toIndentedString(perfectGame)).append("\n");
    sb.append("    pickKillWithAlly: ").append(toIndentedString(pickKillWithAlly)).append("\n");
    sb.append("    playedChampSelectPosition: ").append(toIndentedString(playedChampSelectPosition)).append("\n");
    sb.append("    poroExplosions: ").append(toIndentedString(poroExplosions)).append("\n");
    sb.append("    quickCleanse: ").append(toIndentedString(quickCleanse)).append("\n");
    sb.append("    quickFirstTurret: ").append(toIndentedString(quickFirstTurret)).append("\n");
    sb.append("    quickSoloKills: ").append(toIndentedString(quickSoloKills)).append("\n");
    sb.append("    riftHeraldTakedowns: ").append(toIndentedString(riftHeraldTakedowns)).append("\n");
    sb.append("    saveAllyFromDeath: ").append(toIndentedString(saveAllyFromDeath)).append("\n");
    sb.append("    scuttleCrabKills: ").append(toIndentedString(scuttleCrabKills)).append("\n");
    sb.append("    shortestTimeToAceFromFirstTakedown: ").append(toIndentedString(shortestTimeToAceFromFirstTakedown)).append("\n");
    sb.append("    skillshotsDodged: ").append(toIndentedString(skillshotsDodged)).append("\n");
    sb.append("    skillshotsHit: ").append(toIndentedString(skillshotsHit)).append("\n");
    sb.append("    snowballsHit: ").append(toIndentedString(snowballsHit)).append("\n");
    sb.append("    soloBaronKills: ").append(toIndentedString(soloBaronKills)).append("\n");
    sb.append("    soloKills: ").append(toIndentedString(soloKills)).append("\n");
    sb.append("    soloTurretsLategame: ").append(toIndentedString(soloTurretsLategame)).append("\n");
    sb.append("    stealthWardsPlaced: ").append(toIndentedString(stealthWardsPlaced)).append("\n");
    sb.append("    survivedSingleDigitHpCount: ").append(toIndentedString(survivedSingleDigitHpCount)).append("\n");
    sb.append("    survivedThreeImmobilizesInFight: ").append(toIndentedString(survivedThreeImmobilizesInFight)).append("\n");
    sb.append("    takedownOnFirstTurret: ").append(toIndentedString(takedownOnFirstTurret)).append("\n");
    sb.append("    takedowns: ").append(toIndentedString(takedowns)).append("\n");
    sb.append("    takedownsAfterGainingLevelAdvantage: ").append(toIndentedString(takedownsAfterGainingLevelAdvantage)).append("\n");
    sb.append("    takedownsBeforeJungleMinionSpawn: ").append(toIndentedString(takedownsBeforeJungleMinionSpawn)).append("\n");
    sb.append("    takedownsFirst25Minutes: ").append(toIndentedString(takedownsFirst25Minutes)).append("\n");
    sb.append("    takedownsFirstXMinutes: ").append(toIndentedString(takedownsFirstXMinutes)).append("\n");
    sb.append("    takedownsInAlcove: ").append(toIndentedString(takedownsInAlcove)).append("\n");
    sb.append("    takedownsInEnemyFountain: ").append(toIndentedString(takedownsInEnemyFountain)).append("\n");
    sb.append("    teamBaronKills: ").append(toIndentedString(teamBaronKills)).append("\n");
    sb.append("    teamDamagePercentage: ").append(toIndentedString(teamDamagePercentage)).append("\n");
    sb.append("    teamElderDragonKills: ").append(toIndentedString(teamElderDragonKills)).append("\n");
    sb.append("    teamRiftHeraldKills: ").append(toIndentedString(teamRiftHeraldKills)).append("\n");
    sb.append("    teleportTakedowns: ").append(toIndentedString(teleportTakedowns)).append("\n");
    sb.append("    thirdInhibitorDestroyedTime: ").append(toIndentedString(thirdInhibitorDestroyedTime)).append("\n");
    sb.append("    threeWardsOneSweeperCount: ").append(toIndentedString(threeWardsOneSweeperCount)).append("\n");
    sb.append("    tookLargeDamageSurvived: ").append(toIndentedString(tookLargeDamageSurvived)).append("\n");
    sb.append("    turretPlatesTaken: ").append(toIndentedString(turretPlatesTaken)).append("\n");
    sb.append("    turretsTakenWithRiftHerald: ").append(toIndentedString(turretsTakenWithRiftHerald)).append("\n");
    sb.append("    turretTakedowns: ").append(toIndentedString(turretTakedowns)).append("\n");
    sb.append("    twentyMinionsIn3SecondsCount: ").append(toIndentedString(twentyMinionsIn3SecondsCount)).append("\n");
    sb.append("    twoWardsOneSweeperCount: ").append(toIndentedString(twoWardsOneSweeperCount)).append("\n");
    sb.append("    unseenRecalls: ").append(toIndentedString(unseenRecalls)).append("\n");
    sb.append("    visionScoreAdvantageLaneOpponent: ").append(toIndentedString(visionScoreAdvantageLaneOpponent)).append("\n");
    sb.append("    visionScorePerMinute: ").append(toIndentedString(visionScorePerMinute)).append("\n");
    sb.append("    wardsGuarded: ").append(toIndentedString(wardsGuarded)).append("\n");
    sb.append("    wardTakedowns: ").append(toIndentedString(wardTakedowns)).append("\n");
    sb.append("    wardTakedownsBefore20M: ").append(toIndentedString(wardTakedownsBefore20M)).append("\n");
    sb.append("    legendaryItemUsed: ").append(toIndentedString(legendaryItemUsed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("12AssistStreakCount");
    openapiFields.add("abilityUses");
    openapiFields.add("acesBefore15Minutes");
    openapiFields.add("alliedJungleMonsterKills");
    openapiFields.add("baronBuffGoldAdvantageOverThreshold");
    openapiFields.add("baronTakedowns");
    openapiFields.add("blastConeOppositeOpponentCount");
    openapiFields.add("bountyGold");
    openapiFields.add("buffsStolen");
    openapiFields.add("completeSupportQuestInTime");
    openapiFields.add("controlWardsPlaced");
    openapiFields.add("controlWardTimeCoverageInRiverOrEnemyHalf");
    openapiFields.add("damagePerMinute");
    openapiFields.add("damageTakenOnTeamPercentage");
    openapiFields.add("dancedWithRiftHerald");
    openapiFields.add("deathsByEnemyChamps");
    openapiFields.add("dodgeSkillShotsSmallWindow");
    openapiFields.add("doubleAces");
    openapiFields.add("dragonTakedowns");
    openapiFields.add("earliestBaron");
    openapiFields.add("earliestDragonTakedown");
    openapiFields.add("earliestElderDragon");
    openapiFields.add("earlyLaningPhaseGoldExpAdvantage");
    openapiFields.add("effectiveHealAndShielding");
    openapiFields.add("elderDragonKillsWithOpposingSoul");
    openapiFields.add("elderDragonMultikills");
    openapiFields.add("enemyChampionImmobilizations");
    openapiFields.add("enemyJungleMonsterKills");
    openapiFields.add("epicMonsterKillsNearEnemyJungler");
    openapiFields.add("epicMonsterKillsWithin30SecondsOfSpawn");
    openapiFields.add("epicMonsterSteals");
    openapiFields.add("epicMonsterStolenWithoutSmite");
    openapiFields.add("fasterSupportQuestCompletion");
    openapiFields.add("fastestLegendary");
    openapiFields.add("firstTurretKilled");
    openapiFields.add("firstTurretKilledTime");
    openapiFields.add("flawlessAces");
    openapiFields.add("fullTeamTakedown");
    openapiFields.add("gameLength");
    openapiFields.add("getTakedownsInAllLanesEarlyJungleAsLaner");
    openapiFields.add("goldPerMinute");
    openapiFields.add("hadAfkTeammate");
    openapiFields.add("hadOpenNexus");
    openapiFields.add("highestChampionDamage");
    openapiFields.add("highestCrowdControlScore");
    openapiFields.add("highestWardKills");
    openapiFields.add("immobilizeAndKillWithAlly");
    openapiFields.add("initialBuffCount");
    openapiFields.add("initialCrabCount");
    openapiFields.add("jungleCsBefore10Minutes");
    openapiFields.add("junglerKillsEarlyJungle");
    openapiFields.add("junglerTakedownsNearDamagedEpicMonster");
    openapiFields.add("kda");
    openapiFields.add("killAfterHiddenWithAlly");
    openapiFields.add("killedChampTookFullTeamDamageSurvived");
    openapiFields.add("killingSprees");
    openapiFields.add("killParticipation");
    openapiFields.add("killsNearEnemyTurret");
    openapiFields.add("killsOnLanersEarlyJungleAsJungler");
    openapiFields.add("killsOnOtherLanesEarlyJungleAsLaner");
    openapiFields.add("killsOnRecentlyHealedByAramPack");
    openapiFields.add("killsUnderOwnTurret");
    openapiFields.add("killsWithHelpFromEpicMonster");
    openapiFields.add("knockEnemyIntoTeamAndKill");
    openapiFields.add("kTurretsDestroyedBeforePlatesFall");
    openapiFields.add("landSkillShotsEarlyGame");
    openapiFields.add("laneMinionsFirst10Minutes");
    openapiFields.add("laningPhaseGoldExpAdvantage");
    openapiFields.add("legendaryCount");
    openapiFields.add("lostAnInhibitor");
    openapiFields.add("maxCsAdvantageOnLaneOpponent");
    openapiFields.add("maxKillDeficit");
    openapiFields.add("maxLevelLeadLaneOpponent");
    openapiFields.add("mejaisFullStackInTime");
    openapiFields.add("moreEnemyJungleThanOpponent");
    openapiFields.add("mostWardsDestroyedOneSweeper");
    openapiFields.add("multiKillOneSpell");
    openapiFields.add("multikills");
    openapiFields.add("multikillsAfterAggressiveFlash");
    openapiFields.add("multiTurretRiftHeraldCount");
    openapiFields.add("mythicItemUsed");
    openapiFields.add("outerTurretExecutesBefore10Minutes");
    openapiFields.add("outnumberedKills");
    openapiFields.add("outnumberedNexusKill");
    openapiFields.add("perfectDragonSoulsTaken");
    openapiFields.add("perfectGame");
    openapiFields.add("pickKillWithAlly");
    openapiFields.add("playedChampSelectPosition");
    openapiFields.add("poroExplosions");
    openapiFields.add("quickCleanse");
    openapiFields.add("quickFirstTurret");
    openapiFields.add("quickSoloKills");
    openapiFields.add("riftHeraldTakedowns");
    openapiFields.add("saveAllyFromDeath");
    openapiFields.add("scuttleCrabKills");
    openapiFields.add("shortestTimeToAceFromFirstTakedown");
    openapiFields.add("skillshotsDodged");
    openapiFields.add("skillshotsHit");
    openapiFields.add("snowballsHit");
    openapiFields.add("soloBaronKills");
    openapiFields.add("soloKills");
    openapiFields.add("soloTurretsLategame");
    openapiFields.add("stealthWardsPlaced");
    openapiFields.add("survivedSingleDigitHpCount");
    openapiFields.add("survivedThreeImmobilizesInFight");
    openapiFields.add("takedownOnFirstTurret");
    openapiFields.add("takedowns");
    openapiFields.add("takedownsAfterGainingLevelAdvantage");
    openapiFields.add("takedownsBeforeJungleMinionSpawn");
    openapiFields.add("takedownsFirst25Minutes");
    openapiFields.add("takedownsFirstXMinutes");
    openapiFields.add("takedownsInAlcove");
    openapiFields.add("takedownsInEnemyFountain");
    openapiFields.add("teamBaronKills");
    openapiFields.add("teamDamagePercentage");
    openapiFields.add("teamElderDragonKills");
    openapiFields.add("teamRiftHeraldKills");
    openapiFields.add("teleportTakedowns");
    openapiFields.add("thirdInhibitorDestroyedTime");
    openapiFields.add("threeWardsOneSweeperCount");
    openapiFields.add("tookLargeDamageSurvived");
    openapiFields.add("turretPlatesTaken");
    openapiFields.add("turretsTakenWithRiftHerald");
    openapiFields.add("turretTakedowns");
    openapiFields.add("twentyMinionsIn3SecondsCount");
    openapiFields.add("twoWardsOneSweeperCount");
    openapiFields.add("unseenRecalls");
    openapiFields.add("visionScoreAdvantageLaneOpponent");
    openapiFields.add("visionScorePerMinute");
    openapiFields.add("wardsGuarded");
    openapiFields.add("wardTakedowns");
    openapiFields.add("wardTakedownsBefore20M");
    openapiFields.add("legendaryItemUsed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MatchV5ParticipantChallenges
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MatchV5ParticipantChallenges.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchV5ParticipantChallenges is not found in the empty JSON string", MatchV5ParticipantChallenges.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MatchV5ParticipantChallenges.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchV5ParticipantChallenges` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("legendaryItemUsed") != null && !jsonObj.get("legendaryItemUsed").isJsonNull() && !jsonObj.get("legendaryItemUsed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `legendaryItemUsed` to be an array in the JSON string but got `%s`", jsonObj.get("legendaryItemUsed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchV5ParticipantChallenges.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchV5ParticipantChallenges' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchV5ParticipantChallenges> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchV5ParticipantChallenges.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchV5ParticipantChallenges>() {
           @Override
           public void write(JsonWriter out, MatchV5ParticipantChallenges value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchV5ParticipantChallenges read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MatchV5ParticipantChallenges given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MatchV5ParticipantChallenges
  * @throws IOException if the JSON string is invalid with respect to MatchV5ParticipantChallenges
  */
  public static MatchV5ParticipantChallenges fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchV5ParticipantChallenges.class);
  }

 /**
  * Convert an instance of MatchV5ParticipantChallenges to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

