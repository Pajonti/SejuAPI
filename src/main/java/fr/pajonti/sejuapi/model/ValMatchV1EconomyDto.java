/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * ValMatchV1EconomyDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class ValMatchV1EconomyDto {
  public static final String SERIALIZED_NAME_LOADOUT_VALUE = "loadoutValue";
  @SerializedName(SERIALIZED_NAME_LOADOUT_VALUE)
  private Integer loadoutValue;

  public static final String SERIALIZED_NAME_WEAPON = "weapon";
  @SerializedName(SERIALIZED_NAME_WEAPON)
  private String weapon;

  public static final String SERIALIZED_NAME_ARMOR = "armor";
  @SerializedName(SERIALIZED_NAME_ARMOR)
  private String armor;

  public static final String SERIALIZED_NAME_REMAINING = "remaining";
  @SerializedName(SERIALIZED_NAME_REMAINING)
  private Integer remaining;

  public static final String SERIALIZED_NAME_SPENT = "spent";
  @SerializedName(SERIALIZED_NAME_SPENT)
  private Integer spent;

  public ValMatchV1EconomyDto() {
  }

  public ValMatchV1EconomyDto loadoutValue(Integer loadoutValue) {
    this.loadoutValue = loadoutValue;
    return this;
  }

   /**
   * Get loadoutValue
   * @return loadoutValue
  **/
  @javax.annotation.Nonnull
  public Integer getLoadoutValue() {
    return loadoutValue;
  }

  public void setLoadoutValue(Integer loadoutValue) {
    this.loadoutValue = loadoutValue;
  }


  public ValMatchV1EconomyDto weapon(String weapon) {
    this.weapon = weapon;
    return this;
  }

   /**
   * Get weapon
   * @return weapon
  **/
  @javax.annotation.Nonnull
  public String getWeapon() {
    return weapon;
  }

  public void setWeapon(String weapon) {
    this.weapon = weapon;
  }


  public ValMatchV1EconomyDto armor(String armor) {
    this.armor = armor;
    return this;
  }

   /**
   * Get armor
   * @return armor
  **/
  @javax.annotation.Nonnull
  public String getArmor() {
    return armor;
  }

  public void setArmor(String armor) {
    this.armor = armor;
  }


  public ValMatchV1EconomyDto remaining(Integer remaining) {
    this.remaining = remaining;
    return this;
  }

   /**
   * Get remaining
   * @return remaining
  **/
  @javax.annotation.Nonnull
  public Integer getRemaining() {
    return remaining;
  }

  public void setRemaining(Integer remaining) {
    this.remaining = remaining;
  }


  public ValMatchV1EconomyDto spent(Integer spent) {
    this.spent = spent;
    return this;
  }

   /**
   * Get spent
   * @return spent
  **/
  @javax.annotation.Nonnull
  public Integer getSpent() {
    return spent;
  }

  public void setSpent(Integer spent) {
    this.spent = spent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValMatchV1EconomyDto valMatchV1EconomyDto = (ValMatchV1EconomyDto) o;
    return Objects.equals(this.loadoutValue, valMatchV1EconomyDto.loadoutValue) &&
        Objects.equals(this.weapon, valMatchV1EconomyDto.weapon) &&
        Objects.equals(this.armor, valMatchV1EconomyDto.armor) &&
        Objects.equals(this.remaining, valMatchV1EconomyDto.remaining) &&
        Objects.equals(this.spent, valMatchV1EconomyDto.spent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loadoutValue, weapon, armor, remaining, spent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValMatchV1EconomyDto {\n");
    sb.append("    loadoutValue: ").append(toIndentedString(loadoutValue)).append("\n");
    sb.append("    weapon: ").append(toIndentedString(weapon)).append("\n");
    sb.append("    armor: ").append(toIndentedString(armor)).append("\n");
    sb.append("    remaining: ").append(toIndentedString(remaining)).append("\n");
    sb.append("    spent: ").append(toIndentedString(spent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("loadoutValue");
    openapiFields.add("weapon");
    openapiFields.add("armor");
    openapiFields.add("remaining");
    openapiFields.add("spent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("loadoutValue");
    openapiRequiredFields.add("weapon");
    openapiRequiredFields.add("armor");
    openapiRequiredFields.add("remaining");
    openapiRequiredFields.add("spent");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ValMatchV1EconomyDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValMatchV1EconomyDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValMatchV1EconomyDto is not found in the empty JSON string", ValMatchV1EconomyDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValMatchV1EconomyDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValMatchV1EconomyDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ValMatchV1EconomyDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("weapon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weapon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weapon").toString()));
      }
      if (!jsonObj.get("armor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `armor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("armor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValMatchV1EconomyDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValMatchV1EconomyDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValMatchV1EconomyDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValMatchV1EconomyDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ValMatchV1EconomyDto>() {
           @Override
           public void write(JsonWriter out, ValMatchV1EconomyDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValMatchV1EconomyDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ValMatchV1EconomyDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ValMatchV1EconomyDto
  * @throws IOException if the JSON string is invalid with respect to ValMatchV1EconomyDto
  */
  public static ValMatchV1EconomyDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValMatchV1EconomyDto.class);
  }

 /**
  * Convert an instance of ValMatchV1EconomyDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

