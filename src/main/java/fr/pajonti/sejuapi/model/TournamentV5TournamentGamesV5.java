/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.pajonti.sejuapi.model.TournamentV5TournamentTeamV5;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * TournamentV5TournamentGamesV5
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class TournamentV5TournamentGamesV5 {
  public static final String SERIALIZED_NAME_WINNING_TEAM = "winningTeam";
  @SerializedName(SERIALIZED_NAME_WINNING_TEAM)
  private List<TournamentV5TournamentTeamV5> winningTeam = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOSING_TEAM = "losingTeam";
  @SerializedName(SERIALIZED_NAME_LOSING_TEAM)
  private List<TournamentV5TournamentTeamV5> losingTeam = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHORT_CODE = "shortCode";
  @SerializedName(SERIALIZED_NAME_SHORT_CODE)
  private String shortCode;

  public static final String SERIALIZED_NAME_META_DATA = "metaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private String metaData;

  public static final String SERIALIZED_NAME_GAME_ID = "gameId";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private Long gameId;

  public static final String SERIALIZED_NAME_GAME_NAME = "gameName";
  @SerializedName(SERIALIZED_NAME_GAME_NAME)
  private String gameName;

  public static final String SERIALIZED_NAME_GAME_TYPE = "gameType";
  @SerializedName(SERIALIZED_NAME_GAME_TYPE)
  private String gameType;

  public static final String SERIALIZED_NAME_GAME_MAP = "gameMap";
  @SerializedName(SERIALIZED_NAME_GAME_MAP)
  private Integer gameMap;

  public static final String SERIALIZED_NAME_GAME_MODE = "gameMode";
  @SerializedName(SERIALIZED_NAME_GAME_MODE)
  private String gameMode;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public TournamentV5TournamentGamesV5() {
  }

  public TournamentV5TournamentGamesV5 winningTeam(List<TournamentV5TournamentTeamV5> winningTeam) {
    this.winningTeam = winningTeam;
    return this;
  }

  public TournamentV5TournamentGamesV5 addWinningTeamItem(TournamentV5TournamentTeamV5 winningTeamItem) {
    if (this.winningTeam == null) {
      this.winningTeam = new ArrayList<>();
    }
    this.winningTeam.add(winningTeamItem);
    return this;
  }

   /**
   * Get winningTeam
   * @return winningTeam
  **/
  @javax.annotation.Nonnull
  public List<TournamentV5TournamentTeamV5> getWinningTeam() {
    return winningTeam;
  }

  public void setWinningTeam(List<TournamentV5TournamentTeamV5> winningTeam) {
    this.winningTeam = winningTeam;
  }


  public TournamentV5TournamentGamesV5 losingTeam(List<TournamentV5TournamentTeamV5> losingTeam) {
    this.losingTeam = losingTeam;
    return this;
  }

  public TournamentV5TournamentGamesV5 addLosingTeamItem(TournamentV5TournamentTeamV5 losingTeamItem) {
    if (this.losingTeam == null) {
      this.losingTeam = new ArrayList<>();
    }
    this.losingTeam.add(losingTeamItem);
    return this;
  }

   /**
   * Get losingTeam
   * @return losingTeam
  **/
  @javax.annotation.Nonnull
  public List<TournamentV5TournamentTeamV5> getLosingTeam() {
    return losingTeam;
  }

  public void setLosingTeam(List<TournamentV5TournamentTeamV5> losingTeam) {
    this.losingTeam = losingTeam;
  }


  public TournamentV5TournamentGamesV5 shortCode(String shortCode) {
    this.shortCode = shortCode;
    return this;
  }

   /**
   * Tournament Code
   * @return shortCode
  **/
  @javax.annotation.Nonnull
  public String getShortCode() {
    return shortCode;
  }

  public void setShortCode(String shortCode) {
    this.shortCode = shortCode;
  }


  public TournamentV5TournamentGamesV5 metaData(String metaData) {
    this.metaData = metaData;
    return this;
  }

   /**
   * Metadata for the TournamentCode
   * @return metaData
  **/
  @javax.annotation.Nullable
  public String getMetaData() {
    return metaData;
  }

  public void setMetaData(String metaData) {
    this.metaData = metaData;
  }


  public TournamentV5TournamentGamesV5 gameId(Long gameId) {
    this.gameId = gameId;
    return this;
  }

   /**
   * Get gameId
   * @return gameId
  **/
  @javax.annotation.Nonnull
  public Long getGameId() {
    return gameId;
  }

  public void setGameId(Long gameId) {
    this.gameId = gameId;
  }


  public TournamentV5TournamentGamesV5 gameName(String gameName) {
    this.gameName = gameName;
    return this;
  }

   /**
   * Get gameName
   * @return gameName
  **/
  @javax.annotation.Nonnull
  public String getGameName() {
    return gameName;
  }

  public void setGameName(String gameName) {
    this.gameName = gameName;
  }


  public TournamentV5TournamentGamesV5 gameType(String gameType) {
    this.gameType = gameType;
    return this;
  }

   /**
   * Get gameType
   * @return gameType
  **/
  @javax.annotation.Nonnull
  public String getGameType() {
    return gameType;
  }

  public void setGameType(String gameType) {
    this.gameType = gameType;
  }


  public TournamentV5TournamentGamesV5 gameMap(Integer gameMap) {
    this.gameMap = gameMap;
    return this;
  }

   /**
   * Game Map ID
   * @return gameMap
  **/
  @javax.annotation.Nonnull
  public Integer getGameMap() {
    return gameMap;
  }

  public void setGameMap(Integer gameMap) {
    this.gameMap = gameMap;
  }


  public TournamentV5TournamentGamesV5 gameMode(String gameMode) {
    this.gameMode = gameMode;
    return this;
  }

   /**
   * Get gameMode
   * @return gameMode
  **/
  @javax.annotation.Nonnull
  public String getGameMode() {
    return gameMode;
  }

  public void setGameMode(String gameMode) {
    this.gameMode = gameMode;
  }


  public TournamentV5TournamentGamesV5 region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Region of the game
   * @return region
  **/
  @javax.annotation.Nonnull
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TournamentV5TournamentGamesV5 tournamentV5TournamentGamesV5 = (TournamentV5TournamentGamesV5) o;
    return Objects.equals(this.winningTeam, tournamentV5TournamentGamesV5.winningTeam) &&
        Objects.equals(this.losingTeam, tournamentV5TournamentGamesV5.losingTeam) &&
        Objects.equals(this.shortCode, tournamentV5TournamentGamesV5.shortCode) &&
        Objects.equals(this.metaData, tournamentV5TournamentGamesV5.metaData) &&
        Objects.equals(this.gameId, tournamentV5TournamentGamesV5.gameId) &&
        Objects.equals(this.gameName, tournamentV5TournamentGamesV5.gameName) &&
        Objects.equals(this.gameType, tournamentV5TournamentGamesV5.gameType) &&
        Objects.equals(this.gameMap, tournamentV5TournamentGamesV5.gameMap) &&
        Objects.equals(this.gameMode, tournamentV5TournamentGamesV5.gameMode) &&
        Objects.equals(this.region, tournamentV5TournamentGamesV5.region);
  }

  @Override
  public int hashCode() {
    return Objects.hash(winningTeam, losingTeam, shortCode, metaData, gameId, gameName, gameType, gameMap, gameMode, region);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TournamentV5TournamentGamesV5 {\n");
    sb.append("    winningTeam: ").append(toIndentedString(winningTeam)).append("\n");
    sb.append("    losingTeam: ").append(toIndentedString(losingTeam)).append("\n");
    sb.append("    shortCode: ").append(toIndentedString(shortCode)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    gameName: ").append(toIndentedString(gameName)).append("\n");
    sb.append("    gameType: ").append(toIndentedString(gameType)).append("\n");
    sb.append("    gameMap: ").append(toIndentedString(gameMap)).append("\n");
    sb.append("    gameMode: ").append(toIndentedString(gameMode)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("winningTeam");
    openapiFields.add("losingTeam");
    openapiFields.add("shortCode");
    openapiFields.add("metaData");
    openapiFields.add("gameId");
    openapiFields.add("gameName");
    openapiFields.add("gameType");
    openapiFields.add("gameMap");
    openapiFields.add("gameMode");
    openapiFields.add("region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("winningTeam");
    openapiRequiredFields.add("losingTeam");
    openapiRequiredFields.add("shortCode");
    openapiRequiredFields.add("gameId");
    openapiRequiredFields.add("gameName");
    openapiRequiredFields.add("gameType");
    openapiRequiredFields.add("gameMap");
    openapiRequiredFields.add("gameMode");
    openapiRequiredFields.add("region");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TournamentV5TournamentGamesV5
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TournamentV5TournamentGamesV5.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TournamentV5TournamentGamesV5 is not found in the empty JSON string", TournamentV5TournamentGamesV5.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TournamentV5TournamentGamesV5.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TournamentV5TournamentGamesV5` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TournamentV5TournamentGamesV5.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("winningTeam").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `winningTeam` to be an array in the JSON string but got `%s`", jsonObj.get("winningTeam").toString()));
      }

      JsonArray jsonArraywinningTeam = jsonObj.getAsJsonArray("winningTeam");
      // validate the required field `winningTeam` (array)
      for (int i = 0; i < jsonArraywinningTeam.size(); i++) {
        TournamentV5TournamentTeamV5.validateJsonElement(jsonArraywinningTeam.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("losingTeam").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `losingTeam` to be an array in the JSON string but got `%s`", jsonObj.get("losingTeam").toString()));
      }

      JsonArray jsonArraylosingTeam = jsonObj.getAsJsonArray("losingTeam");
      // validate the required field `losingTeam` (array)
      for (int i = 0; i < jsonArraylosingTeam.size(); i++) {
        TournamentV5TournamentTeamV5.validateJsonElement(jsonArraylosingTeam.get(i));
      };
      if (!jsonObj.get("shortCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortCode").toString()));
      }
      if ((jsonObj.get("metaData") != null && !jsonObj.get("metaData").isJsonNull()) && !jsonObj.get("metaData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metaData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metaData").toString()));
      }
      if (!jsonObj.get("gameName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gameName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gameName").toString()));
      }
      if (!jsonObj.get("gameType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gameType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gameType").toString()));
      }
      if (!jsonObj.get("gameMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gameMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gameMode").toString()));
      }
      if (!jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TournamentV5TournamentGamesV5.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TournamentV5TournamentGamesV5' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TournamentV5TournamentGamesV5> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TournamentV5TournamentGamesV5.class));

       return (TypeAdapter<T>) new TypeAdapter<TournamentV5TournamentGamesV5>() {
           @Override
           public void write(JsonWriter out, TournamentV5TournamentGamesV5 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TournamentV5TournamentGamesV5 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TournamentV5TournamentGamesV5 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TournamentV5TournamentGamesV5
  * @throws IOException if the JSON string is invalid with respect to TournamentV5TournamentGamesV5
  */
  public static TournamentV5TournamentGamesV5 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TournamentV5TournamentGamesV5.class);
  }

 /**
  * Convert an instance of TournamentV5TournamentGamesV5 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

