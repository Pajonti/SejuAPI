/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.pajonti.sejuapi.model.TftMatchV1CompanionDto;
import fr.pajonti.sejuapi.model.TftMatchV1ParticipantMissionsDto;
import fr.pajonti.sejuapi.model.TftMatchV1TraitDto;
import fr.pajonti.sejuapi.model.TftMatchV1UnitDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * TftMatchV1ParticipantDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class TftMatchV1ParticipantDto {
  public static final String SERIALIZED_NAME_AUGMENTS = "augments";
  @SerializedName(SERIALIZED_NAME_AUGMENTS)
  private List<String> augments;

  public static final String SERIALIZED_NAME_PARTNER_GROUP_ID = "partner_group_id";
  @SerializedName(SERIALIZED_NAME_PARTNER_GROUP_ID)
  private Integer partnerGroupId;

  public static final String SERIALIZED_NAME_COMPANION = "companion";
  @SerializedName(SERIALIZED_NAME_COMPANION)
  private TftMatchV1CompanionDto companion;

  public static final String SERIALIZED_NAME_GOLD_LEFT = "gold_left";
  @SerializedName(SERIALIZED_NAME_GOLD_LEFT)
  private Integer goldLeft;

  public static final String SERIALIZED_NAME_LAST_ROUND = "last_round";
  @SerializedName(SERIALIZED_NAME_LAST_ROUND)
  private Integer lastRound;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_PLACEMENT = "placement";
  @SerializedName(SERIALIZED_NAME_PLACEMENT)
  private Integer placement;

  public static final String SERIALIZED_NAME_PLAYERS_ELIMINATED = "players_eliminated";
  @SerializedName(SERIALIZED_NAME_PLAYERS_ELIMINATED)
  private Integer playersEliminated;

  public static final String SERIALIZED_NAME_PUUID = "puuid";
  @SerializedName(SERIALIZED_NAME_PUUID)
  private String puuid;

  public static final String SERIALIZED_NAME_TIME_ELIMINATED = "time_eliminated";
  @SerializedName(SERIALIZED_NAME_TIME_ELIMINATED)
  private Float timeEliminated;

  public static final String SERIALIZED_NAME_TOTAL_DAMAGE_TO_PLAYERS = "total_damage_to_players";
  @SerializedName(SERIALIZED_NAME_TOTAL_DAMAGE_TO_PLAYERS)
  private Integer totalDamageToPlayers;

  public static final String SERIALIZED_NAME_TRAITS = "traits";
  @SerializedName(SERIALIZED_NAME_TRAITS)
  private List<TftMatchV1TraitDto> traits = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private List<TftMatchV1UnitDto> units = new ArrayList<>();

  public static final String SERIALIZED_NAME_MISSIONS = "missions";
  @SerializedName(SERIALIZED_NAME_MISSIONS)
  private TftMatchV1ParticipantMissionsDto missions;

  public TftMatchV1ParticipantDto() {
  }

  public TftMatchV1ParticipantDto augments(List<String> augments) {
    this.augments = augments;
    return this;
  }

  public TftMatchV1ParticipantDto addAugmentsItem(String augmentsItem) {
    if (this.augments == null) {
      this.augments = new ArrayList<>();
    }
    this.augments.add(augmentsItem);
    return this;
  }

   /**
   * Get augments
   * @return augments
  **/
  @javax.annotation.Nullable
  public List<String> getAugments() {
    return augments;
  }

  public void setAugments(List<String> augments) {
    this.augments = augments;
  }


  public TftMatchV1ParticipantDto partnerGroupId(Integer partnerGroupId) {
    this.partnerGroupId = partnerGroupId;
    return this;
  }

   /**
   * Get partnerGroupId
   * @return partnerGroupId
  **/
  @javax.annotation.Nullable
  public Integer getPartnerGroupId() {
    return partnerGroupId;
  }

  public void setPartnerGroupId(Integer partnerGroupId) {
    this.partnerGroupId = partnerGroupId;
  }


  public TftMatchV1ParticipantDto companion(TftMatchV1CompanionDto companion) {
    this.companion = companion;
    return this;
  }

   /**
   * Get companion
   * @return companion
  **/
  @javax.annotation.Nonnull
  public TftMatchV1CompanionDto getCompanion() {
    return companion;
  }

  public void setCompanion(TftMatchV1CompanionDto companion) {
    this.companion = companion;
  }


  public TftMatchV1ParticipantDto goldLeft(Integer goldLeft) {
    this.goldLeft = goldLeft;
    return this;
  }

   /**
   * Gold left after participant was eliminated.
   * @return goldLeft
  **/
  @javax.annotation.Nonnull
  public Integer getGoldLeft() {
    return goldLeft;
  }

  public void setGoldLeft(Integer goldLeft) {
    this.goldLeft = goldLeft;
  }


  public TftMatchV1ParticipantDto lastRound(Integer lastRound) {
    this.lastRound = lastRound;
    return this;
  }

   /**
   * The round the participant was eliminated in. Note: If the player was eliminated in stage 2-1 their last_round would be 5.
   * @return lastRound
  **/
  @javax.annotation.Nonnull
  public Integer getLastRound() {
    return lastRound;
  }

  public void setLastRound(Integer lastRound) {
    this.lastRound = lastRound;
  }


  public TftMatchV1ParticipantDto level(Integer level) {
    this.level = level;
    return this;
  }

   /**
   * Participant Little Legend level. Note: This is not the number of active units.
   * @return level
  **/
  @javax.annotation.Nonnull
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public TftMatchV1ParticipantDto placement(Integer placement) {
    this.placement = placement;
    return this;
  }

   /**
   * Participant placement upon elimination.
   * @return placement
  **/
  @javax.annotation.Nonnull
  public Integer getPlacement() {
    return placement;
  }

  public void setPlacement(Integer placement) {
    this.placement = placement;
  }


  public TftMatchV1ParticipantDto playersEliminated(Integer playersEliminated) {
    this.playersEliminated = playersEliminated;
    return this;
  }

   /**
   * Number of players the participant eliminated.
   * @return playersEliminated
  **/
  @javax.annotation.Nonnull
  public Integer getPlayersEliminated() {
    return playersEliminated;
  }

  public void setPlayersEliminated(Integer playersEliminated) {
    this.playersEliminated = playersEliminated;
  }


  public TftMatchV1ParticipantDto puuid(String puuid) {
    this.puuid = puuid;
    return this;
  }

   /**
   * Get puuid
   * @return puuid
  **/
  @javax.annotation.Nonnull
  public String getPuuid() {
    return puuid;
  }

  public void setPuuid(String puuid) {
    this.puuid = puuid;
  }


  public TftMatchV1ParticipantDto timeEliminated(Float timeEliminated) {
    this.timeEliminated = timeEliminated;
    return this;
  }

   /**
   * The number of seconds before the participant was eliminated.
   * @return timeEliminated
  **/
  @javax.annotation.Nonnull
  public Float getTimeEliminated() {
    return timeEliminated;
  }

  public void setTimeEliminated(Float timeEliminated) {
    this.timeEliminated = timeEliminated;
  }


  public TftMatchV1ParticipantDto totalDamageToPlayers(Integer totalDamageToPlayers) {
    this.totalDamageToPlayers = totalDamageToPlayers;
    return this;
  }

   /**
   * Damage the participant dealt to other players.
   * @return totalDamageToPlayers
  **/
  @javax.annotation.Nonnull
  public Integer getTotalDamageToPlayers() {
    return totalDamageToPlayers;
  }

  public void setTotalDamageToPlayers(Integer totalDamageToPlayers) {
    this.totalDamageToPlayers = totalDamageToPlayers;
  }


  public TftMatchV1ParticipantDto traits(List<TftMatchV1TraitDto> traits) {
    this.traits = traits;
    return this;
  }

  public TftMatchV1ParticipantDto addTraitsItem(TftMatchV1TraitDto traitsItem) {
    if (this.traits == null) {
      this.traits = new ArrayList<>();
    }
    this.traits.add(traitsItem);
    return this;
  }

   /**
   * A complete list of traits for the participant&#39;s active units.
   * @return traits
  **/
  @javax.annotation.Nonnull
  public List<TftMatchV1TraitDto> getTraits() {
    return traits;
  }

  public void setTraits(List<TftMatchV1TraitDto> traits) {
    this.traits = traits;
  }


  public TftMatchV1ParticipantDto units(List<TftMatchV1UnitDto> units) {
    this.units = units;
    return this;
  }

  public TftMatchV1ParticipantDto addUnitsItem(TftMatchV1UnitDto unitsItem) {
    if (this.units == null) {
      this.units = new ArrayList<>();
    }
    this.units.add(unitsItem);
    return this;
  }

   /**
   * A list of active units for the participant.
   * @return units
  **/
  @javax.annotation.Nonnull
  public List<TftMatchV1UnitDto> getUnits() {
    return units;
  }

  public void setUnits(List<TftMatchV1UnitDto> units) {
    this.units = units;
  }


  public TftMatchV1ParticipantDto missions(TftMatchV1ParticipantMissionsDto missions) {
    this.missions = missions;
    return this;
  }

   /**
   * Get missions
   * @return missions
  **/
  @javax.annotation.Nullable
  public TftMatchV1ParticipantMissionsDto getMissions() {
    return missions;
  }

  public void setMissions(TftMatchV1ParticipantMissionsDto missions) {
    this.missions = missions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TftMatchV1ParticipantDto tftMatchV1ParticipantDto = (TftMatchV1ParticipantDto) o;
    return Objects.equals(this.augments, tftMatchV1ParticipantDto.augments) &&
        Objects.equals(this.partnerGroupId, tftMatchV1ParticipantDto.partnerGroupId) &&
        Objects.equals(this.companion, tftMatchV1ParticipantDto.companion) &&
        Objects.equals(this.goldLeft, tftMatchV1ParticipantDto.goldLeft) &&
        Objects.equals(this.lastRound, tftMatchV1ParticipantDto.lastRound) &&
        Objects.equals(this.level, tftMatchV1ParticipantDto.level) &&
        Objects.equals(this.placement, tftMatchV1ParticipantDto.placement) &&
        Objects.equals(this.playersEliminated, tftMatchV1ParticipantDto.playersEliminated) &&
        Objects.equals(this.puuid, tftMatchV1ParticipantDto.puuid) &&
        Objects.equals(this.timeEliminated, tftMatchV1ParticipantDto.timeEliminated) &&
        Objects.equals(this.totalDamageToPlayers, tftMatchV1ParticipantDto.totalDamageToPlayers) &&
        Objects.equals(this.traits, tftMatchV1ParticipantDto.traits) &&
        Objects.equals(this.units, tftMatchV1ParticipantDto.units) &&
        Objects.equals(this.missions, tftMatchV1ParticipantDto.missions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(augments, partnerGroupId, companion, goldLeft, lastRound, level, placement, playersEliminated, puuid, timeEliminated, totalDamageToPlayers, traits, units, missions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TftMatchV1ParticipantDto {\n");
    sb.append("    augments: ").append(toIndentedString(augments)).append("\n");
    sb.append("    partnerGroupId: ").append(toIndentedString(partnerGroupId)).append("\n");
    sb.append("    companion: ").append(toIndentedString(companion)).append("\n");
    sb.append("    goldLeft: ").append(toIndentedString(goldLeft)).append("\n");
    sb.append("    lastRound: ").append(toIndentedString(lastRound)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    placement: ").append(toIndentedString(placement)).append("\n");
    sb.append("    playersEliminated: ").append(toIndentedString(playersEliminated)).append("\n");
    sb.append("    puuid: ").append(toIndentedString(puuid)).append("\n");
    sb.append("    timeEliminated: ").append(toIndentedString(timeEliminated)).append("\n");
    sb.append("    totalDamageToPlayers: ").append(toIndentedString(totalDamageToPlayers)).append("\n");
    sb.append("    traits: ").append(toIndentedString(traits)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    missions: ").append(toIndentedString(missions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("augments");
    openapiFields.add("partner_group_id");
    openapiFields.add("companion");
    openapiFields.add("gold_left");
    openapiFields.add("last_round");
    openapiFields.add("level");
    openapiFields.add("placement");
    openapiFields.add("players_eliminated");
    openapiFields.add("puuid");
    openapiFields.add("time_eliminated");
    openapiFields.add("total_damage_to_players");
    openapiFields.add("traits");
    openapiFields.add("units");
    openapiFields.add("missions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("companion");
    openapiRequiredFields.add("gold_left");
    openapiRequiredFields.add("last_round");
    openapiRequiredFields.add("level");
    openapiRequiredFields.add("placement");
    openapiRequiredFields.add("players_eliminated");
    openapiRequiredFields.add("puuid");
    openapiRequiredFields.add("time_eliminated");
    openapiRequiredFields.add("total_damage_to_players");
    openapiRequiredFields.add("traits");
    openapiRequiredFields.add("units");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TftMatchV1ParticipantDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TftMatchV1ParticipantDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TftMatchV1ParticipantDto is not found in the empty JSON string", TftMatchV1ParticipantDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TftMatchV1ParticipantDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TftMatchV1ParticipantDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TftMatchV1ParticipantDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("augments") != null && !jsonObj.get("augments").isJsonNull() && !jsonObj.get("augments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `augments` to be an array in the JSON string but got `%s`", jsonObj.get("augments").toString()));
      }
      // validate the required field `companion`
      TftMatchV1CompanionDto.validateJsonElement(jsonObj.get("companion"));
      if (!jsonObj.get("puuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `puuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("puuid").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("traits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `traits` to be an array in the JSON string but got `%s`", jsonObj.get("traits").toString()));
      }

      JsonArray jsonArraytraits = jsonObj.getAsJsonArray("traits");
      // validate the required field `traits` (array)
      for (int i = 0; i < jsonArraytraits.size(); i++) {
        TftMatchV1TraitDto.validateJsonElement(jsonArraytraits.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("units").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be an array in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }

      JsonArray jsonArrayunits = jsonObj.getAsJsonArray("units");
      // validate the required field `units` (array)
      for (int i = 0; i < jsonArrayunits.size(); i++) {
        TftMatchV1UnitDto.validateJsonElement(jsonArrayunits.get(i));
      };
      // validate the optional field `missions`
      if (jsonObj.get("missions") != null && !jsonObj.get("missions").isJsonNull()) {
        TftMatchV1ParticipantMissionsDto.validateJsonElement(jsonObj.get("missions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TftMatchV1ParticipantDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TftMatchV1ParticipantDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TftMatchV1ParticipantDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TftMatchV1ParticipantDto.class));

       return (TypeAdapter<T>) new TypeAdapter<TftMatchV1ParticipantDto>() {
           @Override
           public void write(JsonWriter out, TftMatchV1ParticipantDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TftMatchV1ParticipantDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TftMatchV1ParticipantDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TftMatchV1ParticipantDto
  * @throws IOException if the JSON string is invalid with respect to TftMatchV1ParticipantDto
  */
  public static TftMatchV1ParticipantDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TftMatchV1ParticipantDto.class);
  }

 /**
  * Convert an instance of TftMatchV1ParticipantDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

