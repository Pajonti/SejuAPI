/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * MatchV5MatchTimelineInfoFrameEventVictimDamageDealt
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class MatchV5MatchTimelineInfoFrameEventVictimDamageDealt {
  public static final String SERIALIZED_NAME_BASIC = "basic";
  @SerializedName(SERIALIZED_NAME_BASIC)
  private Boolean basic;

  public static final String SERIALIZED_NAME_MAGIC_DAMAGE = "magicDamage";
  @SerializedName(SERIALIZED_NAME_MAGIC_DAMAGE)
  private Integer magicDamage;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTICIPANT_ID = "participantId";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_ID)
  private Integer participantId;

  public static final String SERIALIZED_NAME_PHYSICAL_DAMAGE = "physicalDamage";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_DAMAGE)
  private Integer physicalDamage;

  public static final String SERIALIZED_NAME_SPELL_NAME = "spellName";
  @SerializedName(SERIALIZED_NAME_SPELL_NAME)
  private String spellName;

  public static final String SERIALIZED_NAME_SPELL_SLOT = "spellSlot";
  @SerializedName(SERIALIZED_NAME_SPELL_SLOT)
  private Integer spellSlot;

  public static final String SERIALIZED_NAME_TRUE_DAMAGE = "trueDamage";
  @SerializedName(SERIALIZED_NAME_TRUE_DAMAGE)
  private Integer trueDamage;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public MatchV5MatchTimelineInfoFrameEventVictimDamageDealt() {
  }

  public MatchV5MatchTimelineInfoFrameEventVictimDamageDealt basic(Boolean basic) {
    this.basic = basic;
    return this;
  }

   /**
   * Get basic
   * @return basic
  **/
  @javax.annotation.Nonnull
  public Boolean getBasic() {
    return basic;
  }

  public void setBasic(Boolean basic) {
    this.basic = basic;
  }


  public MatchV5MatchTimelineInfoFrameEventVictimDamageDealt magicDamage(Integer magicDamage) {
    this.magicDamage = magicDamage;
    return this;
  }

   /**
   * Get magicDamage
   * @return magicDamage
  **/
  @javax.annotation.Nonnull
  public Integer getMagicDamage() {
    return magicDamage;
  }

  public void setMagicDamage(Integer magicDamage) {
    this.magicDamage = magicDamage;
  }


  public MatchV5MatchTimelineInfoFrameEventVictimDamageDealt name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MatchV5MatchTimelineInfoFrameEventVictimDamageDealt participantId(Integer participantId) {
    this.participantId = participantId;
    return this;
  }

   /**
   * Get participantId
   * @return participantId
  **/
  @javax.annotation.Nonnull
  public Integer getParticipantId() {
    return participantId;
  }

  public void setParticipantId(Integer participantId) {
    this.participantId = participantId;
  }


  public MatchV5MatchTimelineInfoFrameEventVictimDamageDealt physicalDamage(Integer physicalDamage) {
    this.physicalDamage = physicalDamage;
    return this;
  }

   /**
   * Get physicalDamage
   * @return physicalDamage
  **/
  @javax.annotation.Nonnull
  public Integer getPhysicalDamage() {
    return physicalDamage;
  }

  public void setPhysicalDamage(Integer physicalDamage) {
    this.physicalDamage = physicalDamage;
  }


  public MatchV5MatchTimelineInfoFrameEventVictimDamageDealt spellName(String spellName) {
    this.spellName = spellName;
    return this;
  }

   /**
   * Get spellName
   * @return spellName
  **/
  @javax.annotation.Nonnull
  public String getSpellName() {
    return spellName;
  }

  public void setSpellName(String spellName) {
    this.spellName = spellName;
  }


  public MatchV5MatchTimelineInfoFrameEventVictimDamageDealt spellSlot(Integer spellSlot) {
    this.spellSlot = spellSlot;
    return this;
  }

   /**
   * Get spellSlot
   * @return spellSlot
  **/
  @javax.annotation.Nonnull
  public Integer getSpellSlot() {
    return spellSlot;
  }

  public void setSpellSlot(Integer spellSlot) {
    this.spellSlot = spellSlot;
  }


  public MatchV5MatchTimelineInfoFrameEventVictimDamageDealt trueDamage(Integer trueDamage) {
    this.trueDamage = trueDamage;
    return this;
  }

   /**
   * Get trueDamage
   * @return trueDamage
  **/
  @javax.annotation.Nonnull
  public Integer getTrueDamage() {
    return trueDamage;
  }

  public void setTrueDamage(Integer trueDamage) {
    this.trueDamage = trueDamage;
  }


  public MatchV5MatchTimelineInfoFrameEventVictimDamageDealt type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchV5MatchTimelineInfoFrameEventVictimDamageDealt matchV5MatchTimelineInfoFrameEventVictimDamageDealt = (MatchV5MatchTimelineInfoFrameEventVictimDamageDealt) o;
    return Objects.equals(this.basic, matchV5MatchTimelineInfoFrameEventVictimDamageDealt.basic) &&
        Objects.equals(this.magicDamage, matchV5MatchTimelineInfoFrameEventVictimDamageDealt.magicDamage) &&
        Objects.equals(this.name, matchV5MatchTimelineInfoFrameEventVictimDamageDealt.name) &&
        Objects.equals(this.participantId, matchV5MatchTimelineInfoFrameEventVictimDamageDealt.participantId) &&
        Objects.equals(this.physicalDamage, matchV5MatchTimelineInfoFrameEventVictimDamageDealt.physicalDamage) &&
        Objects.equals(this.spellName, matchV5MatchTimelineInfoFrameEventVictimDamageDealt.spellName) &&
        Objects.equals(this.spellSlot, matchV5MatchTimelineInfoFrameEventVictimDamageDealt.spellSlot) &&
        Objects.equals(this.trueDamage, matchV5MatchTimelineInfoFrameEventVictimDamageDealt.trueDamage) &&
        Objects.equals(this.type, matchV5MatchTimelineInfoFrameEventVictimDamageDealt.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basic, magicDamage, name, participantId, physicalDamage, spellName, spellSlot, trueDamage, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchV5MatchTimelineInfoFrameEventVictimDamageDealt {\n");
    sb.append("    basic: ").append(toIndentedString(basic)).append("\n");
    sb.append("    magicDamage: ").append(toIndentedString(magicDamage)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    participantId: ").append(toIndentedString(participantId)).append("\n");
    sb.append("    physicalDamage: ").append(toIndentedString(physicalDamage)).append("\n");
    sb.append("    spellName: ").append(toIndentedString(spellName)).append("\n");
    sb.append("    spellSlot: ").append(toIndentedString(spellSlot)).append("\n");
    sb.append("    trueDamage: ").append(toIndentedString(trueDamage)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basic");
    openapiFields.add("magicDamage");
    openapiFields.add("name");
    openapiFields.add("participantId");
    openapiFields.add("physicalDamage");
    openapiFields.add("spellName");
    openapiFields.add("spellSlot");
    openapiFields.add("trueDamage");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("basic");
    openapiRequiredFields.add("magicDamage");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("participantId");
    openapiRequiredFields.add("physicalDamage");
    openapiRequiredFields.add("spellName");
    openapiRequiredFields.add("spellSlot");
    openapiRequiredFields.add("trueDamage");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MatchV5MatchTimelineInfoFrameEventVictimDamageDealt
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MatchV5MatchTimelineInfoFrameEventVictimDamageDealt.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchV5MatchTimelineInfoFrameEventVictimDamageDealt is not found in the empty JSON string", MatchV5MatchTimelineInfoFrameEventVictimDamageDealt.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MatchV5MatchTimelineInfoFrameEventVictimDamageDealt.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchV5MatchTimelineInfoFrameEventVictimDamageDealt` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MatchV5MatchTimelineInfoFrameEventVictimDamageDealt.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("spellName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spellName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spellName").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchV5MatchTimelineInfoFrameEventVictimDamageDealt.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchV5MatchTimelineInfoFrameEventVictimDamageDealt' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchV5MatchTimelineInfoFrameEventVictimDamageDealt> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchV5MatchTimelineInfoFrameEventVictimDamageDealt.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchV5MatchTimelineInfoFrameEventVictimDamageDealt>() {
           @Override
           public void write(JsonWriter out, MatchV5MatchTimelineInfoFrameEventVictimDamageDealt value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchV5MatchTimelineInfoFrameEventVictimDamageDealt read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MatchV5MatchTimelineInfoFrameEventVictimDamageDealt given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MatchV5MatchTimelineInfoFrameEventVictimDamageDealt
  * @throws IOException if the JSON string is invalid with respect to MatchV5MatchTimelineInfoFrameEventVictimDamageDealt
  */
  public static MatchV5MatchTimelineInfoFrameEventVictimDamageDealt fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchV5MatchTimelineInfoFrameEventVictimDamageDealt.class);
  }

 /**
  * Convert an instance of MatchV5MatchTimelineInfoFrameEventVictimDamageDealt to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

