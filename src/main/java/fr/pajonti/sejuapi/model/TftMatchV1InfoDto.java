/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.pajonti.sejuapi.model.TftMatchV1ParticipantDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * TftMatchV1InfoDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class TftMatchV1InfoDto {
  public static final String SERIALIZED_NAME_TFT_GAME_TYPE = "tft_game_type";
  @SerializedName(SERIALIZED_NAME_TFT_GAME_TYPE)
  private String tftGameType;

  public static final String SERIALIZED_NAME_TFT_SET_CORE_NAME = "tft_set_core_name";
  @SerializedName(SERIALIZED_NAME_TFT_SET_CORE_NAME)
  private String tftSetCoreName;

  public static final String SERIALIZED_NAME_GAME_DATETIME = "game_datetime";
  @SerializedName(SERIALIZED_NAME_GAME_DATETIME)
  private Long gameDatetime;

  public static final String SERIALIZED_NAME_GAME_LENGTH = "game_length";
  @SerializedName(SERIALIZED_NAME_GAME_LENGTH)
  private Float gameLength;

  public static final String SERIALIZED_NAME_GAME_VARIATION = "game_variation";
  @SerializedName(SERIALIZED_NAME_GAME_VARIATION)
  private String gameVariation;

  public static final String SERIALIZED_NAME_GAME_VERSION = "game_version";
  @SerializedName(SERIALIZED_NAME_GAME_VERSION)
  private String gameVersion;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<TftMatchV1ParticipantDto> participants = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUEUE_ID = "queue_id";
  @SerializedName(SERIALIZED_NAME_QUEUE_ID)
  private Integer queueId;

  public static final String SERIALIZED_NAME_TFT_SET_NUMBER = "tft_set_number";
  @SerializedName(SERIALIZED_NAME_TFT_SET_NUMBER)
  private Integer tftSetNumber;

  public static final String SERIALIZED_NAME_END_OF_GAME_RESULT = "endOfGameResult";
  @SerializedName(SERIALIZED_NAME_END_OF_GAME_RESULT)
  private String endOfGameResult;

  public static final String SERIALIZED_NAME_GAME_CREATION = "gameCreation";
  @SerializedName(SERIALIZED_NAME_GAME_CREATION)
  private Long gameCreation;

  public static final String SERIALIZED_NAME_GAME_ID = "gameId";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private Long gameId;

  public static final String SERIALIZED_NAME_MAP_ID = "mapId";
  @SerializedName(SERIALIZED_NAME_MAP_ID)
  private Long mapId;

  public TftMatchV1InfoDto() {
  }

  public TftMatchV1InfoDto tftGameType(String tftGameType) {
    this.tftGameType = tftGameType;
    return this;
  }

   /**
   * Get tftGameType
   * @return tftGameType
  **/
  @javax.annotation.Nullable
  public String getTftGameType() {
    return tftGameType;
  }

  public void setTftGameType(String tftGameType) {
    this.tftGameType = tftGameType;
  }


  public TftMatchV1InfoDto tftSetCoreName(String tftSetCoreName) {
    this.tftSetCoreName = tftSetCoreName;
    return this;
  }

   /**
   * Get tftSetCoreName
   * @return tftSetCoreName
  **/
  @javax.annotation.Nullable
  public String getTftSetCoreName() {
    return tftSetCoreName;
  }

  public void setTftSetCoreName(String tftSetCoreName) {
    this.tftSetCoreName = tftSetCoreName;
  }


  public TftMatchV1InfoDto gameDatetime(Long gameDatetime) {
    this.gameDatetime = gameDatetime;
    return this;
  }

   /**
   * Unix timestamp.
   * @return gameDatetime
  **/
  @javax.annotation.Nonnull
  public Long getGameDatetime() {
    return gameDatetime;
  }

  public void setGameDatetime(Long gameDatetime) {
    this.gameDatetime = gameDatetime;
  }


  public TftMatchV1InfoDto gameLength(Float gameLength) {
    this.gameLength = gameLength;
    return this;
  }

   /**
   * Game length in seconds.
   * @return gameLength
  **/
  @javax.annotation.Nonnull
  public Float getGameLength() {
    return gameLength;
  }

  public void setGameLength(Float gameLength) {
    this.gameLength = gameLength;
  }


  public TftMatchV1InfoDto gameVariation(String gameVariation) {
    this.gameVariation = gameVariation;
    return this;
  }

   /**
   * Game variation key. Game variations documented in TFT static data.
   * @return gameVariation
  **/
  @javax.annotation.Nullable
  public String getGameVariation() {
    return gameVariation;
  }

  public void setGameVariation(String gameVariation) {
    this.gameVariation = gameVariation;
  }


  public TftMatchV1InfoDto gameVersion(String gameVersion) {
    this.gameVersion = gameVersion;
    return this;
  }

   /**
   * Game client version.
   * @return gameVersion
  **/
  @javax.annotation.Nonnull
  public String getGameVersion() {
    return gameVersion;
  }

  public void setGameVersion(String gameVersion) {
    this.gameVersion = gameVersion;
  }


  public TftMatchV1InfoDto participants(List<TftMatchV1ParticipantDto> participants) {
    this.participants = participants;
    return this;
  }

  public TftMatchV1InfoDto addParticipantsItem(TftMatchV1ParticipantDto participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

   /**
   * Get participants
   * @return participants
  **/
  @javax.annotation.Nonnull
  public List<TftMatchV1ParticipantDto> getParticipants() {
    return participants;
  }

  public void setParticipants(List<TftMatchV1ParticipantDto> participants) {
    this.participants = participants;
  }


  public TftMatchV1InfoDto tftSetNumber(Integer tftSetNumber) {
    this.tftSetNumber = tftSetNumber;
    return this;
  }

   /**
   * Teamfight Tactics set number.
   * @return tftSetNumber
  **/
  @javax.annotation.Nonnull
  public Integer getTftSetNumber() {
    return tftSetNumber;
  }

  public void setTftSetNumber(Integer tftSetNumber) {
    this.tftSetNumber = tftSetNumber;
  }


  public TftMatchV1InfoDto endOfGameResult(String endOfGameResult) {
    this.endOfGameResult = endOfGameResult;
    return this;
  }

   /**
   * Get endOfGameResult
   * @return endOfGameResult
  **/
  @javax.annotation.Nullable
  public String getEndOfGameResult() {
    return endOfGameResult;
  }

  public void setEndOfGameResult(String endOfGameResult) {
    this.endOfGameResult = endOfGameResult;
  }


  public TftMatchV1InfoDto gameCreation(Long gameCreation) {
    this.gameCreation = gameCreation;
    return this;
  }

   /**
   * Get gameCreation
   * @return gameCreation
  **/
  @javax.annotation.Nullable
  public Long getGameCreation() {
    return gameCreation;
  }

  public void setGameCreation(Long gameCreation) {
    this.gameCreation = gameCreation;
  }


  public TftMatchV1InfoDto gameId(Long gameId) {
    this.gameId = gameId;
    return this;
  }

   /**
   * Get gameId
   * @return gameId
  **/
  @javax.annotation.Nullable
  public Long getGameId() {
    return gameId;
  }

  public void setGameId(Long gameId) {
    this.gameId = gameId;
  }


  public TftMatchV1InfoDto mapId(Long mapId) {
    this.mapId = mapId;
    return this;
  }

   /**
   * Get mapId
   * @return mapId
  **/
  @javax.annotation.Nullable
  public Long getMapId() {
    return mapId;
  }

  public void setMapId(Long mapId) {
    this.mapId = mapId;
  }


  public TftMatchV1InfoDto queueId(Integer queueId) {
    this.queueId = queueId;
    return this;
  }

   /**
   * Please refer to the League of Legends documentation.
   * @return queueId
  **/
  @javax.annotation.Nullable
  public Integer getQueueId() {
    return queueId;
  }

  public void setQueueId(Integer queueId) {
    this.queueId = queueId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TftMatchV1InfoDto tftMatchV1InfoDto = (TftMatchV1InfoDto) o;
    return Objects.equals(this.tftGameType, tftMatchV1InfoDto.tftGameType) &&
        Objects.equals(this.tftSetCoreName, tftMatchV1InfoDto.tftSetCoreName) &&
        Objects.equals(this.gameDatetime, tftMatchV1InfoDto.gameDatetime) &&
        Objects.equals(this.gameLength, tftMatchV1InfoDto.gameLength) &&
        Objects.equals(this.gameVariation, tftMatchV1InfoDto.gameVariation) &&
        Objects.equals(this.gameVersion, tftMatchV1InfoDto.gameVersion) &&
        Objects.equals(this.participants, tftMatchV1InfoDto.participants) &&
        Objects.equals(this.queueId, tftMatchV1InfoDto.queueId) &&
        Objects.equals(this.tftSetNumber, tftMatchV1InfoDto.tftSetNumber) &&
        Objects.equals(this.endOfGameResult, tftMatchV1InfoDto.endOfGameResult) &&
        Objects.equals(this.gameCreation, tftMatchV1InfoDto.gameCreation) &&
        Objects.equals(this.gameId, tftMatchV1InfoDto.gameId) &&
        Objects.equals(this.mapId, tftMatchV1InfoDto.mapId) &&
        Objects.equals(this.queueId, tftMatchV1InfoDto.queueId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tftGameType, tftSetCoreName, gameDatetime, gameLength, gameVariation, gameVersion, participants, queueId, tftSetNumber, endOfGameResult, gameCreation, gameId, mapId, queueId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TftMatchV1InfoDto {\n");
    sb.append("    tftGameType: ").append(toIndentedString(tftGameType)).append("\n");
    sb.append("    tftSetCoreName: ").append(toIndentedString(tftSetCoreName)).append("\n");
    sb.append("    gameDatetime: ").append(toIndentedString(gameDatetime)).append("\n");
    sb.append("    gameLength: ").append(toIndentedString(gameLength)).append("\n");
    sb.append("    gameVariation: ").append(toIndentedString(gameVariation)).append("\n");
    sb.append("    gameVersion: ").append(toIndentedString(gameVersion)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    queueId: ").append(toIndentedString(queueId)).append("\n");
    sb.append("    tftSetNumber: ").append(toIndentedString(tftSetNumber)).append("\n");
    sb.append("    endOfGameResult: ").append(toIndentedString(endOfGameResult)).append("\n");
    sb.append("    gameCreation: ").append(toIndentedString(gameCreation)).append("\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    mapId: ").append(toIndentedString(mapId)).append("\n");
    sb.append("    queueId: ").append(toIndentedString(queueId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tft_game_type");
    openapiFields.add("tft_set_core_name");
    openapiFields.add("game_datetime");
    openapiFields.add("game_length");
    openapiFields.add("game_variation");
    openapiFields.add("game_version");
    openapiFields.add("participants");
    openapiFields.add("queue_id");
    openapiFields.add("tft_set_number");
    openapiFields.add("endOfGameResult");
    openapiFields.add("gameCreation");
    openapiFields.add("gameId");
    openapiFields.add("mapId");
    openapiFields.add("queueId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("game_datetime");
    openapiRequiredFields.add("game_length");
    openapiRequiredFields.add("game_version");
    openapiRequiredFields.add("participants");
    openapiRequiredFields.add("queue_id");
    openapiRequiredFields.add("tft_set_number");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TftMatchV1InfoDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TftMatchV1InfoDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TftMatchV1InfoDto is not found in the empty JSON string", TftMatchV1InfoDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TftMatchV1InfoDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TftMatchV1InfoDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TftMatchV1InfoDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tft_game_type") != null && !jsonObj.get("tft_game_type").isJsonNull()) && !jsonObj.get("tft_game_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tft_game_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tft_game_type").toString()));
      }
      if ((jsonObj.get("tft_set_core_name") != null && !jsonObj.get("tft_set_core_name").isJsonNull()) && !jsonObj.get("tft_set_core_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tft_set_core_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tft_set_core_name").toString()));
      }
      if ((jsonObj.get("game_variation") != null && !jsonObj.get("game_variation").isJsonNull()) && !jsonObj.get("game_variation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `game_variation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("game_variation").toString()));
      }
      if (!jsonObj.get("game_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `game_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("game_version").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("participants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
      }

      JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
      // validate the required field `participants` (array)
      for (int i = 0; i < jsonArrayparticipants.size(); i++) {
        TftMatchV1ParticipantDto.validateJsonElement(jsonArrayparticipants.get(i));
      };
      if ((jsonObj.get("endOfGameResult") != null && !jsonObj.get("endOfGameResult").isJsonNull()) && !jsonObj.get("endOfGameResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endOfGameResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endOfGameResult").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TftMatchV1InfoDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TftMatchV1InfoDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TftMatchV1InfoDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TftMatchV1InfoDto.class));

       return (TypeAdapter<T>) new TypeAdapter<TftMatchV1InfoDto>() {
           @Override
           public void write(JsonWriter out, TftMatchV1InfoDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TftMatchV1InfoDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TftMatchV1InfoDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TftMatchV1InfoDto
  * @throws IOException if the JSON string is invalid with respect to TftMatchV1InfoDto
  */
  public static TftMatchV1InfoDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TftMatchV1InfoDto.class);
  }

 /**
  * Convert an instance of TftMatchV1InfoDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

