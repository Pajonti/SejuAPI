/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.pajonti.sejuapi.model.ValContentV1ActDto;
import fr.pajonti.sejuapi.model.ValContentV1ContentItemDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * ValContentV1ContentDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class ValContentV1ContentDto {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_CHARACTERS = "characters";
  @SerializedName(SERIALIZED_NAME_CHARACTERS)
  private List<ValContentV1ContentItemDto> characters = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAPS = "maps";
  @SerializedName(SERIALIZED_NAME_MAPS)
  private List<ValContentV1ContentItemDto> maps = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHROMAS = "chromas";
  @SerializedName(SERIALIZED_NAME_CHROMAS)
  private List<ValContentV1ContentItemDto> chromas = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKINS = "skins";
  @SerializedName(SERIALIZED_NAME_SKINS)
  private List<ValContentV1ContentItemDto> skins = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIN_LEVELS = "skinLevels";
  @SerializedName(SERIALIZED_NAME_SKIN_LEVELS)
  private List<ValContentV1ContentItemDto> skinLevels = new ArrayList<>();

  public static final String SERIALIZED_NAME_EQUIPS = "equips";
  @SerializedName(SERIALIZED_NAME_EQUIPS)
  private List<ValContentV1ContentItemDto> equips = new ArrayList<>();

  public static final String SERIALIZED_NAME_GAME_MODES = "gameModes";
  @SerializedName(SERIALIZED_NAME_GAME_MODES)
  private List<ValContentV1ContentItemDto> gameModes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPRAYS = "sprays";
  @SerializedName(SERIALIZED_NAME_SPRAYS)
  private List<ValContentV1ContentItemDto> sprays = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPRAY_LEVELS = "sprayLevels";
  @SerializedName(SERIALIZED_NAME_SPRAY_LEVELS)
  private List<ValContentV1ContentItemDto> sprayLevels = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHARMS = "charms";
  @SerializedName(SERIALIZED_NAME_CHARMS)
  private List<ValContentV1ContentItemDto> charms = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHARM_LEVELS = "charmLevels";
  @SerializedName(SERIALIZED_NAME_CHARM_LEVELS)
  private List<ValContentV1ContentItemDto> charmLevels = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAYER_CARDS = "playerCards";
  @SerializedName(SERIALIZED_NAME_PLAYER_CARDS)
  private List<ValContentV1ContentItemDto> playerCards = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAYER_TITLES = "playerTitles";
  @SerializedName(SERIALIZED_NAME_PLAYER_TITLES)
  private List<ValContentV1ContentItemDto> playerTitles = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTS = "acts";
  @SerializedName(SERIALIZED_NAME_ACTS)
  private List<ValContentV1ActDto> acts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CEREMONIES = "ceremonies";
  @SerializedName(SERIALIZED_NAME_CEREMONIES)
  private List<ValContentV1ContentItemDto> ceremonies;

  public static final String SERIALIZED_NAME_TOTEMS = "totems";
  @SerializedName(SERIALIZED_NAME_TOTEMS)
  private List<String> totems;

  public ValContentV1ContentDto() {
  }

  public ValContentV1ContentDto version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public ValContentV1ContentDto characters(List<ValContentV1ContentItemDto> characters) {
    this.characters = characters;
    return this;
  }

  public ValContentV1ContentDto addCharactersItem(ValContentV1ContentItemDto charactersItem) {
    if (this.characters == null) {
      this.characters = new ArrayList<>();
    }
    this.characters.add(charactersItem);
    return this;
  }

   /**
   * Get characters
   * @return characters
  **/
  @javax.annotation.Nonnull
  public List<ValContentV1ContentItemDto> getCharacters() {
    return characters;
  }

  public void setCharacters(List<ValContentV1ContentItemDto> characters) {
    this.characters = characters;
  }


  public ValContentV1ContentDto maps(List<ValContentV1ContentItemDto> maps) {
    this.maps = maps;
    return this;
  }

  public ValContentV1ContentDto addMapsItem(ValContentV1ContentItemDto mapsItem) {
    if (this.maps == null) {
      this.maps = new ArrayList<>();
    }
    this.maps.add(mapsItem);
    return this;
  }

   /**
   * Get maps
   * @return maps
  **/
  @javax.annotation.Nonnull
  public List<ValContentV1ContentItemDto> getMaps() {
    return maps;
  }

  public void setMaps(List<ValContentV1ContentItemDto> maps) {
    this.maps = maps;
  }


  public ValContentV1ContentDto chromas(List<ValContentV1ContentItemDto> chromas) {
    this.chromas = chromas;
    return this;
  }

  public ValContentV1ContentDto addChromasItem(ValContentV1ContentItemDto chromasItem) {
    if (this.chromas == null) {
      this.chromas = new ArrayList<>();
    }
    this.chromas.add(chromasItem);
    return this;
  }

   /**
   * Get chromas
   * @return chromas
  **/
  @javax.annotation.Nonnull
  public List<ValContentV1ContentItemDto> getChromas() {
    return chromas;
  }

  public void setChromas(List<ValContentV1ContentItemDto> chromas) {
    this.chromas = chromas;
  }


  public ValContentV1ContentDto skins(List<ValContentV1ContentItemDto> skins) {
    this.skins = skins;
    return this;
  }

  public ValContentV1ContentDto addSkinsItem(ValContentV1ContentItemDto skinsItem) {
    if (this.skins == null) {
      this.skins = new ArrayList<>();
    }
    this.skins.add(skinsItem);
    return this;
  }

   /**
   * Get skins
   * @return skins
  **/
  @javax.annotation.Nonnull
  public List<ValContentV1ContentItemDto> getSkins() {
    return skins;
  }

  public void setSkins(List<ValContentV1ContentItemDto> skins) {
    this.skins = skins;
  }


  public ValContentV1ContentDto skinLevels(List<ValContentV1ContentItemDto> skinLevels) {
    this.skinLevels = skinLevels;
    return this;
  }

  public ValContentV1ContentDto addSkinLevelsItem(ValContentV1ContentItemDto skinLevelsItem) {
    if (this.skinLevels == null) {
      this.skinLevels = new ArrayList<>();
    }
    this.skinLevels.add(skinLevelsItem);
    return this;
  }

   /**
   * Get skinLevels
   * @return skinLevels
  **/
  @javax.annotation.Nonnull
  public List<ValContentV1ContentItemDto> getSkinLevels() {
    return skinLevels;
  }

  public void setSkinLevels(List<ValContentV1ContentItemDto> skinLevels) {
    this.skinLevels = skinLevels;
  }


  public ValContentV1ContentDto equips(List<ValContentV1ContentItemDto> equips) {
    this.equips = equips;
    return this;
  }

  public ValContentV1ContentDto addEquipsItem(ValContentV1ContentItemDto equipsItem) {
    if (this.equips == null) {
      this.equips = new ArrayList<>();
    }
    this.equips.add(equipsItem);
    return this;
  }

   /**
   * Get equips
   * @return equips
  **/
  @javax.annotation.Nonnull
  public List<ValContentV1ContentItemDto> getEquips() {
    return equips;
  }

  public void setEquips(List<ValContentV1ContentItemDto> equips) {
    this.equips = equips;
  }


  public ValContentV1ContentDto gameModes(List<ValContentV1ContentItemDto> gameModes) {
    this.gameModes = gameModes;
    return this;
  }

  public ValContentV1ContentDto addGameModesItem(ValContentV1ContentItemDto gameModesItem) {
    if (this.gameModes == null) {
      this.gameModes = new ArrayList<>();
    }
    this.gameModes.add(gameModesItem);
    return this;
  }

   /**
   * Get gameModes
   * @return gameModes
  **/
  @javax.annotation.Nonnull
  public List<ValContentV1ContentItemDto> getGameModes() {
    return gameModes;
  }

  public void setGameModes(List<ValContentV1ContentItemDto> gameModes) {
    this.gameModes = gameModes;
  }


  public ValContentV1ContentDto sprays(List<ValContentV1ContentItemDto> sprays) {
    this.sprays = sprays;
    return this;
  }

  public ValContentV1ContentDto addSpraysItem(ValContentV1ContentItemDto spraysItem) {
    if (this.sprays == null) {
      this.sprays = new ArrayList<>();
    }
    this.sprays.add(spraysItem);
    return this;
  }

   /**
   * Get sprays
   * @return sprays
  **/
  @javax.annotation.Nonnull
  public List<ValContentV1ContentItemDto> getSprays() {
    return sprays;
  }

  public void setSprays(List<ValContentV1ContentItemDto> sprays) {
    this.sprays = sprays;
  }


  public ValContentV1ContentDto sprayLevels(List<ValContentV1ContentItemDto> sprayLevels) {
    this.sprayLevels = sprayLevels;
    return this;
  }

  public ValContentV1ContentDto addSprayLevelsItem(ValContentV1ContentItemDto sprayLevelsItem) {
    if (this.sprayLevels == null) {
      this.sprayLevels = new ArrayList<>();
    }
    this.sprayLevels.add(sprayLevelsItem);
    return this;
  }

   /**
   * Get sprayLevels
   * @return sprayLevels
  **/
  @javax.annotation.Nonnull
  public List<ValContentV1ContentItemDto> getSprayLevels() {
    return sprayLevels;
  }

  public void setSprayLevels(List<ValContentV1ContentItemDto> sprayLevels) {
    this.sprayLevels = sprayLevels;
  }


  public ValContentV1ContentDto charms(List<ValContentV1ContentItemDto> charms) {
    this.charms = charms;
    return this;
  }

  public ValContentV1ContentDto addCharmsItem(ValContentV1ContentItemDto charmsItem) {
    if (this.charms == null) {
      this.charms = new ArrayList<>();
    }
    this.charms.add(charmsItem);
    return this;
  }

   /**
   * Get charms
   * @return charms
  **/
  @javax.annotation.Nonnull
  public List<ValContentV1ContentItemDto> getCharms() {
    return charms;
  }

  public void setCharms(List<ValContentV1ContentItemDto> charms) {
    this.charms = charms;
  }


  public ValContentV1ContentDto charmLevels(List<ValContentV1ContentItemDto> charmLevels) {
    this.charmLevels = charmLevels;
    return this;
  }

  public ValContentV1ContentDto addCharmLevelsItem(ValContentV1ContentItemDto charmLevelsItem) {
    if (this.charmLevels == null) {
      this.charmLevels = new ArrayList<>();
    }
    this.charmLevels.add(charmLevelsItem);
    return this;
  }

   /**
   * Get charmLevels
   * @return charmLevels
  **/
  @javax.annotation.Nonnull
  public List<ValContentV1ContentItemDto> getCharmLevels() {
    return charmLevels;
  }

  public void setCharmLevels(List<ValContentV1ContentItemDto> charmLevels) {
    this.charmLevels = charmLevels;
  }


  public ValContentV1ContentDto playerCards(List<ValContentV1ContentItemDto> playerCards) {
    this.playerCards = playerCards;
    return this;
  }

  public ValContentV1ContentDto addPlayerCardsItem(ValContentV1ContentItemDto playerCardsItem) {
    if (this.playerCards == null) {
      this.playerCards = new ArrayList<>();
    }
    this.playerCards.add(playerCardsItem);
    return this;
  }

   /**
   * Get playerCards
   * @return playerCards
  **/
  @javax.annotation.Nonnull
  public List<ValContentV1ContentItemDto> getPlayerCards() {
    return playerCards;
  }

  public void setPlayerCards(List<ValContentV1ContentItemDto> playerCards) {
    this.playerCards = playerCards;
  }


  public ValContentV1ContentDto playerTitles(List<ValContentV1ContentItemDto> playerTitles) {
    this.playerTitles = playerTitles;
    return this;
  }

  public ValContentV1ContentDto addPlayerTitlesItem(ValContentV1ContentItemDto playerTitlesItem) {
    if (this.playerTitles == null) {
      this.playerTitles = new ArrayList<>();
    }
    this.playerTitles.add(playerTitlesItem);
    return this;
  }

   /**
   * Get playerTitles
   * @return playerTitles
  **/
  @javax.annotation.Nonnull
  public List<ValContentV1ContentItemDto> getPlayerTitles() {
    return playerTitles;
  }

  public void setPlayerTitles(List<ValContentV1ContentItemDto> playerTitles) {
    this.playerTitles = playerTitles;
  }


  public ValContentV1ContentDto acts(List<ValContentV1ActDto> acts) {
    this.acts = acts;
    return this;
  }

  public ValContentV1ContentDto addActsItem(ValContentV1ActDto actsItem) {
    if (this.acts == null) {
      this.acts = new ArrayList<>();
    }
    this.acts.add(actsItem);
    return this;
  }

   /**
   * Get acts
   * @return acts
  **/
  @javax.annotation.Nonnull
  public List<ValContentV1ActDto> getActs() {
    return acts;
  }

  public void setActs(List<ValContentV1ActDto> acts) {
    this.acts = acts;
  }


  public ValContentV1ContentDto ceremonies(List<ValContentV1ContentItemDto> ceremonies) {
    this.ceremonies = ceremonies;
    return this;
  }

  public ValContentV1ContentDto addCeremoniesItem(ValContentV1ContentItemDto ceremoniesItem) {
    if (this.ceremonies == null) {
      this.ceremonies = new ArrayList<>();
    }
    this.ceremonies.add(ceremoniesItem);
    return this;
  }

   /**
   * Get ceremonies
   * @return ceremonies
  **/
  @javax.annotation.Nullable
  public List<ValContentV1ContentItemDto> getCeremonies() {
    return ceremonies;
  }

  public void setCeremonies(List<ValContentV1ContentItemDto> ceremonies) {
    this.ceremonies = ceremonies;
  }


  public ValContentV1ContentDto totems(List<String> totems) {
    this.totems = totems;
    return this;
  }

  public ValContentV1ContentDto addTotemsItem(String totemsItem) {
    if (this.totems == null) {
      this.totems = new ArrayList<>();
    }
    this.totems.add(totemsItem);
    return this;
  }

   /**
   * Unknown type, this is a placeholder subject to change.
   * @return totems
  **/
  @javax.annotation.Nullable
  public List<String> getTotems() {
    return totems;
  }

  public void setTotems(List<String> totems) {
    this.totems = totems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValContentV1ContentDto valContentV1ContentDto = (ValContentV1ContentDto) o;
    return Objects.equals(this.version, valContentV1ContentDto.version) &&
        Objects.equals(this.characters, valContentV1ContentDto.characters) &&
        Objects.equals(this.maps, valContentV1ContentDto.maps) &&
        Objects.equals(this.chromas, valContentV1ContentDto.chromas) &&
        Objects.equals(this.skins, valContentV1ContentDto.skins) &&
        Objects.equals(this.skinLevels, valContentV1ContentDto.skinLevels) &&
        Objects.equals(this.equips, valContentV1ContentDto.equips) &&
        Objects.equals(this.gameModes, valContentV1ContentDto.gameModes) &&
        Objects.equals(this.sprays, valContentV1ContentDto.sprays) &&
        Objects.equals(this.sprayLevels, valContentV1ContentDto.sprayLevels) &&
        Objects.equals(this.charms, valContentV1ContentDto.charms) &&
        Objects.equals(this.charmLevels, valContentV1ContentDto.charmLevels) &&
        Objects.equals(this.playerCards, valContentV1ContentDto.playerCards) &&
        Objects.equals(this.playerTitles, valContentV1ContentDto.playerTitles) &&
        Objects.equals(this.acts, valContentV1ContentDto.acts) &&
        Objects.equals(this.ceremonies, valContentV1ContentDto.ceremonies) &&
        Objects.equals(this.totems, valContentV1ContentDto.totems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, characters, maps, chromas, skins, skinLevels, equips, gameModes, sprays, sprayLevels, charms, charmLevels, playerCards, playerTitles, acts, ceremonies, totems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValContentV1ContentDto {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    characters: ").append(toIndentedString(characters)).append("\n");
    sb.append("    maps: ").append(toIndentedString(maps)).append("\n");
    sb.append("    chromas: ").append(toIndentedString(chromas)).append("\n");
    sb.append("    skins: ").append(toIndentedString(skins)).append("\n");
    sb.append("    skinLevels: ").append(toIndentedString(skinLevels)).append("\n");
    sb.append("    equips: ").append(toIndentedString(equips)).append("\n");
    sb.append("    gameModes: ").append(toIndentedString(gameModes)).append("\n");
    sb.append("    sprays: ").append(toIndentedString(sprays)).append("\n");
    sb.append("    sprayLevels: ").append(toIndentedString(sprayLevels)).append("\n");
    sb.append("    charms: ").append(toIndentedString(charms)).append("\n");
    sb.append("    charmLevels: ").append(toIndentedString(charmLevels)).append("\n");
    sb.append("    playerCards: ").append(toIndentedString(playerCards)).append("\n");
    sb.append("    playerTitles: ").append(toIndentedString(playerTitles)).append("\n");
    sb.append("    acts: ").append(toIndentedString(acts)).append("\n");
    sb.append("    ceremonies: ").append(toIndentedString(ceremonies)).append("\n");
    sb.append("    totems: ").append(toIndentedString(totems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("characters");
    openapiFields.add("maps");
    openapiFields.add("chromas");
    openapiFields.add("skins");
    openapiFields.add("skinLevels");
    openapiFields.add("equips");
    openapiFields.add("gameModes");
    openapiFields.add("sprays");
    openapiFields.add("sprayLevels");
    openapiFields.add("charms");
    openapiFields.add("charmLevels");
    openapiFields.add("playerCards");
    openapiFields.add("playerTitles");
    openapiFields.add("acts");
    openapiFields.add("ceremonies");
    openapiFields.add("totems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("characters");
    openapiRequiredFields.add("maps");
    openapiRequiredFields.add("chromas");
    openapiRequiredFields.add("skins");
    openapiRequiredFields.add("skinLevels");
    openapiRequiredFields.add("equips");
    openapiRequiredFields.add("gameModes");
    openapiRequiredFields.add("sprays");
    openapiRequiredFields.add("sprayLevels");
    openapiRequiredFields.add("charms");
    openapiRequiredFields.add("charmLevels");
    openapiRequiredFields.add("playerCards");
    openapiRequiredFields.add("playerTitles");
    openapiRequiredFields.add("acts");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ValContentV1ContentDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValContentV1ContentDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValContentV1ContentDto is not found in the empty JSON string", ValContentV1ContentDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValContentV1ContentDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValContentV1ContentDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ValContentV1ContentDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("characters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `characters` to be an array in the JSON string but got `%s`", jsonObj.get("characters").toString()));
      }

      JsonArray jsonArraycharacters = jsonObj.getAsJsonArray("characters");
      // validate the required field `characters` (array)
      for (int i = 0; i < jsonArraycharacters.size(); i++) {
        ValContentV1ContentItemDto.validateJsonElement(jsonArraycharacters.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("maps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `maps` to be an array in the JSON string but got `%s`", jsonObj.get("maps").toString()));
      }

      JsonArray jsonArraymaps = jsonObj.getAsJsonArray("maps");
      // validate the required field `maps` (array)
      for (int i = 0; i < jsonArraymaps.size(); i++) {
        ValContentV1ContentItemDto.validateJsonElement(jsonArraymaps.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("chromas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `chromas` to be an array in the JSON string but got `%s`", jsonObj.get("chromas").toString()));
      }

      JsonArray jsonArraychromas = jsonObj.getAsJsonArray("chromas");
      // validate the required field `chromas` (array)
      for (int i = 0; i < jsonArraychromas.size(); i++) {
        ValContentV1ContentItemDto.validateJsonElement(jsonArraychromas.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("skins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `skins` to be an array in the JSON string but got `%s`", jsonObj.get("skins").toString()));
      }

      JsonArray jsonArrayskins = jsonObj.getAsJsonArray("skins");
      // validate the required field `skins` (array)
      for (int i = 0; i < jsonArrayskins.size(); i++) {
        ValContentV1ContentItemDto.validateJsonElement(jsonArrayskins.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("skinLevels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `skinLevels` to be an array in the JSON string but got `%s`", jsonObj.get("skinLevels").toString()));
      }

      JsonArray jsonArrayskinLevels = jsonObj.getAsJsonArray("skinLevels");
      // validate the required field `skinLevels` (array)
      for (int i = 0; i < jsonArrayskinLevels.size(); i++) {
        ValContentV1ContentItemDto.validateJsonElement(jsonArrayskinLevels.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("equips").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `equips` to be an array in the JSON string but got `%s`", jsonObj.get("equips").toString()));
      }

      JsonArray jsonArrayequips = jsonObj.getAsJsonArray("equips");
      // validate the required field `equips` (array)
      for (int i = 0; i < jsonArrayequips.size(); i++) {
        ValContentV1ContentItemDto.validateJsonElement(jsonArrayequips.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("gameModes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gameModes` to be an array in the JSON string but got `%s`", jsonObj.get("gameModes").toString()));
      }

      JsonArray jsonArraygameModes = jsonObj.getAsJsonArray("gameModes");
      // validate the required field `gameModes` (array)
      for (int i = 0; i < jsonArraygameModes.size(); i++) {
        ValContentV1ContentItemDto.validateJsonElement(jsonArraygameModes.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("sprays").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sprays` to be an array in the JSON string but got `%s`", jsonObj.get("sprays").toString()));
      }

      JsonArray jsonArraysprays = jsonObj.getAsJsonArray("sprays");
      // validate the required field `sprays` (array)
      for (int i = 0; i < jsonArraysprays.size(); i++) {
        ValContentV1ContentItemDto.validateJsonElement(jsonArraysprays.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("sprayLevels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sprayLevels` to be an array in the JSON string but got `%s`", jsonObj.get("sprayLevels").toString()));
      }

      JsonArray jsonArraysprayLevels = jsonObj.getAsJsonArray("sprayLevels");
      // validate the required field `sprayLevels` (array)
      for (int i = 0; i < jsonArraysprayLevels.size(); i++) {
        ValContentV1ContentItemDto.validateJsonElement(jsonArraysprayLevels.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("charms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `charms` to be an array in the JSON string but got `%s`", jsonObj.get("charms").toString()));
      }

      JsonArray jsonArraycharms = jsonObj.getAsJsonArray("charms");
      // validate the required field `charms` (array)
      for (int i = 0; i < jsonArraycharms.size(); i++) {
        ValContentV1ContentItemDto.validateJsonElement(jsonArraycharms.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("charmLevels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `charmLevels` to be an array in the JSON string but got `%s`", jsonObj.get("charmLevels").toString()));
      }

      JsonArray jsonArraycharmLevels = jsonObj.getAsJsonArray("charmLevels");
      // validate the required field `charmLevels` (array)
      for (int i = 0; i < jsonArraycharmLevels.size(); i++) {
        ValContentV1ContentItemDto.validateJsonElement(jsonArraycharmLevels.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("playerCards").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerCards` to be an array in the JSON string but got `%s`", jsonObj.get("playerCards").toString()));
      }

      JsonArray jsonArrayplayerCards = jsonObj.getAsJsonArray("playerCards");
      // validate the required field `playerCards` (array)
      for (int i = 0; i < jsonArrayplayerCards.size(); i++) {
        ValContentV1ContentItemDto.validateJsonElement(jsonArrayplayerCards.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("playerTitles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerTitles` to be an array in the JSON string but got `%s`", jsonObj.get("playerTitles").toString()));
      }

      JsonArray jsonArrayplayerTitles = jsonObj.getAsJsonArray("playerTitles");
      // validate the required field `playerTitles` (array)
      for (int i = 0; i < jsonArrayplayerTitles.size(); i++) {
        ValContentV1ContentItemDto.validateJsonElement(jsonArrayplayerTitles.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("acts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `acts` to be an array in the JSON string but got `%s`", jsonObj.get("acts").toString()));
      }

      JsonArray jsonArrayacts = jsonObj.getAsJsonArray("acts");
      // validate the required field `acts` (array)
      for (int i = 0; i < jsonArrayacts.size(); i++) {
        ValContentV1ActDto.validateJsonElement(jsonArrayacts.get(i));
      };
      if (jsonObj.get("ceremonies") != null && !jsonObj.get("ceremonies").isJsonNull()) {
        JsonArray jsonArrayceremonies = jsonObj.getAsJsonArray("ceremonies");
        if (jsonArrayceremonies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ceremonies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ceremonies` to be an array in the JSON string but got `%s`", jsonObj.get("ceremonies").toString()));
          }

          // validate the optional field `ceremonies` (array)
          for (int i = 0; i < jsonArrayceremonies.size(); i++) {
            ValContentV1ContentItemDto.validateJsonElement(jsonArrayceremonies.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("totems") != null && !jsonObj.get("totems").isJsonNull() && !jsonObj.get("totems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `totems` to be an array in the JSON string but got `%s`", jsonObj.get("totems").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValContentV1ContentDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValContentV1ContentDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValContentV1ContentDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValContentV1ContentDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ValContentV1ContentDto>() {
           @Override
           public void write(JsonWriter out, ValContentV1ContentDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValContentV1ContentDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ValContentV1ContentDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ValContentV1ContentDto
  * @throws IOException if the JSON string is invalid with respect to ValContentV1ContentDto
  */
  public static ValContentV1ContentDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValContentV1ContentDto.class);
  }

 /**
  * Convert an instance of ValContentV1ContentDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

