/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.pajonti.sejuapi.model.SpectatorV5BannedChampion;
import fr.pajonti.sejuapi.model.SpectatorV5CurrentGameParticipant;
import fr.pajonti.sejuapi.model.SpectatorV5Observer;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * SpectatorV5CurrentGameInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class SpectatorV5CurrentGameInfo {
  public static final String SERIALIZED_NAME_GAME_ID = "gameId";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private Long gameId;

  public static final String SERIALIZED_NAME_GAME_TYPE = "gameType";
  @SerializedName(SERIALIZED_NAME_GAME_TYPE)
  private String gameType;

  public static final String SERIALIZED_NAME_GAME_START_TIME = "gameStartTime";
  @SerializedName(SERIALIZED_NAME_GAME_START_TIME)
  private Long gameStartTime;

  public static final String SERIALIZED_NAME_MAP_ID = "mapId";
  @SerializedName(SERIALIZED_NAME_MAP_ID)
  private Long mapId;

  public static final String SERIALIZED_NAME_GAME_LENGTH = "gameLength";
  @SerializedName(SERIALIZED_NAME_GAME_LENGTH)
  private Long gameLength;

  public static final String SERIALIZED_NAME_PLATFORM_ID = "platformId";
  @SerializedName(SERIALIZED_NAME_PLATFORM_ID)
  private String platformId;

  public static final String SERIALIZED_NAME_GAME_MODE = "gameMode";
  @SerializedName(SERIALIZED_NAME_GAME_MODE)
  private String gameMode;

  public static final String SERIALIZED_NAME_BANNED_CHAMPIONS = "bannedChampions";
  @SerializedName(SERIALIZED_NAME_BANNED_CHAMPIONS)
  private List<SpectatorV5BannedChampion> bannedChampions = new ArrayList<>();

  public static final String SERIALIZED_NAME_GAME_QUEUE_CONFIG_ID = "gameQueueConfigId";
  @SerializedName(SERIALIZED_NAME_GAME_QUEUE_CONFIG_ID)
  private Long gameQueueConfigId;

  public static final String SERIALIZED_NAME_OBSERVERS = "observers";
  @SerializedName(SERIALIZED_NAME_OBSERVERS)
  private SpectatorV5Observer observers;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<SpectatorV5CurrentGameParticipant> participants = new ArrayList<>();

  public SpectatorV5CurrentGameInfo() {
  }

  public SpectatorV5CurrentGameInfo gameId(Long gameId) {
    this.gameId = gameId;
    return this;
  }

   /**
   * The ID of the game
   * @return gameId
  **/
  @javax.annotation.Nonnull
  public Long getGameId() {
    return gameId;
  }

  public void setGameId(Long gameId) {
    this.gameId = gameId;
  }


  public SpectatorV5CurrentGameInfo gameType(String gameType) {
    this.gameType = gameType;
    return this;
  }

   /**
   * The game type
   * @return gameType
  **/
  @javax.annotation.Nonnull
  public String getGameType() {
    return gameType;
  }

  public void setGameType(String gameType) {
    this.gameType = gameType;
  }


  public SpectatorV5CurrentGameInfo gameStartTime(Long gameStartTime) {
    this.gameStartTime = gameStartTime;
    return this;
  }

   /**
   * The game start time represented in epoch milliseconds
   * @return gameStartTime
  **/
  @javax.annotation.Nonnull
  public Long getGameStartTime() {
    return gameStartTime;
  }

  public void setGameStartTime(Long gameStartTime) {
    this.gameStartTime = gameStartTime;
  }


  public SpectatorV5CurrentGameInfo mapId(Long mapId) {
    this.mapId = mapId;
    return this;
  }

   /**
   * The ID of the map
   * @return mapId
  **/
  @javax.annotation.Nonnull
  public Long getMapId() {
    return mapId;
  }

  public void setMapId(Long mapId) {
    this.mapId = mapId;
  }


  public SpectatorV5CurrentGameInfo gameLength(Long gameLength) {
    this.gameLength = gameLength;
    return this;
  }

   /**
   * The amount of time in seconds that has passed since the game started
   * @return gameLength
  **/
  @javax.annotation.Nonnull
  public Long getGameLength() {
    return gameLength;
  }

  public void setGameLength(Long gameLength) {
    this.gameLength = gameLength;
  }


  public SpectatorV5CurrentGameInfo platformId(String platformId) {
    this.platformId = platformId;
    return this;
  }

   /**
   * The ID of the platform on which the game is being played
   * @return platformId
  **/
  @javax.annotation.Nonnull
  public String getPlatformId() {
    return platformId;
  }

  public void setPlatformId(String platformId) {
    this.platformId = platformId;
  }


  public SpectatorV5CurrentGameInfo gameMode(String gameMode) {
    this.gameMode = gameMode;
    return this;
  }

   /**
   * The game mode
   * @return gameMode
  **/
  @javax.annotation.Nonnull
  public String getGameMode() {
    return gameMode;
  }

  public void setGameMode(String gameMode) {
    this.gameMode = gameMode;
  }


  public SpectatorV5CurrentGameInfo bannedChampions(List<SpectatorV5BannedChampion> bannedChampions) {
    this.bannedChampions = bannedChampions;
    return this;
  }

  public SpectatorV5CurrentGameInfo addBannedChampionsItem(SpectatorV5BannedChampion bannedChampionsItem) {
    if (this.bannedChampions == null) {
      this.bannedChampions = new ArrayList<>();
    }
    this.bannedChampions.add(bannedChampionsItem);
    return this;
  }

   /**
   * Banned champion information
   * @return bannedChampions
  **/
  @javax.annotation.Nonnull
  public List<SpectatorV5BannedChampion> getBannedChampions() {
    return bannedChampions;
  }

  public void setBannedChampions(List<SpectatorV5BannedChampion> bannedChampions) {
    this.bannedChampions = bannedChampions;
  }


  public SpectatorV5CurrentGameInfo gameQueueConfigId(Long gameQueueConfigId) {
    this.gameQueueConfigId = gameQueueConfigId;
    return this;
  }

   /**
   * The queue type (queue types are documented on the Game Constants page)
   * @return gameQueueConfigId
  **/
  @javax.annotation.Nullable
  public Long getGameQueueConfigId() {
    return gameQueueConfigId;
  }

  public void setGameQueueConfigId(Long gameQueueConfigId) {
    this.gameQueueConfigId = gameQueueConfigId;
  }


  public SpectatorV5CurrentGameInfo observers(SpectatorV5Observer observers) {
    this.observers = observers;
    return this;
  }

   /**
   * Get observers
   * @return observers
  **/
  @javax.annotation.Nonnull
  public SpectatorV5Observer getObservers() {
    return observers;
  }

  public void setObservers(SpectatorV5Observer observers) {
    this.observers = observers;
  }


  public SpectatorV5CurrentGameInfo participants(List<SpectatorV5CurrentGameParticipant> participants) {
    this.participants = participants;
    return this;
  }

  public SpectatorV5CurrentGameInfo addParticipantsItem(SpectatorV5CurrentGameParticipant participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

   /**
   * The participant information
   * @return participants
  **/
  @javax.annotation.Nonnull
  public List<SpectatorV5CurrentGameParticipant> getParticipants() {
    return participants;
  }

  public void setParticipants(List<SpectatorV5CurrentGameParticipant> participants) {
    this.participants = participants;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpectatorV5CurrentGameInfo spectatorV5CurrentGameInfo = (SpectatorV5CurrentGameInfo) o;
    return Objects.equals(this.gameId, spectatorV5CurrentGameInfo.gameId) &&
        Objects.equals(this.gameType, spectatorV5CurrentGameInfo.gameType) &&
        Objects.equals(this.gameStartTime, spectatorV5CurrentGameInfo.gameStartTime) &&
        Objects.equals(this.mapId, spectatorV5CurrentGameInfo.mapId) &&
        Objects.equals(this.gameLength, spectatorV5CurrentGameInfo.gameLength) &&
        Objects.equals(this.platformId, spectatorV5CurrentGameInfo.platformId) &&
        Objects.equals(this.gameMode, spectatorV5CurrentGameInfo.gameMode) &&
        Objects.equals(this.bannedChampions, spectatorV5CurrentGameInfo.bannedChampions) &&
        Objects.equals(this.gameQueueConfigId, spectatorV5CurrentGameInfo.gameQueueConfigId) &&
        Objects.equals(this.observers, spectatorV5CurrentGameInfo.observers) &&
        Objects.equals(this.participants, spectatorV5CurrentGameInfo.participants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gameId, gameType, gameStartTime, mapId, gameLength, platformId, gameMode, bannedChampions, gameQueueConfigId, observers, participants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpectatorV5CurrentGameInfo {\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    gameType: ").append(toIndentedString(gameType)).append("\n");
    sb.append("    gameStartTime: ").append(toIndentedString(gameStartTime)).append("\n");
    sb.append("    mapId: ").append(toIndentedString(mapId)).append("\n");
    sb.append("    gameLength: ").append(toIndentedString(gameLength)).append("\n");
    sb.append("    platformId: ").append(toIndentedString(platformId)).append("\n");
    sb.append("    gameMode: ").append(toIndentedString(gameMode)).append("\n");
    sb.append("    bannedChampions: ").append(toIndentedString(bannedChampions)).append("\n");
    sb.append("    gameQueueConfigId: ").append(toIndentedString(gameQueueConfigId)).append("\n");
    sb.append("    observers: ").append(toIndentedString(observers)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gameId");
    openapiFields.add("gameType");
    openapiFields.add("gameStartTime");
    openapiFields.add("mapId");
    openapiFields.add("gameLength");
    openapiFields.add("platformId");
    openapiFields.add("gameMode");
    openapiFields.add("bannedChampions");
    openapiFields.add("gameQueueConfigId");
    openapiFields.add("observers");
    openapiFields.add("participants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("gameId");
    openapiRequiredFields.add("gameType");
    openapiRequiredFields.add("gameStartTime");
    openapiRequiredFields.add("mapId");
    openapiRequiredFields.add("gameLength");
    openapiRequiredFields.add("platformId");
    openapiRequiredFields.add("gameMode");
    openapiRequiredFields.add("bannedChampions");
    openapiRequiredFields.add("observers");
    openapiRequiredFields.add("participants");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SpectatorV5CurrentGameInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpectatorV5CurrentGameInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpectatorV5CurrentGameInfo is not found in the empty JSON string", SpectatorV5CurrentGameInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpectatorV5CurrentGameInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpectatorV5CurrentGameInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SpectatorV5CurrentGameInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("gameType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gameType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gameType").toString()));
      }
      if (!jsonObj.get("platformId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformId").toString()));
      }
      if (!jsonObj.get("gameMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gameMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gameMode").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("bannedChampions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bannedChampions` to be an array in the JSON string but got `%s`", jsonObj.get("bannedChampions").toString()));
      }

      JsonArray jsonArraybannedChampions = jsonObj.getAsJsonArray("bannedChampions");
      // validate the required field `bannedChampions` (array)
      for (int i = 0; i < jsonArraybannedChampions.size(); i++) {
        SpectatorV5BannedChampion.validateJsonElement(jsonArraybannedChampions.get(i));
      };
      // validate the required field `observers`
      SpectatorV5Observer.validateJsonElement(jsonObj.get("observers"));
      // ensure the json data is an array
      if (!jsonObj.get("participants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
      }

      JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
      // validate the required field `participants` (array)
      for (int i = 0; i < jsonArrayparticipants.size(); i++) {
        SpectatorV5CurrentGameParticipant.validateJsonElement(jsonArrayparticipants.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpectatorV5CurrentGameInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpectatorV5CurrentGameInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpectatorV5CurrentGameInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpectatorV5CurrentGameInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SpectatorV5CurrentGameInfo>() {
           @Override
           public void write(JsonWriter out, SpectatorV5CurrentGameInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpectatorV5CurrentGameInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SpectatorV5CurrentGameInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SpectatorV5CurrentGameInfo
  * @throws IOException if the JSON string is invalid with respect to SpectatorV5CurrentGameInfo
  */
  public static SpectatorV5CurrentGameInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpectatorV5CurrentGameInfo.class);
  }

 /**
  * Convert an instance of SpectatorV5CurrentGameInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

