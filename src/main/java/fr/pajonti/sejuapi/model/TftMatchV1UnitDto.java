/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * TftMatchV1UnitDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class TftMatchV1UnitDto {
  public static final String SERIALIZED_NAME_ITEM_NAMES = "itemNames";
  @SerializedName(SERIALIZED_NAME_ITEM_NAMES)
  private List<String> itemNames;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Integer> items;

  public static final String SERIALIZED_NAME_CHARACTER_ID = "character_id";
  @SerializedName(SERIALIZED_NAME_CHARACTER_ID)
  private String characterId;

  public static final String SERIALIZED_NAME_CHOSEN = "chosen";
  @SerializedName(SERIALIZED_NAME_CHOSEN)
  private String chosen;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RARITY = "rarity";
  @SerializedName(SERIALIZED_NAME_RARITY)
  private Integer rarity;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private Integer tier;

  public TftMatchV1UnitDto() {
  }

  public TftMatchV1UnitDto itemNames(List<String> itemNames) {
    this.itemNames = itemNames;
    return this;
  }

  public TftMatchV1UnitDto addItemNamesItem(String itemNamesItem) {
    if (this.itemNames == null) {
      this.itemNames = new ArrayList<>();
    }
    this.itemNames.add(itemNamesItem);
    return this;
  }

   /**
   * Get itemNames
   * @return itemNames
  **/
  @javax.annotation.Nullable
  public List<String> getItemNames() {
    return itemNames;
  }

  public void setItemNames(List<String> itemNames) {
    this.itemNames = itemNames;
  }


  public TftMatchV1UnitDto items(List<Integer> items) {
    this.items = items;
    return this;
  }

  public TftMatchV1UnitDto addItemsItem(Integer itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * A list of the unit&#39;s items. Please refer to the Teamfight Tactics documentation for item ids.
   * @return items
  **/
  @javax.annotation.Nullable
  public List<Integer> getItems() {
    return items;
  }

  public void setItems(List<Integer> items) {
    this.items = items;
  }


  public TftMatchV1UnitDto characterId(String characterId) {
    this.characterId = characterId;
    return this;
  }

   /**
   * This field was introduced in patch 9.22 with data_version 2.
   * @return characterId
  **/
  @javax.annotation.Nonnull
  public String getCharacterId() {
    return characterId;
  }

  public void setCharacterId(String characterId) {
    this.characterId = characterId;
  }


  public TftMatchV1UnitDto chosen(String chosen) {
    this.chosen = chosen;
    return this;
  }

   /**
   * If a unit is chosen as part of the Fates set mechanic, the chosen trait will be indicated by this field. Otherwise this field is excluded from the response.
   * @return chosen
  **/
  @javax.annotation.Nullable
  public String getChosen() {
    return chosen;
  }

  public void setChosen(String chosen) {
    this.chosen = chosen;
  }


  public TftMatchV1UnitDto name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Unit name. This field is often left blank.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TftMatchV1UnitDto rarity(Integer rarity) {
    this.rarity = rarity;
    return this;
  }

   /**
   * Unit rarity. This doesn&#39;t equate to the unit cost.
   * @return rarity
  **/
  @javax.annotation.Nonnull
  public Integer getRarity() {
    return rarity;
  }

  public void setRarity(Integer rarity) {
    this.rarity = rarity;
  }


  public TftMatchV1UnitDto tier(Integer tier) {
    this.tier = tier;
    return this;
  }

   /**
   * Unit tier.
   * @return tier
  **/
  @javax.annotation.Nonnull
  public Integer getTier() {
    return tier;
  }

  public void setTier(Integer tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TftMatchV1UnitDto tftMatchV1UnitDto = (TftMatchV1UnitDto) o;
    return Objects.equals(this.itemNames, tftMatchV1UnitDto.itemNames) &&
        Objects.equals(this.items, tftMatchV1UnitDto.items) &&
        Objects.equals(this.characterId, tftMatchV1UnitDto.characterId) &&
        Objects.equals(this.chosen, tftMatchV1UnitDto.chosen) &&
        Objects.equals(this.name, tftMatchV1UnitDto.name) &&
        Objects.equals(this.rarity, tftMatchV1UnitDto.rarity) &&
        Objects.equals(this.tier, tftMatchV1UnitDto.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemNames, items, characterId, chosen, name, rarity, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TftMatchV1UnitDto {\n");
    sb.append("    itemNames: ").append(toIndentedString(itemNames)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    characterId: ").append(toIndentedString(characterId)).append("\n");
    sb.append("    chosen: ").append(toIndentedString(chosen)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rarity: ").append(toIndentedString(rarity)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemNames");
    openapiFields.add("items");
    openapiFields.add("character_id");
    openapiFields.add("chosen");
    openapiFields.add("name");
    openapiFields.add("rarity");
    openapiFields.add("tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("character_id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("rarity");
    openapiRequiredFields.add("tier");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TftMatchV1UnitDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TftMatchV1UnitDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TftMatchV1UnitDto is not found in the empty JSON string", TftMatchV1UnitDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TftMatchV1UnitDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TftMatchV1UnitDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TftMatchV1UnitDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("itemNames") != null && !jsonObj.get("itemNames").isJsonNull() && !jsonObj.get("itemNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemNames` to be an array in the JSON string but got `%s`", jsonObj.get("itemNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull() && !jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }
      if (!jsonObj.get("character_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `character_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("character_id").toString()));
      }
      if ((jsonObj.get("chosen") != null && !jsonObj.get("chosen").isJsonNull()) && !jsonObj.get("chosen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chosen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chosen").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TftMatchV1UnitDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TftMatchV1UnitDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TftMatchV1UnitDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TftMatchV1UnitDto.class));

       return (TypeAdapter<T>) new TypeAdapter<TftMatchV1UnitDto>() {
           @Override
           public void write(JsonWriter out, TftMatchV1UnitDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TftMatchV1UnitDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TftMatchV1UnitDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TftMatchV1UnitDto
  * @throws IOException if the JSON string is invalid with respect to TftMatchV1UnitDto
  */
  public static TftMatchV1UnitDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TftMatchV1UnitDto.class);
  }

 /**
  * Convert an instance of TftMatchV1UnitDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

