/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * LolChallengesV1ChallengeConfigInfoDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class LolChallengesV1ChallengeConfigInfoDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LOCALIZED_NAMES = "localizedNames";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_NAMES)
  private Map<String, Map<String, String>> localizedNames = new HashMap<>();

  /**
   * DISABLED - not visible and not calculated, HIDDEN - not visible, but calculated, ENABLED - visible and calculated, ARCHIVED - visible, but not calculated
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DISABLED("DISABLED"),
    
    HIDDEN("HIDDEN"),
    
    ENABLED("ENABLED"),
    
    ARCHIVED("ARCHIVED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * LIFETIME - stats are incremented without reset, SEASON - stats are accumulated by season and reset at the beginning of new season
   */
  @JsonAdapter(TrackingEnum.Adapter.class)
  public enum TrackingEnum {
    LIFETIME("LIFETIME"),
    
    SEASON("SEASON");

    private String value;

    TrackingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrackingEnum fromValue(String value) {
      for (TrackingEnum b : TrackingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrackingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrackingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrackingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrackingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrackingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRACKING = "tracking";
  @SerializedName(SERIALIZED_NAME_TRACKING)
  private TrackingEnum tracking;

  public static final String SERIALIZED_NAME_START_TIMESTAMP = "startTimestamp";
  @SerializedName(SERIALIZED_NAME_START_TIMESTAMP)
  private Long startTimestamp;

  public static final String SERIALIZED_NAME_END_TIMESTAMP = "endTimestamp";
  @SerializedName(SERIALIZED_NAME_END_TIMESTAMP)
  private Long endTimestamp;

  public static final String SERIALIZED_NAME_LEADERBOARD = "leaderboard";
  @SerializedName(SERIALIZED_NAME_LEADERBOARD)
  private Boolean leaderboard;

  public static final String SERIALIZED_NAME_THRESHOLDS = "thresholds";
  @SerializedName(SERIALIZED_NAME_THRESHOLDS)
  private Map<String, Double> thresholds = new HashMap<>();

  public LolChallengesV1ChallengeConfigInfoDto() {
  }

  public LolChallengesV1ChallengeConfigInfoDto id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public LolChallengesV1ChallengeConfigInfoDto localizedNames(Map<String, Map<String, String>> localizedNames) {
    this.localizedNames = localizedNames;
    return this;
  }

  public LolChallengesV1ChallengeConfigInfoDto putLocalizedNamesItem(String key, Map<String, String> localizedNamesItem) {
    if (this.localizedNames == null) {
      this.localizedNames = new HashMap<>();
    }
    this.localizedNames.put(key, localizedNamesItem);
    return this;
  }

   /**
   * Get localizedNames
   * @return localizedNames
  **/
  @javax.annotation.Nonnull
  public Map<String, Map<String, String>> getLocalizedNames() {
    return localizedNames;
  }

  public void setLocalizedNames(Map<String, Map<String, String>> localizedNames) {
    this.localizedNames = localizedNames;
  }


  public LolChallengesV1ChallengeConfigInfoDto state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * DISABLED - not visible and not calculated, HIDDEN - not visible, but calculated, ENABLED - visible and calculated, ARCHIVED - visible, but not calculated
   * @return state
  **/
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public LolChallengesV1ChallengeConfigInfoDto tracking(TrackingEnum tracking) {
    this.tracking = tracking;
    return this;
  }

   /**
   * LIFETIME - stats are incremented without reset, SEASON - stats are accumulated by season and reset at the beginning of new season
   * @return tracking
  **/
  @javax.annotation.Nullable
  public TrackingEnum getTracking() {
    return tracking;
  }

  public void setTracking(TrackingEnum tracking) {
    this.tracking = tracking;
  }


  public LolChallengesV1ChallengeConfigInfoDto startTimestamp(Long startTimestamp) {
    this.startTimestamp = startTimestamp;
    return this;
  }

   /**
   * Get startTimestamp
   * @return startTimestamp
  **/
  @javax.annotation.Nullable
  public Long getStartTimestamp() {
    return startTimestamp;
  }

  public void setStartTimestamp(Long startTimestamp) {
    this.startTimestamp = startTimestamp;
  }


  public LolChallengesV1ChallengeConfigInfoDto endTimestamp(Long endTimestamp) {
    this.endTimestamp = endTimestamp;
    return this;
  }

   /**
   * Get endTimestamp
   * @return endTimestamp
  **/
  @javax.annotation.Nullable
  public Long getEndTimestamp() {
    return endTimestamp;
  }

  public void setEndTimestamp(Long endTimestamp) {
    this.endTimestamp = endTimestamp;
  }


  public LolChallengesV1ChallengeConfigInfoDto leaderboard(Boolean leaderboard) {
    this.leaderboard = leaderboard;
    return this;
  }

   /**
   * Get leaderboard
   * @return leaderboard
  **/
  @javax.annotation.Nonnull
  public Boolean getLeaderboard() {
    return leaderboard;
  }

  public void setLeaderboard(Boolean leaderboard) {
    this.leaderboard = leaderboard;
  }


  public LolChallengesV1ChallengeConfigInfoDto thresholds(Map<String, Double> thresholds) {
    this.thresholds = thresholds;
    return this;
  }

  public LolChallengesV1ChallengeConfigInfoDto putThresholdsItem(String key, Double thresholdsItem) {
    if (this.thresholds == null) {
      this.thresholds = new HashMap<>();
    }
    this.thresholds.put(key, thresholdsItem);
    return this;
  }

   /**
   * Get thresholds
   * @return thresholds
  **/
  @javax.annotation.Nonnull
  public Map<String, Double> getThresholds() {
    return thresholds;
  }

  public void setThresholds(Map<String, Double> thresholds) {
    this.thresholds = thresholds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LolChallengesV1ChallengeConfigInfoDto lolChallengesV1ChallengeConfigInfoDto = (LolChallengesV1ChallengeConfigInfoDto) o;
    return Objects.equals(this.id, lolChallengesV1ChallengeConfigInfoDto.id) &&
        Objects.equals(this.localizedNames, lolChallengesV1ChallengeConfigInfoDto.localizedNames) &&
        Objects.equals(this.state, lolChallengesV1ChallengeConfigInfoDto.state) &&
        Objects.equals(this.tracking, lolChallengesV1ChallengeConfigInfoDto.tracking) &&
        Objects.equals(this.startTimestamp, lolChallengesV1ChallengeConfigInfoDto.startTimestamp) &&
        Objects.equals(this.endTimestamp, lolChallengesV1ChallengeConfigInfoDto.endTimestamp) &&
        Objects.equals(this.leaderboard, lolChallengesV1ChallengeConfigInfoDto.leaderboard) &&
        Objects.equals(this.thresholds, lolChallengesV1ChallengeConfigInfoDto.thresholds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, localizedNames, state, tracking, startTimestamp, endTimestamp, leaderboard, thresholds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LolChallengesV1ChallengeConfigInfoDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    localizedNames: ").append(toIndentedString(localizedNames)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tracking: ").append(toIndentedString(tracking)).append("\n");
    sb.append("    startTimestamp: ").append(toIndentedString(startTimestamp)).append("\n");
    sb.append("    endTimestamp: ").append(toIndentedString(endTimestamp)).append("\n");
    sb.append("    leaderboard: ").append(toIndentedString(leaderboard)).append("\n");
    sb.append("    thresholds: ").append(toIndentedString(thresholds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("localizedNames");
    openapiFields.add("state");
    openapiFields.add("tracking");
    openapiFields.add("startTimestamp");
    openapiFields.add("endTimestamp");
    openapiFields.add("leaderboard");
    openapiFields.add("thresholds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("localizedNames");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("leaderboard");
    openapiRequiredFields.add("thresholds");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LolChallengesV1ChallengeConfigInfoDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LolChallengesV1ChallengeConfigInfoDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LolChallengesV1ChallengeConfigInfoDto is not found in the empty JSON string", LolChallengesV1ChallengeConfigInfoDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LolChallengesV1ChallengeConfigInfoDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LolChallengesV1ChallengeConfigInfoDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LolChallengesV1ChallengeConfigInfoDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      if ((jsonObj.get("tracking") != null && !jsonObj.get("tracking").isJsonNull()) && !jsonObj.get("tracking").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracking` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking").toString()));
      }
      // validate the optional field `tracking`
      if (jsonObj.get("tracking") != null && !jsonObj.get("tracking").isJsonNull()) {
        TrackingEnum.validateJsonElement(jsonObj.get("tracking"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LolChallengesV1ChallengeConfigInfoDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LolChallengesV1ChallengeConfigInfoDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LolChallengesV1ChallengeConfigInfoDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LolChallengesV1ChallengeConfigInfoDto.class));

       return (TypeAdapter<T>) new TypeAdapter<LolChallengesV1ChallengeConfigInfoDto>() {
           @Override
           public void write(JsonWriter out, LolChallengesV1ChallengeConfigInfoDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LolChallengesV1ChallengeConfigInfoDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LolChallengesV1ChallengeConfigInfoDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LolChallengesV1ChallengeConfigInfoDto
  * @throws IOException if the JSON string is invalid with respect to LolChallengesV1ChallengeConfigInfoDto
  */
  public static LolChallengesV1ChallengeConfigInfoDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LolChallengesV1ChallengeConfigInfoDto.class);
  }

 /**
  * Convert an instance of LolChallengesV1ChallengeConfigInfoDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

