/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.pajonti.sejuapi.model.MatchV5ParticipantDto;
import fr.pajonti.sejuapi.model.MatchV5TeamDto;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.pajonti.sejuapi.invoker.JSON;

/**
 * MatchV5InfoDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T18:28:23.553111400+01:00[Europe/Paris]", comments = "Generator version: 7.4.0")
public class MatchV5InfoDto {
  public static final String SERIALIZED_NAME_GAME_CREATION = "gameCreation";
  @SerializedName(SERIALIZED_NAME_GAME_CREATION)
  private Long gameCreation;

  public static final String SERIALIZED_NAME_GAME_DURATION = "gameDuration";
  @SerializedName(SERIALIZED_NAME_GAME_DURATION)
  private Long gameDuration;

  public static final String SERIALIZED_NAME_GAME_END_TIMESTAMP = "gameEndTimestamp";
  @SerializedName(SERIALIZED_NAME_GAME_END_TIMESTAMP)
  private Long gameEndTimestamp;

  public static final String SERIALIZED_NAME_GAME_ID = "gameId";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private Long gameId;

  public static final String SERIALIZED_NAME_GAME_MODE = "gameMode";
  @SerializedName(SERIALIZED_NAME_GAME_MODE)
  private String gameMode;

  public static final String SERIALIZED_NAME_GAME_NAME = "gameName";
  @SerializedName(SERIALIZED_NAME_GAME_NAME)
  private String gameName;

  public static final String SERIALIZED_NAME_GAME_START_TIMESTAMP = "gameStartTimestamp";
  @SerializedName(SERIALIZED_NAME_GAME_START_TIMESTAMP)
  private Long gameStartTimestamp;

  public static final String SERIALIZED_NAME_GAME_TYPE = "gameType";
  @SerializedName(SERIALIZED_NAME_GAME_TYPE)
  private String gameType;

  public static final String SERIALIZED_NAME_GAME_VERSION = "gameVersion";
  @SerializedName(SERIALIZED_NAME_GAME_VERSION)
  private String gameVersion;

  public static final String SERIALIZED_NAME_MAP_ID = "mapId";
  @SerializedName(SERIALIZED_NAME_MAP_ID)
  private Integer mapId;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<MatchV5ParticipantDto> participants = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLATFORM_ID = "platformId";
  @SerializedName(SERIALIZED_NAME_PLATFORM_ID)
  private String platformId;

  public static final String SERIALIZED_NAME_QUEUE_ID = "queueId";
  @SerializedName(SERIALIZED_NAME_QUEUE_ID)
  private Integer queueId;

  public static final String SERIALIZED_NAME_TEAMS = "teams";
  @SerializedName(SERIALIZED_NAME_TEAMS)
  private List<MatchV5TeamDto> teams = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOURNAMENT_CODE = "tournamentCode";
  @SerializedName(SERIALIZED_NAME_TOURNAMENT_CODE)
  private String tournamentCode;

  public static final String SERIALIZED_NAME_END_OF_GAME_RESULT = "endOfGameResult";
  @SerializedName(SERIALIZED_NAME_END_OF_GAME_RESULT)
  private String endOfGameResult;

  public MatchV5InfoDto() {
  }

  public MatchV5InfoDto gameCreation(Long gameCreation) {
    this.gameCreation = gameCreation;
    return this;
  }

   /**
   * Unix timestamp for when the game is created on the game server (i.e., the loading screen).
   * @return gameCreation
  **/
  @javax.annotation.Nonnull
  public Long getGameCreation() {
    return gameCreation;
  }

  public void setGameCreation(Long gameCreation) {
    this.gameCreation = gameCreation;
  }


  public MatchV5InfoDto gameDuration(Long gameDuration) {
    this.gameDuration = gameDuration;
    return this;
  }

   /**
   * Prior to patch 11.20, this field returns the game length in milliseconds calculated from gameEndTimestamp - gameStartTimestamp. Post patch 11.20, this field returns the max timePlayed of any participant in the game in seconds, which makes the behavior of this field consistent with that of match-v4. The best way to handling the change in this field is to treat the value as milliseconds if the gameEndTimestamp field isn&#39;t in the response and to treat the value as seconds if gameEndTimestamp is in the response.
   * @return gameDuration
  **/
  @javax.annotation.Nonnull
  public Long getGameDuration() {
    return gameDuration;
  }

  public void setGameDuration(Long gameDuration) {
    this.gameDuration = gameDuration;
  }


  public MatchV5InfoDto gameEndTimestamp(Long gameEndTimestamp) {
    this.gameEndTimestamp = gameEndTimestamp;
    return this;
  }

   /**
   * Unix timestamp for when match ends on the game server. This timestamp can occasionally be significantly longer than when the match \&quot;ends\&quot;. The most reliable way of determining the timestamp for the end of the match would be to add the max time played of any participant to the gameStartTimestamp. This field was added to match-v5 in patch 11.20 on Oct 5th, 2021.
   * @return gameEndTimestamp
  **/
  @javax.annotation.Nullable
  public Long getGameEndTimestamp() {
    return gameEndTimestamp;
  }

  public void setGameEndTimestamp(Long gameEndTimestamp) {
    this.gameEndTimestamp = gameEndTimestamp;
  }


  public MatchV5InfoDto gameId(Long gameId) {
    this.gameId = gameId;
    return this;
  }

   /**
   * Get gameId
   * @return gameId
  **/
  @javax.annotation.Nonnull
  public Long getGameId() {
    return gameId;
  }

  public void setGameId(Long gameId) {
    this.gameId = gameId;
  }


  public MatchV5InfoDto gameMode(String gameMode) {
    this.gameMode = gameMode;
    return this;
  }

   /**
   * Refer to the Game Constants documentation.
   * @return gameMode
  **/
  @javax.annotation.Nonnull
  public String getGameMode() {
    return gameMode;
  }

  public void setGameMode(String gameMode) {
    this.gameMode = gameMode;
  }


  public MatchV5InfoDto gameName(String gameName) {
    this.gameName = gameName;
    return this;
  }

   /**
   * Get gameName
   * @return gameName
  **/
  @javax.annotation.Nonnull
  public String getGameName() {
    return gameName;
  }

  public void setGameName(String gameName) {
    this.gameName = gameName;
  }


  public MatchV5InfoDto gameStartTimestamp(Long gameStartTimestamp) {
    this.gameStartTimestamp = gameStartTimestamp;
    return this;
  }

   /**
   * Unix timestamp for when match starts on the game server.
   * @return gameStartTimestamp
  **/
  @javax.annotation.Nonnull
  public Long getGameStartTimestamp() {
    return gameStartTimestamp;
  }

  public void setGameStartTimestamp(Long gameStartTimestamp) {
    this.gameStartTimestamp = gameStartTimestamp;
  }


  public MatchV5InfoDto gameType(String gameType) {
    this.gameType = gameType;
    return this;
  }

   /**
   * Get gameType
   * @return gameType
  **/
  @javax.annotation.Nonnull
  public String getGameType() {
    return gameType;
  }

  public void setGameType(String gameType) {
    this.gameType = gameType;
  }


  public MatchV5InfoDto gameVersion(String gameVersion) {
    this.gameVersion = gameVersion;
    return this;
  }

   /**
   * The first two parts can be used to determine the patch a game was played on.
   * @return gameVersion
  **/
  @javax.annotation.Nonnull
  public String getGameVersion() {
    return gameVersion;
  }

  public void setGameVersion(String gameVersion) {
    this.gameVersion = gameVersion;
  }


  public MatchV5InfoDto mapId(Integer mapId) {
    this.mapId = mapId;
    return this;
  }

   /**
   * Refer to the Game Constants documentation.
   * @return mapId
  **/
  @javax.annotation.Nonnull
  public Integer getMapId() {
    return mapId;
  }

  public void setMapId(Integer mapId) {
    this.mapId = mapId;
  }


  public MatchV5InfoDto participants(List<MatchV5ParticipantDto> participants) {
    this.participants = participants;
    return this;
  }

  public MatchV5InfoDto addParticipantsItem(MatchV5ParticipantDto participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

   /**
   * Get participants
   * @return participants
  **/
  @javax.annotation.Nonnull
  public List<MatchV5ParticipantDto> getParticipants() {
    return participants;
  }

  public void setParticipants(List<MatchV5ParticipantDto> participants) {
    this.participants = participants;
  }


  public MatchV5InfoDto platformId(String platformId) {
    this.platformId = platformId;
    return this;
  }

   /**
   * Platform where the match was played.
   * @return platformId
  **/
  @javax.annotation.Nonnull
  public String getPlatformId() {
    return platformId;
  }

  public void setPlatformId(String platformId) {
    this.platformId = platformId;
  }


  public MatchV5InfoDto queueId(Integer queueId) {
    this.queueId = queueId;
    return this;
  }

   /**
   * Refer to the Game Constants documentation.
   * @return queueId
  **/
  @javax.annotation.Nonnull
  public Integer getQueueId() {
    return queueId;
  }

  public void setQueueId(Integer queueId) {
    this.queueId = queueId;
  }


  public MatchV5InfoDto teams(List<MatchV5TeamDto> teams) {
    this.teams = teams;
    return this;
  }

  public MatchV5InfoDto addTeamsItem(MatchV5TeamDto teamsItem) {
    if (this.teams == null) {
      this.teams = new ArrayList<>();
    }
    this.teams.add(teamsItem);
    return this;
  }

   /**
   * Get teams
   * @return teams
  **/
  @javax.annotation.Nonnull
  public List<MatchV5TeamDto> getTeams() {
    return teams;
  }

  public void setTeams(List<MatchV5TeamDto> teams) {
    this.teams = teams;
  }


  public MatchV5InfoDto tournamentCode(String tournamentCode) {
    this.tournamentCode = tournamentCode;
    return this;
  }

   /**
   * Tournament code used to generate the match. This field was added to match-v5 in patch 11.13 on June 23rd, 2021.
   * @return tournamentCode
  **/
  @javax.annotation.Nullable
  public String getTournamentCode() {
    return tournamentCode;
  }

  public void setTournamentCode(String tournamentCode) {
    this.tournamentCode = tournamentCode;
  }


  public MatchV5InfoDto endOfGameResult(String endOfGameResult) {
    this.endOfGameResult = endOfGameResult;
    return this;
  }

   /**
   * Get endOfGameResult
   * @return endOfGameResult
  **/
  @javax.annotation.Nullable
  public String getEndOfGameResult() {
    return endOfGameResult;
  }

  public void setEndOfGameResult(String endOfGameResult) {
    this.endOfGameResult = endOfGameResult;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchV5InfoDto matchV5InfoDto = (MatchV5InfoDto) o;
    return Objects.equals(this.gameCreation, matchV5InfoDto.gameCreation) &&
        Objects.equals(this.gameDuration, matchV5InfoDto.gameDuration) &&
        Objects.equals(this.gameEndTimestamp, matchV5InfoDto.gameEndTimestamp) &&
        Objects.equals(this.gameId, matchV5InfoDto.gameId) &&
        Objects.equals(this.gameMode, matchV5InfoDto.gameMode) &&
        Objects.equals(this.gameName, matchV5InfoDto.gameName) &&
        Objects.equals(this.gameStartTimestamp, matchV5InfoDto.gameStartTimestamp) &&
        Objects.equals(this.gameType, matchV5InfoDto.gameType) &&
        Objects.equals(this.gameVersion, matchV5InfoDto.gameVersion) &&
        Objects.equals(this.mapId, matchV5InfoDto.mapId) &&
        Objects.equals(this.participants, matchV5InfoDto.participants) &&
        Objects.equals(this.platformId, matchV5InfoDto.platformId) &&
        Objects.equals(this.queueId, matchV5InfoDto.queueId) &&
        Objects.equals(this.teams, matchV5InfoDto.teams) &&
        Objects.equals(this.tournamentCode, matchV5InfoDto.tournamentCode) &&
        Objects.equals(this.endOfGameResult, matchV5InfoDto.endOfGameResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gameCreation, gameDuration, gameEndTimestamp, gameId, gameMode, gameName, gameStartTimestamp, gameType, gameVersion, mapId, participants, platformId, queueId, teams, tournamentCode, endOfGameResult);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchV5InfoDto {\n");
    sb.append("    gameCreation: ").append(toIndentedString(gameCreation)).append("\n");
    sb.append("    gameDuration: ").append(toIndentedString(gameDuration)).append("\n");
    sb.append("    gameEndTimestamp: ").append(toIndentedString(gameEndTimestamp)).append("\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    gameMode: ").append(toIndentedString(gameMode)).append("\n");
    sb.append("    gameName: ").append(toIndentedString(gameName)).append("\n");
    sb.append("    gameStartTimestamp: ").append(toIndentedString(gameStartTimestamp)).append("\n");
    sb.append("    gameType: ").append(toIndentedString(gameType)).append("\n");
    sb.append("    gameVersion: ").append(toIndentedString(gameVersion)).append("\n");
    sb.append("    mapId: ").append(toIndentedString(mapId)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    platformId: ").append(toIndentedString(platformId)).append("\n");
    sb.append("    queueId: ").append(toIndentedString(queueId)).append("\n");
    sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
    sb.append("    tournamentCode: ").append(toIndentedString(tournamentCode)).append("\n");
    sb.append("    endOfGameResult: ").append(toIndentedString(endOfGameResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gameCreation");
    openapiFields.add("gameDuration");
    openapiFields.add("gameEndTimestamp");
    openapiFields.add("gameId");
    openapiFields.add("gameMode");
    openapiFields.add("gameName");
    openapiFields.add("gameStartTimestamp");
    openapiFields.add("gameType");
    openapiFields.add("gameVersion");
    openapiFields.add("mapId");
    openapiFields.add("participants");
    openapiFields.add("platformId");
    openapiFields.add("queueId");
    openapiFields.add("teams");
    openapiFields.add("tournamentCode");
    openapiFields.add("endOfGameResult");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("gameCreation");
    openapiRequiredFields.add("gameDuration");
    openapiRequiredFields.add("gameId");
    openapiRequiredFields.add("gameMode");
    openapiRequiredFields.add("gameName");
    openapiRequiredFields.add("gameStartTimestamp");
    openapiRequiredFields.add("gameType");
    openapiRequiredFields.add("gameVersion");
    openapiRequiredFields.add("mapId");
    openapiRequiredFields.add("participants");
    openapiRequiredFields.add("platformId");
    openapiRequiredFields.add("queueId");
    openapiRequiredFields.add("teams");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MatchV5InfoDto
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MatchV5InfoDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchV5InfoDto is not found in the empty JSON string", MatchV5InfoDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MatchV5InfoDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchV5InfoDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MatchV5InfoDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("gameMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gameMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gameMode").toString()));
      }
      if (!jsonObj.get("gameName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gameName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gameName").toString()));
      }
      if (!jsonObj.get("gameType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gameType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gameType").toString()));
      }
      if (!jsonObj.get("gameVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gameVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gameVersion").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("participants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
      }

      JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
      // validate the required field `participants` (array)
      for (int i = 0; i < jsonArrayparticipants.size(); i++) {
        MatchV5ParticipantDto.validateJsonElement(jsonArrayparticipants.get(i));
      };
      if (!jsonObj.get("platformId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("teams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `teams` to be an array in the JSON string but got `%s`", jsonObj.get("teams").toString()));
      }

      JsonArray jsonArrayteams = jsonObj.getAsJsonArray("teams");
      // validate the required field `teams` (array)
      for (int i = 0; i < jsonArrayteams.size(); i++) {
        MatchV5TeamDto.validateJsonElement(jsonArrayteams.get(i));
      };
      if ((jsonObj.get("tournamentCode") != null && !jsonObj.get("tournamentCode").isJsonNull()) && !jsonObj.get("tournamentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tournamentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tournamentCode").toString()));
      }
      if ((jsonObj.get("endOfGameResult") != null && !jsonObj.get("endOfGameResult").isJsonNull()) && !jsonObj.get("endOfGameResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endOfGameResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endOfGameResult").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchV5InfoDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchV5InfoDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchV5InfoDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchV5InfoDto.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchV5InfoDto>() {
           @Override
           public void write(JsonWriter out, MatchV5InfoDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchV5InfoDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MatchV5InfoDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MatchV5InfoDto
  * @throws IOException if the JSON string is invalid with respect to MatchV5InfoDto
  */
  public static MatchV5InfoDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchV5InfoDto.class);
  }

 /**
  * Convert an instance of MatchV5InfoDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

