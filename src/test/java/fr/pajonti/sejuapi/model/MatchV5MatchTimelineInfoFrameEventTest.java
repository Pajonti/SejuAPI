/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.pajonti.sejuapi.model.MatchV5MatchTimelineInfoFrameEventVictimDamageDealt;
import fr.pajonti.sejuapi.model.MatchV5MatchTimelinePosition;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for MatchV5MatchTimelineInfoFrameEvent
 */
public class MatchV5MatchTimelineInfoFrameEventTest {
    private final MatchV5MatchTimelineInfoFrameEvent model = new MatchV5MatchTimelineInfoFrameEvent();

    /**
     * Model tests for MatchV5MatchTimelineInfoFrameEvent
     */
    @Test
    public void testMatchV5MatchTimelineInfoFrameEvent() {
        // TODO: test MatchV5MatchTimelineInfoFrameEvent
    }

    /**
     * Test the property 'realTimestamp'
     */
    @Test
    public void realTimestampTest() {
        // TODO: test realTimestamp
    }

    /**
     * Test the property 'timestamp'
     */
    @Test
    public void timestampTest() {
        // TODO: test timestamp
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'itemId'
     */
    @Test
    public void itemIdTest() {
        // TODO: test itemId
    }

    /**
     * Test the property 'participantId'
     */
    @Test
    public void participantIdTest() {
        // TODO: test participantId
    }

    /**
     * Test the property 'levelUpType'
     */
    @Test
    public void levelUpTypeTest() {
        // TODO: test levelUpType
    }

    /**
     * Test the property 'skillSlot'
     */
    @Test
    public void skillSlotTest() {
        // TODO: test skillSlot
    }

    /**
     * Test the property 'creatorId'
     */
    @Test
    public void creatorIdTest() {
        // TODO: test creatorId
    }

    /**
     * Test the property 'wardType'
     */
    @Test
    public void wardTypeTest() {
        // TODO: test wardType
    }

    /**
     * Test the property 'level'
     */
    @Test
    public void levelTest() {
        // TODO: test level
    }

    /**
     * Test the property 'assistingParticipantIds'
     */
    @Test
    public void assistingParticipantIdsTest() {
        // TODO: test assistingParticipantIds
    }

    /**
     * Test the property 'bounty'
     */
    @Test
    public void bountyTest() {
        // TODO: test bounty
    }

    /**
     * Test the property 'killStreakLength'
     */
    @Test
    public void killStreakLengthTest() {
        // TODO: test killStreakLength
    }

    /**
     * Test the property 'killerId'
     */
    @Test
    public void killerIdTest() {
        // TODO: test killerId
    }

    /**
     * Test the property 'position'
     */
    @Test
    public void positionTest() {
        // TODO: test position
    }

    /**
     * Test the property 'victimDamageDealt'
     */
    @Test
    public void victimDamageDealtTest() {
        // TODO: test victimDamageDealt
    }

    /**
     * Test the property 'victimDamageReceived'
     */
    @Test
    public void victimDamageReceivedTest() {
        // TODO: test victimDamageReceived
    }

    /**
     * Test the property 'victimId'
     */
    @Test
    public void victimIdTest() {
        // TODO: test victimId
    }

    /**
     * Test the property 'killType'
     */
    @Test
    public void killTypeTest() {
        // TODO: test killType
    }

    /**
     * Test the property 'laneType'
     */
    @Test
    public void laneTypeTest() {
        // TODO: test laneType
    }

    /**
     * Test the property 'teamId'
     */
    @Test
    public void teamIdTest() {
        // TODO: test teamId
    }

    /**
     * Test the property 'multiKillLength'
     */
    @Test
    public void multiKillLengthTest() {
        // TODO: test multiKillLength
    }

    /**
     * Test the property 'killerTeamId'
     */
    @Test
    public void killerTeamIdTest() {
        // TODO: test killerTeamId
    }

    /**
     * Test the property 'monsterType'
     */
    @Test
    public void monsterTypeTest() {
        // TODO: test monsterType
    }

    /**
     * Test the property 'monsterSubType'
     */
    @Test
    public void monsterSubTypeTest() {
        // TODO: test monsterSubType
    }

    /**
     * Test the property 'buildingType'
     */
    @Test
    public void buildingTypeTest() {
        // TODO: test buildingType
    }

    /**
     * Test the property 'towerType'
     */
    @Test
    public void towerTypeTest() {
        // TODO: test towerType
    }

    /**
     * Test the property 'afterId'
     */
    @Test
    public void afterIdTest() {
        // TODO: test afterId
    }

    /**
     * Test the property 'beforeId'
     */
    @Test
    public void beforeIdTest() {
        // TODO: test beforeId
    }

    /**
     * Test the property 'goldGain'
     */
    @Test
    public void goldGainTest() {
        // TODO: test goldGain
    }

    /**
     * Test the property 'gameId'
     */
    @Test
    public void gameIdTest() {
        // TODO: test gameId
    }

    /**
     * Test the property 'winningTeam'
     */
    @Test
    public void winningTeamTest() {
        // TODO: test winningTeam
    }

    /**
     * Test the property 'transformType'
     */
    @Test
    public void transformTypeTest() {
        // TODO: test transformType
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'shutdownBounty'
     */
    @Test
    public void shutdownBountyTest() {
        // TODO: test shutdownBounty
    }

    /**
     * Test the property 'actualStartTime'
     */
    @Test
    public void actualStartTimeTest() {
        // TODO: test actualStartTime
    }

}
