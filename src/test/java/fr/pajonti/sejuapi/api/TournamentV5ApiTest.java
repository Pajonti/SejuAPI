/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.api;

import fr.pajonti.sejuapi.invoker.ApiException;
import fr.pajonti.sejuapi.model.TournamentV5LobbyEventV5DTOWrapper;
import fr.pajonti.sejuapi.model.TournamentV5ProviderRegistrationParametersV5;
import fr.pajonti.sejuapi.model.TournamentV5TournamentCodeParametersV5;
import fr.pajonti.sejuapi.model.TournamentV5TournamentCodeUpdateParametersV5;
import fr.pajonti.sejuapi.model.TournamentV5TournamentCodeV5DTO;
import fr.pajonti.sejuapi.model.TournamentV5TournamentGamesV5;
import fr.pajonti.sejuapi.model.TournamentV5TournamentRegistrationParametersV5;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TournamentV5Api
 */
@Disabled
public class TournamentV5ApiTest {

    private final TournamentV5Api api = new TournamentV5Api();

    /**
     * Create a tournament code for the given tournament.
     *
     * Create a tournament code for the given tournament.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tournamentV5CreateTournamentCodeTest() throws ApiException {
        Long tournamentId = null;
        TournamentV5TournamentCodeParametersV5 tournamentV5TournamentCodeParametersV5 = null;
        Integer count = null;
        List<String> response = api.tournamentV5CreateTournamentCode(tournamentId, tournamentV5TournamentCodeParametersV5, count);
        // TODO: test validations
    }

    /**
     * Get games details
     *
     * Get games details ## Implementation Notes Additional endpoint to get tournament games. From this endpoint, you are able to get participants PUUID (the callback doesn&#39;t contain this info).  You can also use it to check if the game was recorded and validate callbacks. If the endpoint returns the game, it means a callback was attempted.  This will only work for tournament codes created after November 10, 2023.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tournamentV5GetGamesTest() throws ApiException {
        String tournamentCode = null;
        List<TournamentV5TournamentGamesV5> response = api.tournamentV5GetGames(tournamentCode);
        // TODO: test validations
    }

    /**
     * Gets a list of lobby events by tournament code.
     *
     * Gets a list of lobby events by tournament code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tournamentV5GetLobbyEventsByCodeTest() throws ApiException {
        String tournamentCode = null;
        TournamentV5LobbyEventV5DTOWrapper response = api.tournamentV5GetLobbyEventsByCode(tournamentCode);
        // TODO: test validations
    }

    /**
     * Returns the tournament code DTO associated with a tournament code string.
     *
     * Returns the tournament code DTO associated with a tournament code string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tournamentV5GetTournamentCodeTest() throws ApiException {
        String tournamentCode = null;
        TournamentV5TournamentCodeV5DTO response = api.tournamentV5GetTournamentCode(tournamentCode);
        // TODO: test validations
    }

    /**
     * Creates a tournament provider and returns its ID.
     *
     * Creates a tournament provider and returns its ID. ## Implementation Notes Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tournamentV5RegisterProviderDataTest() throws ApiException {
        TournamentV5ProviderRegistrationParametersV5 tournamentV5ProviderRegistrationParametersV5 = null;
        Integer response = api.tournamentV5RegisterProviderData(tournamentV5ProviderRegistrationParametersV5);
        // TODO: test validations
    }

    /**
     * Creates a tournament and returns its ID.
     *
     * Creates a tournament and returns its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tournamentV5RegisterTournamentTest() throws ApiException {
        TournamentV5TournamentRegistrationParametersV5 tournamentV5TournamentRegistrationParametersV5 = null;
        Integer response = api.tournamentV5RegisterTournament(tournamentV5TournamentRegistrationParametersV5);
        // TODO: test validations
    }

    /**
     * Update the pick type, map, spectator type, or allowed puuids for a code.
     *
     * Update the pick type, map, spectator type, or allowed puuids for a code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tournamentV5UpdateCodeTest() throws ApiException {
        String tournamentCode = null;
        TournamentV5TournamentCodeUpdateParametersV5 tournamentV5TournamentCodeUpdateParametersV5 = null;
        api.tournamentV5UpdateCode(tournamentCode, tournamentV5TournamentCodeUpdateParametersV5);
        // TODO: test validations
    }

}
