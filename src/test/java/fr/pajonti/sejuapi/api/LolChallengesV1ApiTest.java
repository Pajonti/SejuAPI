/*
 * Riot API
 *  OpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily. ## OpenAPI Spec File The following versions of the Riot API spec file are available: - `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json)) - `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json)) - `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml)) - `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml)) - `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json)) - `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json)) - `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml)) - `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml)) ## Other Files - Missing DTOs: [`missing.json`](../missing.json) - Routes Table: [`routesTable.json`](../routesTable.json) - [Enum Files](../enums/) ## Source Code Source code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome! ## Automatically Generated Rebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily. *** 
 *
 * The version of the OpenAPI document: 879affafe206ccc5b48127e68c0bd466fcc73c84
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.pajonti.sejuapi.api;

import fr.pajonti.sejuapi.invoker.ApiException;
import fr.pajonti.sejuapi.model.LolChallengesV1ApexPlayerInfoDto;
import fr.pajonti.sejuapi.model.LolChallengesV1ChallengeConfigInfoDto;
import fr.pajonti.sejuapi.model.LolChallengesV1PlayerInfoDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LolChallengesV1Api
 */
@Disabled
public class LolChallengesV1ApiTest {

    private final LolChallengesV1Api api = new LolChallengesV1Api();

    /**
     * List of all basic challenge configuration information (includes all translations for names and descriptions)
     *
     * List of all basic challenge configuration information (includes all translations for names and descriptions)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lolChallengesV1GetAllChallengeConfigsTest() throws ApiException {
        List<LolChallengesV1ChallengeConfigInfoDto> response = api.lolChallengesV1GetAllChallengeConfigs();
        // TODO: test validations
    }

    /**
     * Map of level to percentile of players who have achieved it - keys: ChallengeId -&gt; Season -&gt; Level -&gt; percentile of players who achieved it
     *
     * Map of level to percentile of players who have achieved it - keys: ChallengeId -&gt; Season -&gt; Level -&gt; percentile of players who achieved it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lolChallengesV1GetAllChallengePercentilesTest() throws ApiException {
        Map<String, Map<String, Double>> response = api.lolChallengesV1GetAllChallengePercentiles();
        // TODO: test validations
    }

    /**
     * Get challenge configuration (REST)
     *
     * Get challenge configuration (REST)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lolChallengesV1GetChallengeConfigsTest() throws ApiException {
        Long challengeId = null;
        LolChallengesV1ChallengeConfigInfoDto response = api.lolChallengesV1GetChallengeConfigs(challengeId);
        // TODO: test validations
    }

    /**
     * Return top players for each level. Level must be MASTER, GRANDMASTER or CHALLENGER.
     *
     * Return top players for each level. Level must be MASTER, GRANDMASTER or CHALLENGER.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lolChallengesV1GetChallengeLeaderboardsTest() throws ApiException {
        String level = null;
        Long challengeId = null;
        Integer limit = null;
        List<LolChallengesV1ApexPlayerInfoDto> response = api.lolChallengesV1GetChallengeLeaderboards(level, challengeId, limit);
        // TODO: test validations
    }

    /**
     * Map of level to percentile of players who have achieved it
     *
     * Map of level to percentile of players who have achieved it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lolChallengesV1GetChallengePercentilesTest() throws ApiException {
        Long challengeId = null;
        Map<String, Double> response = api.lolChallengesV1GetChallengePercentiles(challengeId);
        // TODO: test validations
    }

    /**
     * Returns player information with list of all progressed challenges (REST)
     *
     * Returns player information with list of all progressed challenges (REST)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lolChallengesV1GetPlayerDataTest() throws ApiException {
        String puuid = null;
        LolChallengesV1PlayerInfoDto response = api.lolChallengesV1GetPlayerData(puuid);
        // TODO: test validations
    }

}
